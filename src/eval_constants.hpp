#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(95, 114);
inline const PScore KNIGHT_MAT = S(364, 245);
inline const PScore BISHOP_MAT = S(356, 250);
inline const PScore ROOK_MAT   = S(445, 386);
inline const PScore QUEEN_MAT  = S(608, 503);
inline const PScore TEMPO_VAL  = S(47, 0);

inline const PScore BISHOP_PAIR_VAL  = S(125, 46);
inline const PScore DOUBLED_PAWN_VAL = S(-12, -66);

inline const PScore POTENTIAL_CHECKER_VAL = S(-23, -93);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(38, 0), S(40, 33), S(36, 68), S(113, 141), S(307, 254), S(180, 264),
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(55, 15), S(33, 17), S(30, 41), S(86, 80), S(182, 154),
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(-6, 43), S(-5, 48), S(0, 87), S(24, 126), S(116, 175), S(166, 222),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(33, 39), S(87, 76), S(122, 121), S(154, 142), S(191, 156), S(210, 182), S(239, 180), S(258, 178), S(299, 123),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(25, 48), S(77, 103), S(117, 104), S(143, 137), S(170, 157), S(192, 171), S(200, 184), S(208, 192), S(213, 202), S(232, 186), S(234, 171), S(246, 154), S(257, 166), S(235, 147),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-8, -20), S(105, 208), S(152, 222), S(177, 247), S(208, 270), S(224, 287), S(245, 302), S(255, 306), S(279, 312), S(296, 318), S(325, 311), S(338, 310), S(363, 300), S(369, 287), S(370, 251),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-39, -11), S(-83, -35), S(244, 94), S(305, 103), S(285, 318), S(323, 386), S(329, 423), S(347, 439), S(348, 493), S(357, 533), S(359, 585), S(364, 591), S(373, 571), S(381, 555), S(401, 523), S(410, 495), S(418, 461), S(422, 432), S(431, 411), S(417, 383), S(398, 355), S(343, 287), S(366, 302), S(278, 236), S(269, 223), S(189, 185), S(129, 154), S(124, 154),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(-86, -56), S(157, -91), S(79, -46), S(33, -1), S(7, 7), S(-22, 4), S(-16, 11), S(-41, 0), S(-41, -56),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(58, -19), S(103, -19),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(33, -25), S(77, 4),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(59, 3), S(54, -58), S(22, -16), S(-23, -47),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-88, 319), S(-68, 248), S(-28, 185), S(32, 137), S(39, 93),
};

inline const PScore PAWN_THREAT_KNIGHT = S(135, 80);
inline const PScore PAWN_THREAT_BISHOP = S(158, 74);
inline const PScore PAWN_THREAT_ROOK = S(98, 110);
inline const PScore PAWN_THREAT_QUEEN = S(143, -72);

inline const PScore KNIGHT_THREAT_BISHOP = S(105, 19);
inline const PScore KNIGHT_THREAT_ROOK = S(157, 0);
inline const PScore KNIGHT_THREAT_QUEEN = S(159, -263);

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(182, 236),    S(148, 261),    S(151, 226),    S(176, 203),    S(165, 176),    S(117, 165),    S(187, 219),    S(163, 214),    //
    S(90, 174),     S(97, 193),     S(159, 152),    S(141, 117),    S(108, 103),    S(108, 113),    S(98, 146),     S(51, 166),     //
    S(33, 133),     S(74, 112),     S(106, 86),     S(109, 71),     S(105, 65),     S(82, 73),      S(65, 104),     S(16, 140),     //
    S(29, 76),      S(51, 76),      S(85, 44),      S(77, 54),      S(72, 51),      S(54, 72),      S(14, 106),     S(-7, 104),     //
    S(14, 59),      S(52, 22),      S(29, 48),      S(43, 47),      S(26, 70),      S(7, 71),       S(-7, 93),      S(-4, 96),      //
    S(5, 82),       S(65, 62),      S(50, 59),      S(45, 74),      S(30, 70),      S(20, 83),      S(19, 113),     S(-17, 116),    //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(57, 47),      S(105, 147),    S(-2, 106),     S(162, 97),     S(159, 103),    S(-31, 105),    S(145, 72),     S(8, 110),      //
    S(66, 107),     S(116, 108),    S(149, 73),     S(208, 35),     S(183, 79),     S(110, 117),    S(108, 113),    S(53, 133),     //
    S(119, 133),    S(167, 73),     S(198, 134),    S(202, 96),     S(181, 119),    S(178, 111),    S(139, 120),    S(110, 113),    //
    S(174, 93),     S(157, 91),     S(185, 124),    S(174, 134),    S(186, 143),    S(164, 123),    S(126, 117),    S(154, 115),    //
    S(168, 109),    S(162, 78),     S(180, 94),     S(165, 104),    S(166, 118),    S(151, 133),    S(131, 93),     S(120, 138),    //
    S(101, 92),     S(125, 62),     S(115, 69),     S(126, 99),     S(113, 119),    S(90, 111),     S(100, 86),     S(58, 123),     //
    S(98, 47),      S(83, 56),      S(112, 41),     S(120, 86),     S(92, 102),     S(84, 86),      S(39, 105),     S(102, -3),     //
    S(59, -18),     S(112, 125),    S(86, 46),      S(87, 63),      S(97, 45),      S(33, 33),      S(86, 143),     S(72, -29),     //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(178, 75),     S(13, 181),     S(-66, 179),    S(161, 143),    S(43, 168),     S(0, 199),      S(48, 186),     S(125, 174),    //
    S(105, 189),    S(145, 140),    S(181, 124),    S(188, 134),    S(145, 160),    S(116, 172),    S(143, 183),    S(60, 229),     //
    S(183, 137),    S(221, 136),    S(246, 168),    S(260, 137),    S(231, 146),    S(220, 162),    S(164, 161),    S(161, 110),    //
    S(133, 130),    S(180, 143),    S(217, 152),    S(238, 154),    S(242, 153),    S(179, 168),    S(165, 154),    S(116, 154),    //
    S(175, 86),     S(175, 114),    S(172, 132),    S(206, 148),    S(191, 169),    S(154, 176),    S(134, 152),    S(166, 115),    //
    S(135, 120),    S(162, 94),     S(174, 109),    S(147, 141),    S(148, 163),    S(137, 164),    S(154, 132),    S(101, 166),    //
    S(128, 55),     S(171, 100),    S(120, 90),     S(129, 112),    S(107, 127),    S(133, 102),    S(142, 121),    S(135, 105),    //
    S(87, 137),     S(32, 139),     S(114, 154),    S(60, 82),      S(91, 52),      S(134, 149),    S(114, 74),     S(123, 113),    //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(295, 276),    S(280, 273),    S(311, 277),    S(295, 273),    S(293, 249),    S(316, 249),    S(339, 257),    S(332, 276),    //
    S(294, 286),    S(290, 278),    S(356, 278),    S(333, 271),    S(333, 264),    S(338, 266),    S(315, 261),    S(311, 276),    //
    S(270, 281),    S(314, 263),    S(349, 257),    S(377, 252),    S(365, 247),    S(339, 250),    S(344, 266),    S(306, 266),    //
    S(246, 266),    S(261, 270),    S(327, 234),    S(347, 209),    S(341, 206),    S(340, 232),    S(279, 268),    S(282, 261),    //
    S(199, 246),    S(191, 242),    S(263, 192),    S(275, 172),    S(227, 225),    S(265, 239),    S(226, 251),    S(223, 264),    //
    S(157, 212),    S(203, 167),    S(215, 153),    S(227, 153),    S(222, 176),    S(193, 216),    S(210, 202),    S(175, 245),    //
    S(113, 238),    S(191, 135),    S(233, 131),    S(233, 146),    S(211, 175),    S(219, 199),    S(215, 180),    S(200, 207),    //
    S(155, 254),    S(141, 252),    S(228, 198),    S(274, 160),    S(238, 200),    S(237, 208),    S(228, 216),    S(201, 251),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(323, 290),    S(290, 267),    S(283, 263),    S(282, 273),    S(291, 292),    S(275, 287),    S(304, 284),    S(280, 300),    //
    S(298, 420),    S(271, 400),    S(300, 357),    S(264, 347),    S(258, 349),    S(282, 398),    S(243, 427),    S(268, 406),    //
    S(230, 431),    S(297, 412),    S(285, 385),    S(291, 369),    S(293, 359),    S(285, 383),    S(303, 393),    S(242, 409),    //
    S(265, 412),    S(262, 409),    S(277, 381),    S(286, 372),    S(251, 405),    S(261, 386),    S(251, 411),    S(255, 412),    //
    S(230, 456),    S(247, 404),    S(249, 398),    S(264, 407),    S(256, 436),    S(245, 432),    S(237, 410),    S(245, 429),    //
    S(229, 363),    S(243, 383),    S(250, 428),    S(225, 443),    S(234, 463),    S(229, 470),    S(230, 480),    S(208, 443),    //
    S(190, 272),    S(243, 185),    S(267, 213),    S(258, 364),    S(255, 375),    S(254, 404),    S(235, 411),    S(252, 357),    //
    S(177, 324),    S(166, 151),    S(145, 154),    S(233, 240),    S(253, 388),    S(245, 274),    S(247, 258),    S(231, 323),    //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(-120, -108),  S(-30, -12),    S(-59, 3),      S(-174, 24),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-53, -18),    S(-5, 136),     S(-22, 135),    S(44, 99),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-67, 23),     S(83, 135),     S(108, 135),    S(73, 122),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-237, 50),    S(31, 92),      S(99, 109),     S(93, 109),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-255, 22),    S(-45, 72),     S(-10, 93),     S(-22, 123),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-147, -47),   S(15, 13),      S(-52, 79),     S(-57, 112),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(40, -122),    S(83, -36),     S(41, 21),      S(-28, 54),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-59, -167),   S(61, -116),    S(-31, -68),    S(-30, -71),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
