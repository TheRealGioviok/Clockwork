#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(404, 484);
inline const PScore KNIGHT_MAT = S(1321, 829);
inline const PScore BISHOP_MAT = S(1382, 925);
inline const PScore ROOK_MAT   = S(1963, 1525);
inline const PScore QUEEN_MAT  = S(4495, 2629);
inline const PScore TEMPO_VAL  = S(51, 5);

inline const PScore BISHOP_PAIR_VAL  = S(112, 179);
inline const PScore DOUBLED_PAWN_VAL = S(-86, -132);

inline const PScore POTENTIAL_CHECKER_VAL = S(-72, -5);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(14, -16), S(10, 15), S(66, 53), S(170, 159), S(729, 444), S(1156, 1334),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-116, -279), S(-48, -134), S(10, -56), S(55, -18), S(110, -4), S(144, 21), S(195, 3), S(236, -2), S(294, -88),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-161, -270), S(-68, -172), S(-4, -146), S(38, -103), S(82, -74), S(116, -48), S(135, -39), S(148, -38), S(165, -33), S(171, -48), S(198, -64), S(250, -115), S(257, -115), S(323, -170),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-359, -392), S(-125, -116), S(-54, -62), S(-18, -47), S(25, -24), S(51, -12), S(76, 10), S(104, 3), S(135, 5), S(167, 12), S(208, 5), S(244, -3), S(278, -10), S(303, -21), S(521, -205),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-463, 18), S(-443, 33), S(-143, -283), S(-100, -375), S(-87, -328), S(-73, -238), S(-59, -149), S(-41, -98), S(-28, -47), S(-9, -30), S(-1, -5), S(6, 19), S(20, 18), S(26, 40), S(36, 37), S(31, 51), S(53, 15), S(66, -1), S(88, -29), S(106, -64), S(169, -134), S(214, -201), S(286, -258), S(397, -380), S(495, -478), S(706, -633), S(843, -774), S(1227, -884),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(-143, 703), S(172, 451), S(79, 498), S(28, 516), S(6, 495), S(-18, 474), S(-12, 471), S(-21, 445), S(1, 382),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(79, -26), S(146, -69),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(32, -3), S(117, -35),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(72, -34), S(80, -88), S(121, -72), S(116, -98),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-49, 63), S(-73, 87), S(-35, 35), S(141, -69), S(426, -270),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(245, 301),    S(282, 350),    S(270, 335),    S(313, 237),    S(328, 151),    S(233, 223),    S(299, 278),    S(307, 261),    //
    S(-18, 78),     S(103, 121),    S(113, 65),     S(132, 10),     S(114, -23),    S(50, 17),      S(26, 57),      S(-82, 65),     //
    S(-111, -56),   S(-20, -71),    S(1, -110),     S(3, -134),     S(-15, -138),   S(-74, -114),   S(-90, -75),    S(-163, -49),   //
    S(-116, -142),  S(-45, -129),   S(-12, -170),   S(-23, -171),   S(-38, -179),   S(-88, -152),   S(-142, -101),  S(-197, -105),  //
    S(-83, -183),   S(48, -191),    S(-2, -169),    S(-13, -160),   S(-52, -163),   S(-97, -154),   S(-110, -121),  S(-168, -142),  //
    S(-126, -170),  S(54, -171),    S(9, -149),     S(-38, -125),   S(-85, -118),   S(-111, -118),  S(-101, -102),  S(-205, -108),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-389, -48),   S(-205, 38),    S(-606, 234),   S(155, -41),    S(-1, 7),       S(-463, 76),    S(-354, 65),    S(-507, 18),    //
    S(-5, 6),       S(17, 37),      S(192, -38),    S(284, -138),   S(247, -80),    S(132, -35),    S(-37, 36),     S(-46, 20),     //
    S(69, 19),      S(145, 21),     S(227, 28),     S(254, 35),     S(217, 41),     S(125, 65),     S(159, -22),    S(39, 1),       //
    S(152, 9),      S(83, 60),      S(149, 74),     S(117, 101),    S(117, 99),     S(111, 78),     S(40, 54),      S(99, 8),       //
    S(124, 4),      S(92, 21),      S(119, 50),     S(84, 77),      S(94, 69),      S(64, 81),      S(85, 1),       S(68, 11),      //
    S(13, -14),     S(69, -20),     S(20, 12),      S(69, 46),      S(74, 42),      S(-10, 32),     S(24, -21),     S(-33, -24),    //
    S(40, -23),     S(27, -25),     S(28, -25),     S(44, -7),      S(10, 13),      S(7, -40),      S(0, -22),      S(-24, -134),   //
    S(-84, 4),      S(19, 0),       S(34, -60),     S(62, -51),     S(53, -50),     S(-4, -85),     S(-4, -25),     S(-147, -62),   //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(0, 13),       S(-149, 51),    S(-520, 107),   S(-109, 30),    S(-196, 69),    S(-275, 75),    S(-215, 143),   S(-89, 88),     //
    S(-14, 23),     S(11, 35),      S(68, 3),       S(22, -12),     S(-26, 33),     S(14, 24),      S(51, 5),       S(-25, 21),     //
    S(59, -6),      S(123, 30),     S(201, 18),     S(209, -2),     S(166, 7),      S(137, 24),     S(89, 6),       S(19, -14),     //
    S(42, -23),     S(93, 21),      S(133, 32),     S(144, 58),     S(183, 32),     S(97, 18),      S(73, 17),      S(9, -10),      //
    S(88, -63),     S(64, 0),       S(94, 20),      S(138, 33),     S(124, 43),     S(69, 38),      S(31, 9),       S(57, -59),     //
    S(67, -21),     S(120, -24),    S(121, -17),    S(64, 41),      S(71, 25),      S(53, 29),      S(112, -17),    S(41, -24),     //
    S(56, -47),     S(115, -49),    S(58, -23),     S(47, -12),     S(21, -7),      S(60, -38),     S(71, -45),     S(82, -102),    //
    S(31, -6),      S(-22, 4),      S(37, 2),       S(15, -41),     S(13, -62),     S(67, -16),     S(58, -79),     S(21, -29),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(221, 12),     S(186, 36),     S(169, 51),     S(192, 32),     S(215, 5),      S(145, 38),     S(176, 27),     S(191, 33),     //
    S(99, 78),      S(88, 85),      S(245, 38),     S(256, 10),     S(295, -18),    S(189, 40),     S(81, 73),      S(91, 72),      //
    S(28, 84),      S(152, 35),     S(218, 12),     S(269, -37),    S(239, -33),    S(157, 15),     S(135, 22),     S(65, 60),      //
    S(-1, 55),      S(8, 67),       S(122, 21),     S(123, 3),      S(130, 0),      S(74, 43),      S(42, 48),      S(6, 51),       //
    S(-67, 18),     S(-52, 28),     S(-11, 27),     S(6, 11),       S(14, 9),       S(-4, 38),      S(-56, 43),     S(-69, 50),     //
    S(-122, -18),   S(-45, -38),    S(-46, -30),    S(-25, -24),    S(-32, -22),    S(-67, 11),     S(-50, -16),    S(-100, 7),     //
    S(-195, 9),     S(-93, -55),    S(-43, -44),    S(-19, -54),    S(-29, -42),    S(-23, -43),    S(-43, -61),    S(-91, -43),    //
    S(-127, -1),    S(-144, 40),    S(-22, -43),    S(45, -79),     S(2, -43),      S(-7, -28),     S(-26, -32),    S(-63, -14),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(52, 51),      S(119, 28),     S(83, 64),      S(86, 97),      S(60, 91),      S(48, 90),      S(58, 45),      S(-31, 87),     //
    S(58, 109),     S(-36, 226),    S(46, 234),     S(-112, 316),   S(-91, 280),    S(-63, 230),    S(-64, 177),    S(-3, 82),      //
    S(0, 147),      S(67, 204),     S(24, 258),     S(31, 219),     S(-42, 245),    S(-24, 198),    S(2, 145),      S(-13, 41),     //
    S(89, 38),      S(-5, 184),     S(8, 208),      S(2, 224),      S(-11, 219),    S(-28, 169),    S(-14, 124),    S(23, 0),       //
    S(37, 51),      S(37, 87),      S(31, 108),     S(4, 162),      S(-4, 162),     S(-5, 110),     S(0, 55),       S(55, -58),     //
    S(30, -60),     S(60, -30),     S(59, 29),      S(22, 34),      S(48, -2),      S(25, 45),      S(61, -52),     S(26, -33),     //
    S(28, -242),    S(67, -312),    S(63, -205),    S(80, -133),    S(65, -99),     S(97, -182),    S(73, -152),    S(68, -140),    //
    S(31, -257),    S(-19, -411),   S(-48, -245),   S(41, -247),    S(97, -223),    S(85, -261),    S(90, -241),    S(36, -145),    //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(-164, -326),  S(248, -126),   S(375, -273),   S(225, -448),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(205, -131),   S(219, 105),    S(107, 141),    S(78, 116),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-48, 26),     S(61, 196),     S(39, 176),     S(-54, 159),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-192, 19),    S(24, 121),     S(5, 146),      S(-119, 174),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-268, -2),    S(-49, 82),     S(-84, 120),    S(-167, 162),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-135, -49),   S(43, 17),      S(-73, 85),     S(-120, 133),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(90, -153),    S(124, -37),    S(45, 25),      S(-67, 82),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-17, -242),   S(116, -160),   S(-31, -93),    S(-22, -101),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
