#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(304, 406);
inline const PParam KNIGHT_MAT = S(1079, 961);
inline const PParam BISHOP_MAT = S(1072, 1033);
inline const PParam ROOK_MAT   = S(1592, 1706);
inline const PParam QUEEN_MAT  = S(3601, 3051);
inline const PParam TEMPO_VAL  = S(58, 16);

inline const PParam BISHOP_PAIR_VAL  = S(80, 177);
inline const PParam DOUBLED_PAWN_VAL = S(-34, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, -1);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(16, 20), S(54, 32), S(77, 68), S(196, 138), S(510, 278), S(1194, 1026),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(58, 46), S(57, 28), S(62, 54), S(143, 119), S(656, -86),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-57, -1), S(-43, 13), S(-15, 84), S(51, 161), S(89, 291), S(210, 79),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(48, -44), S(27, -1), S(12, 27), S(18, 71), S(85, 151), S(169, 272),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(15, -41), S(-1, 5), S(-21, -17), S(-22, -43), S(-41, -85), S(-218, -139),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(6, 40), S(-34, 44), S(-26, -7), S(-13, -36), S(-7, -31), S(20, -37), S(3, -51),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-168, -92), S(32, -49), S(-8, -7), S(11, 24), S(16, 49), S(40, 47), S(-10, 70),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-200, -271), S(-95, -104), S(-38, -53), S(6, -19), S(54, -3), S(82, 37), S(119, 33), S(155, 28), S(207, -42),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-140, -364), S(-67, -170), S(16, -104), S(48, -60), S(76, -27), S(95, -8), S(111, 1), S(126, 4), S(136, 11), S(144, 0), S(166, -18), S(218, -68), S(246, -87), S(307, -130),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-201, -389), S(-115, -135), S(-59, -60), S(-22, -45), S(6, -17), S(28, 0), S(50, 8), S(79, 8), S(104, 17), S(132, 27), S(160, 26), S(176, 30), S(213, 24), S(232, 7), S(371, -116),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-328, 68), S(-289, -801), S(-194, -666), S(-146, -449), S(-121, -263), S(-87, -176), S(-87, -41), S(-60, -45), S(-51, -4), S(-41, 17), S(-32, 41), S(-28, 61), S(-12, 60), S(0, 61), S(4, 64), S(21, 51), S(15, 62), S(28, 44), S(51, 8), S(80, -34), S(104, -65), S(138, -134), S(192, -169), S(353, -343), S(327, -351), S(760, -589), S(549, -521), S(1242, -893),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(427, 564), S(141, 383), S(43, 465), S(30, 500), S(7, 494), S(-29, 494), S(-5, 488), S(-14, 470), S(-12, 400),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(83, -31), S(151, -76),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(35, -3), S(141, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -44), S(67, -68), S(111, -70), S(141, -131),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-39, 32), S(-59, 44), S(-5, -4), S(146, -87), S(344, -232),
};

inline const PParam PAWN_THREAT_KNIGHT = S(224, 74);
inline const PParam PAWN_THREAT_BISHOP = S(201, 106);
inline const PParam PAWN_THREAT_ROOK   = S(189, 54);
inline const PParam PAWN_THREAT_QUEEN  = S(158, -45);

inline const PParam KNIGHT_THREAT_BISHOP = S(99, 71);
inline const PParam KNIGHT_THREAT_ROOK   = S(238, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(152, -71);

inline const PParam BISHOP_THREAT_KNIGHT = S(106, 24);
inline const PParam BISHOP_THREAT_ROOK   = S(235, 51);
inline const PParam BISHOP_THREAT_QUEEN  = S(186, 52);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-6, -11), S(-8, -4), S(-7, -13), S(-12, -23), S(-18, -27), S(-22, -32), S(-23, -39), S(-29, -37), S(-36, -48),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(193, 394),    S(213, 438),    S(253, 413),    S(316, 287),    S(240, 297),    S(240, 359),    S(152, 375),    S(192, 348),    //
    S(35, -32),     S(164, -6),     S(139, -65),    S(141, -121),   S(95, -135),    S(44, -92),     S(5, -43),      S(-57, -44),    //
    S(-24, -72),    S(3, -68),      S(20, -111),    S(2, -125),     S(-9, -131),    S(-48, -127),   S(-93, -78),    S(-124, -57),   //
    S(-34, -127),   S(-12, -97),    S(-11, -134),   S(-24, -131),   S(-44, -140),   S(-73, -126),   S(-131, -76),   S(-152, -90),   //
    S(-49, -156),   S(17, -153),    S(-25, -112),   S(-58, -104),   S(-73, -116),   S(-115, -118),  S(-135, -103),  S(-167, -108),  //
    S(-41, -152),   S(90, -147),    S(53, -116),    S(-7, -96),     S(-43, -110),   S(-76, -111),   S(-108, -85),   S(-144, -100),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-402, -96),   S(-335, 32),    S(-417, 228),   S(-138, 85),    S(-285, 106),   S(-375, 133),   S(-564, 74),    S(-523, 18),    //
    S(-3, 0),       S(73, 17),      S(169, -51),    S(106, 23),     S(117, 21),     S(42, -1),      S(0, 9),        S(-29, -30),    //
    S(58, -18),     S(101, 38),     S(185, 32),     S(142, 48),     S(150, 36),     S(56, 48),      S(59, 17),      S(-39, 26),     //
    S(96, 21),      S(80, 52),      S(106, 63),     S(97, 87),      S(104, 72),     S(64, 74),      S(31, 24),      S(26, 17),      //
    S(94, 5),       S(110, 7),      S(99, 39),      S(85, 44),      S(73, 58),      S(65, 55),      S(38, 22),      S(31, -44),     //
    S(7, -18),      S(22, -29),     S(28, -15),     S(34, 33),      S(43, 30),      S(-15, 6),      S(-9, -34),     S(-48, -35),    //
    S(2, 0),        S(34, -22),     S(12, -23),     S(12, -7),      S(-1, -16),     S(-28, -32),    S(-8, -41),     S(-75, -117),   //
    S(-39, -54),    S(4, -28),      S(20, -39),     S(31, -30),     S(25, -22),     S(-20, -54),    S(-41, -37),    S(-92, -75),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-140, 91),    S(-148, 60),    S(-386, 86),    S(-305, 120),   S(-225, 112),   S(-413, 141),   S(-118, 111),   S(-83, 90),     //
    S(41, -15),     S(35, 55),      S(38, 48),      S(36, 36),      S(16, 48),      S(34, 48),      S(8, 46),       S(-28, 38),     //
    S(61, 44),      S(124, 48),     S(230, 44),     S(142, 45),     S(130, 44),     S(95, 62),      S(149, 33),     S(24, 48),      //
    S(74, -4),      S(80, 59),      S(137, 52),     S(147, 77),     S(151, 77),     S(85, 75),      S(58, 57),      S(6, 40),       //
    S(73, -23),     S(97, 19),      S(104, 44),     S(111, 65),     S(101, 87),     S(57, 74),      S(42, 29),      S(27, -28),     //
    S(89, -33),     S(137, -3),     S(145, 6),      S(79, 49),      S(63, 58),      S(58, 58),      S(90, 9),       S(58, -33),     //
    S(79, -71),     S(124, -40),    S(103, -30),    S(75, 2),       S(65, -16),     S(62, -20),     S(38, -10),     S(63, -78),     //
    S(76, -47),     S(68, -2),      S(76, -5),      S(91, -34),     S(99, -40),     S(90, -9),      S(81, -29),     S(55, -28),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(147, 43),     S(214, 40),     S(131, 73),     S(134, 71),     S(156, 48),     S(102, 64),     S(117, 69),     S(128, 70),     //
    S(78, 90),      S(161, 68),     S(226, 48),     S(169, 83),     S(181, 72),     S(128, 82),     S(81, 96),      S(58, 109),     //
    S(60, 69),      S(200, 35),     S(240, 19),     S(262, 10),     S(216, 22),     S(134, 62),     S(148, 52),     S(28, 105),     //
    S(15, 62),      S(85, 52),      S(122, 46),     S(163, 3),      S(131, 27),     S(61, 80),      S(40, 76),      S(-33, 88),     //
    S(-57, 21),     S(23, 27),      S(21, 36),      S(19, 35),      S(15, 28),      S(-12, 74),     S(-42, 71),     S(-64, 59),     //
    S(-84, 0),      S(-11, -27),    S(-9, -2),      S(-28, 4),      S(-5, -18),     S(-58, 32),     S(-65, 21),     S(-85, 15),     //
    S(-130, 6),     S(-39, -45),    S(-15, -33),    S(-3, -33),     S(-10, -30),    S(-29, -15),    S(-47, -35),    S(-87, -20),    //
    S(-108, 8),     S(-70, 14),     S(-23, -18),    S(9, -36),      S(0, -22),      S(-11, -16),    S(-34, -21),    S(-65, -4),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(57, 79),      S(81, 50),      S(75, 69),      S(-46, 202),    S(36, 105),     S(-36, 150),    S(45, 45),      S(3, 62),       //
    S(40, 120),     S(-35, 215),    S(-38, 269),    S(-115, 298),   S(-95, 245),    S(-116, 252),   S(-50, 144),    S(-18, 81),     //
    S(-2, 151),     S(79, 158),     S(28, 223),     S(12, 229),     S(-26, 212),    S(-71, 223),    S(11, 113),     S(-24, 78),     //
    S(47, 77),      S(36, 164),     S(8, 187),      S(11, 237),     S(-16, 224),    S(-18, 154),    S(2, 82),       S(0, 36),       //
    S(17, 109),     S(54, 64),      S(28, 132),     S(0, 177),      S(-20, 170),    S(-12, 124),    S(-9, 57),      S(-4, 8),       //
    S(31, -71),     S(51, -16),     S(52, 51),      S(-1, 83),      S(15, 30),      S(17, 37),      S(22, -27),     S(0, -11),      //
    S(19, -175),    S(51, -281),    S(37, -133),    S(54, -60),     S(24, -38),     S(45, -120),    S(21, -52),     S(10, -59),     //
    S(-31, -93),    S(37, -350),    S(34, -346),    S(66, -256),    S(62, -173),    S(70, -216),    S(48, -165),    S(-7, -87),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-100, -430),  S(129, -62),    S(-81, 11),     S(-153, 45),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(233, -144),   S(5, 131),      S(6, 130),      S(154, 70),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-46, 42),     S(75, 127),     S(87, 107),     S(88, 64),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-278, 72),    S(28, 91),      S(28, 92),      S(-35, 75),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-232, 24),    S(-48, 65),     S(-24, 66),     S(-107, 106),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-151, -3),    S(44, 9),       S(-40, 59),     S(-85, 87),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(74, -94),     S(123, -31),    S(37, 14),      S(-39, 57),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-50, -131),   S(87, -116),    S(-1, -82),     S(-23, -75),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on
}
