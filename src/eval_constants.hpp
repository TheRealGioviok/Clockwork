#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(215, 284);
inline const PParam KNIGHT_MAT = S(821, 669);
inline const PParam BISHOP_MAT = S(888, 731);
inline const PParam ROOK_MAT   = S(1330, 1288);
inline const PParam QUEEN_MAT  = S(2182, 2126);
inline const PParam TEMPO_VAL  = S(43, 11);

inline const PParam BISHOP_PAIR_VAL  = S(71, 142);
inline const PParam DOUBLED_PAWN_VAL = S(-36, -72);

inline const PParam POTENTIAL_CHECKER_VAL = S(-56, -32);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(6, 20), S(54, 25), S(77, 55), S(178, 100), S(393, 298), S(411, 462)
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(58, 35), S(55, 13), S(50, 36), S(117, 89), S(324, -5)
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-19, 10), S(-36, 29), S(-26, 71), S(47, 117), S(100, 180), S(175, 257)
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(22, 13), S(19, 36), S(0, 67), S(6, 107), S(93, 158), S(142, 225)
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-170, -243), S(-113, -109), S(-61, -13), S(-13, 15), S(21, 49), S(43, 90), S(68, 93), S(89, 95),
    S(135, 20)
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-179, -191), S(-134, -120), S(-83, -51), S(-67, -5), S(-33, 26), S(-25, 49), S(-3, 57), S(8, 67),
    S(16, 78), S(27, 67), S(41, 58), S(89, 16), S(145, -12), S(201, -40)
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-300, -333), S(-111, -115), S(-80, -12), S(-66, -8), S(-48, 25), S(-38, 37), S(-25, 53), S(2, 46),
    S(26, 52), S(44, 64), S(69, 60), S(90, 59), S(127, 46), S(125, 42), S(178, -14)
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-608, -633), S(-495, -542), S(-156, -430), S(-45, -87), S(-26, -37), S(-4, 60), S(-40, 242), S(-15, 224),
    S(-4, 250), S(8, 271), S(4, 304), S(19, 304), S(46, 274), S(56, 262), S(71, 236), S(86, 214),
    S(106, 188), S(127, 137), S(161, 88), S(182, 34), S(217, -20), S(213, -81), S(187, -85), S(165, -168),
    S(92, -179), S(21, -213), S(-113, -272), S(-263, -354)
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(392, 305), S(51, -101), S(-29, -50), S(-34, -10), S(-68, 1), S(-95, -8), S(-81, -4), S(-87, -17),
    S(-50, -115)
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(79, -27), S(137, -58)
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(40, -19), S(129, -24)
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(61, -44), S(96, -85), S(113, -65), S(54, -86)
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-105, 212), S(-133, 247), S(-72, 172), S(73, 89), S(131, 68)
};

inline const PParam PAWN_THREAT_KNIGHT = S(200, 56);
inline const PParam PAWN_THREAT_BISHOP = S(151, 90);
inline const PParam PAWN_THREAT_ROOK   = S(188, 34);
inline const PParam PAWN_THREAT_QUEEN  = S(153, -116);

inline const PParam KNIGHT_THREAT_BISHOP = S(85, 49);
inline const PParam KNIGHT_THREAT_ROOK   = S(199, -21);
inline const PParam KNIGHT_THREAT_QUEEN  = S(141, -137);

inline const PParam BISHOP_THREAT_KNIGHT = S(86, 22);
inline const PParam BISHOP_THREAT_ROOK   = S(180, 37);
inline const PParam BISHOP_THREAT_QUEEN  = S(188, -95);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-87, 172), S(28, 177), S(80, 167), S(173, 4), S(138, 15), S(179, 91), S(24, 129), S(121, 107),
    S(60, 51), S(222, 52), S(142, 10), S(120, -48), S(66, -65), S(27, 8), S(-4, 58), S(-16, 59),
    S(-3, 10), S(-7, 12), S(10, -32), S(-4, -48), S(-14, -49), S(-51, -41), S(-72, 16), S(-76, 34),
    S(-9, -51), S(1, -17), S(-28, -58), S(-28, -56), S(-41, -69), S(-67, -47), S(-103, 21), S(-109, 0),
    S(-13, -69), S(30, -80), S(-17, -46), S(-70, -33), S(-63, -46), S(-104, -36), S(-112, -11), S(-126, -8),
    S(-12, -62), S(116, -74), S(47, -37), S(-37, -11), S(-50, -73), S(-73, -36), S(-87, 6), S(-106, -1)
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-319, -117), S(-41, -80), S(-196, 215), S(-33, 82), S(-149, 46), S(-136, 73), S(-92, -45), S(-406, 115),
    S(51, -7), S(42, 47), S(159, -39), S(94, -6), S(82, 20), S(28, -17), S(-28, 26), S(6, -5),
    S(10, 30), S(18, 63), S(214, 5), S(99, 37), S(129, 17), S(21, 52), S(18, 22), S(-51, -9),
    S(98, 31), S(57, 34), S(96, 42), S(88, 51), S(107, 13), S(78, 28), S(11, 2), S(2, 44),
    S(65, 23), S(129, -27), S(90, 10), S(64, -2), S(65, 18), S(54, 37), S(-7, 41), S(4, -53),
    S(-10, -34), S(22, -51), S(18, -54), S(31, -1), S(49, 10), S(-30, -25), S(-26, -43), S(-55, -44),
    S(30, 62), S(38, -45), S(-13, -54), S(-21, -8), S(-25, -29), S(-62, -34), S(-28, -39), S(-121, -79),
    S(-69, 5), S(-12, -22), S(20, -83), S(20, -33), S(38, -42), S(-21, -144), S(-70, -9), S(-211, -29)
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-105, 45), S(12, -19), S(-331, 44), S(-210, 81), S(-226, 96), S(-279, 78), S(-53, 76), S(-26, 56),
    S(-22, -28), S(-65, 57), S(-2, 37), S(29, -12), S(-18, 14), S(5, 22), S(-5, -1), S(-47, 18),
    S(-15, 45), S(60, 19), S(237, 3), S(98, 1), S(35, 31), S(13, 51), S(101, -2), S(-10, 53),
    S(-12, -1), S(-5, 44), S(90, 11), S(96, 23), S(104, 25), S(33, 39), S(19, 17), S(-63, 38),
    S(16, -46), S(24, 6), S(43, -5), S(50, 25), S(40, 50), S(12, 33), S(1, -13), S(-20, -58),
    S(36, -37), S(93, -49), S(82, -46), S(11, 16), S(11, 25), S(-14, 37), S(64, -43), S(7, -61),
    S(25, -109), S(91, -71), S(38, -73), S(13, -21), S(-1, -33), S(35, -63), S(-21, -22), S(24, -87),
    S(15, -42), S(-35, -15), S(-11, -3), S(-16, -76), S(-25, -67), S(4, -25), S(20, -100), S(-73, -1)
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(32, 12), S(130, 25), S(70, 45), S(54, 39), S(56, 28), S(43, 23), S(43, 22), S(76, 8),
    S(66, 37), S(119, 31), S(192, 11), S(129, 48), S(135, 33), S(48, 61), S(47, 47), S(46, 50),
    S(6, 47), S(192, 12), S(194, 4), S(196, -15), S(128, 11), S(72, 39), S(99, 19), S(-22, 51),
    S(5, 35), S(29, 12), S(81, 11), S(120, -43), S(91, -16), S(31, 35), S(10, 41), S(-79, 58),
    S(-131, -1), S(11, -36), S(-12, -12), S(-14, -10), S(-27, -4), S(-56, 51), S(-112, 45), S(-132, 40),
    S(-139, -15), S(-1, -119), S(-23, -65), S(-59, -39), S(-37, -53), S(-107, 11), S(-124, -2), S(-136, -5),
    S(-182, 8), S(-75, -106), S(-45, -81), S(-44, -64), S(-58, -52), S(-59, -45), S(-100, -58), S(-141, -28),
    S(-144, 6), S(-122, 4), S(-68, -34), S(-37, -49), S(-49, -30), S(-57, -32), S(-71, -41), S(-101, -12)
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(106, -110), S(91, -144), S(109, -89), S(63, -55), S(43, -30), S(36, -33), S(80, -94), S(19, -100),
    S(78, 2), S(13, 19), S(114, -54), S(-6, 31), S(-27, 55), S(-27, 58), S(-65, 82), S(1, -15),
    S(10, -5), S(115, -11), S(103, 19), S(55, 50), S(19, 48), S(-41, 132), S(11, 49), S(-25, 37),
    S(52, -19), S(71, -4), S(57, 6), S(54, 67), S(20, 97), S(9, 60), S(-17, 77), S(-39, 74),
    S(13, 17), S(59, -15), S(34, 60), S(-20, 148), S(-49, 186), S(-35, 136), S(-36, 45), S(-62, 70),
    S(22, -103), S(26, -20), S(23, 50), S(-80, 174), S(-44, 120), S(-47, 128), S(-16, 11), S(-30, -1),
    S(-32, -154), S(-13, -251), S(-13, -94), S(-10, 46), S(-53, 79), S(-15, -23), S(-14, 1), S(-71, 40),
    S(-133, -69), S(-170, -308), S(-81, -220), S(-41, -120), S(-23, 3), S(-5, -98), S(-42, -69), S(-94, 43)
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-149, -360), S(-15, -67), S(-23, 7), S(-106, 63), S(2, -18), S(2, -18), S(2, -18), S(2, -18),
    S(26, -53), S(7, 83), S(-38, 118), S(172, 81), S(2, -18), S(2, -18), S(2, -18), S(2, -18),
    S(-128, 42), S(118, 93), S(92, 109), S(127, 65), S(2, -18), S(2, -18), S(2, -18), S(2, -18),
    S(-160, 45), S(39, 93), S(180, 87), S(113, 78), S(2, -18), S(2, -18), S(2, -18), S(2, -18),
    S(-195, 5), S(-29, 79), S(71, 82), S(42, 110), S(2, -18), S(2, -18), S(2, -18), S(2, -18),
    S(-160, -13), S(58, 7), S(-14, 66), S(-29, 101), S(2, -18), S(2, -18), S(2, -18), S(2, -18),
    S(50, -85), S(104, -29), S(10, 35), S(-93, 87), S(2, -18), S(2, -18), S(2, -18), S(2, -18),
    S(-63, -129), S(46, -96), S(-70, -65), S(-42, -77), S(2, -18), S(2, -18), S(2, -18), S(2, -18)
};
// clang-format on

}
