#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(297, 410);
inline const PParam KNIGHT_MAT = S(1073, 970);
inline const PParam BISHOP_MAT = S(1047, 1036);
inline const PParam ROOK_MAT   = S(1577, 1713);
inline const PParam QUEEN_MAT  = S(3579, 3064);
inline const PParam TEMPO_VAL  = S(58, 16);

inline const PParam BISHOP_PAIR_VAL  = S(81, 174);
inline const PParam DOUBLED_PAWN_VAL = S(-47, -80);

inline const PParam POTENTIAL_CHECKER_VAL = S(-73, -3);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(14, 22), S(55, 35), S(81, 69), S(199, 141), S(482, 294), S(1230, 1028),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(57, 46), S(56, 27), S(61, 53), S(138, 121), S(643, -88),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-50, 2), S(-38, 18), S(-8, 90), S(56, 169), S(90, 302), S(201, 87),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(47, -44), S(29, -2), S(12, 28), S(20, 71), S(91, 146), S(184, 264),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(14, -44), S(-8, 2), S(-31, -21), S(-35, -48), S(-47, -95), S(-222, -141),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(1, 39), S(-37, 42), S(-27, -12), S(-14, -42), S(-8, -38), S(21, -45), S(1, -57),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-170, -87), S(32, -49), S(-8, -6), S(9, 24), S(15, 49), S(38, 46), S(-11, 69),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-203, -265), S(-98, -97), S(-41, -47), S(2, -15), S(49, -1), S(77, 38), S(113, 30), S(149, 21), S(203, -54),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-154, -386), S(-80, -191), S(2, -120), S(33, -74), S(62, -37), S(83, -15), S(99, -4), S(114, 0), S(125, 11), S(133, 0), S(155, -14), S(215, -69), S(240, -84), S(330, -144),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-205, -357), S(-112, -130), S(-58, -56), S(-22, -39), S(6, -13), S(28, 3), S(50, 11), S(79, 11), S(105, 19), S(132, 29), S(159, 28), S(175, 33), S(211, 26), S(230, 10), S(349, -104),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-295, 69), S(-287, -792), S(-194, -654), S(-150, -442), S(-123, -262), S(-89, -176), S(-90, -38), S(-64, -42), S(-54, -1), S(-44, 21), S(-35, 43), S(-31, 62), S(-14, 61), S(-4, 62), S(0, 68), S(18, 53), S(11, 65), S(23, 47), S(46, 11), S(73, -29), S(100, -64), S(135, -133), S(188, -168), S(348, -340), S(337, -359), S(755, -593), S(554, -536), S(1268, -894),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(420, 584), S(138, 381), S(42, 463), S(30, 498), S(7, 492), S(-30, 492), S(-7, 488), S(-13, 468), S(-8, 395),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(83, -32), S(154, -79),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(37, -3), S(143, -44),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(66, -44), S(67, -67), S(109, -69), S(148, -134),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-41, 33), S(-59, 43), S(-2, -6), S(144, -85), S(338, -227),
};

inline const PParam PAWN_THREAT_KNIGHT = S(226, 73);
inline const PParam PAWN_THREAT_BISHOP = S(200, 104);
inline const PParam PAWN_THREAT_ROOK   = S(188, 56);
inline const PParam PAWN_THREAT_QUEEN  = S(161, -44);

inline const PParam KNIGHT_THREAT_BISHOP = S(100, 75);
inline const PParam KNIGHT_THREAT_ROOK   = S(235, 3);
inline const PParam KNIGHT_THREAT_QUEEN  = S(149, -74);

inline const PParam BISHOP_THREAT_KNIGHT = S(107, 27);
inline const PParam BISHOP_THREAT_ROOK   = S(235, 54);
inline const PParam BISHOP_THREAT_QUEEN  = S(186, 59);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(198, 402),    S(209, 453),    S(243, 422),    S(309, 289),    S(240, 295),    S(242, 359),    S(155, 386),    S(195, 358),    //
    S(32, -30),     S(160, -3),     S(132, -68),    S(137, -127),   S(92, -140),    S(40, -97),     S(6, -45),      S(-58, -44),    //
    S(-25, -75),    S(1, -69),      S(13, -116),    S(-3, -130),    S(-16, -136),   S(-55, -131),   S(-94, -79),    S(-127, -57),   //
    S(-33, -132),   S(-12, -101),   S(-17, -138),   S(-31, -136),   S(-52, -147),   S(-80, -130),   S(-134, -76),   S(-154, -90),   //
    S(-48, -162),   S(20, -159),    S(-31, -116),   S(-64, -110),   S(-79, -120),   S(-122, -122),  S(-135, -105),  S(-169, -110),  //
    S(-39, -159),   S(94, -154),    S(47, -121),    S(-12, -101),   S(-48, -114),   S(-82, -115),   S(-107, -88),   S(-145, -102),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-403, -94),   S(-343, 46),    S(-437, 253),   S(-152, 91),    S(-301, 117),   S(-394, 151),   S(-581, 89),    S(-526, 15),    //
    S(-5, -3),      S(77, 8),       S(168, -54),    S(109, 16),     S(121, 15),     S(42, -1),      S(-1, 5),       S(-37, -29),    //
    S(56, -20),     S(109, 28),     S(197, 35),     S(147, 52),     S(155, 40),     S(63, 52),      S(59, 19),      S(-40, 22),     //
    S(96, 18),      S(80, 55),      S(114, 67),     S(109, 89),     S(114, 74),     S(71, 81),      S(32, 25),      S(26, 14),      //
    S(96, 1),       S(112, 5),      S(103, 42),     S(89, 48),      S(79, 62),      S(68, 60),      S(38, 22),      S(32, -47),     //
    S(7, -20),      S(24, -30),     S(18, -12),     S(29, 38),      S(39, 36),      S(-20, 11),     S(-8, -34),     S(-46, -39),    //
    S(3, -3),       S(34, -28),     S(13, -25),     S(14, -7),      S(2, -16),      S(-26, -32),    S(-4, -49),     S(-76, -127),   //
    S(-37, -62),    S(7, -34),      S(20, -44),     S(30, -34),     S(26, -27),     S(-18, -62),    S(-39, -44),    S(-89, -85),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-140, 89),    S(-172, 67),    S(-419, 110),   S(-334, 145),   S(-276, 141),   S(-452, 173),   S(-135, 120),   S(-84, 91),     //
    S(35, -20),     S(24, 51),      S(23, 44),      S(20, 30),      S(11, 40),      S(21, 42),      S(0, 43),       S(-39, 37),     //
    S(47, 46),      S(115, 39),     S(228, 31),     S(137, 32),     S(120, 31),     S(91, 53),      S(136, 25),     S(17, 45),      //
    S(66, -7),      S(68, 50),      S(130, 41),     S(141, 62),     S(147, 63),     S(75, 64),      S(49, 48),      S(-4, 32),      //
    S(65, -31),     S(90, 7),       S(93, 32),      S(106, 51),     S(94, 73),      S(47, 63),      S(29, 17),      S(19, -35),     //
    S(84, -37),     S(128, -10),    S(127, -4),     S(67, 39),      S(54, 47),      S(42, 45),      S(83, 1),       S(49, -42),     //
    S(72, -72),     S(120, -46),    S(96, -39),     S(67, -5),      S(55, -28),     S(57, -32),     S(28, -21),     S(58, -82),     //
    S(72, -49),     S(62, -4),      S(71, -10),     S(86, -43),     S(94, -49),     S(81, -17),     S(77, -37),     S(50, -33),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(144, 46),     S(207, 47),     S(114, 84),     S(132, 74),     S(149, 55),     S(94, 71),      S(110, 75),     S(127, 74),     //
    S(75, 96),      S(158, 73),     S(219, 54),     S(164, 90),     S(173, 80),     S(123, 89),     S(77, 103),     S(55, 115),     //
    S(59, 71),      S(200, 38),     S(242, 22),     S(262, 12),     S(217, 24),     S(133, 67),     S(148, 54),     S(25, 109),     //
    S(12, 65),      S(84, 55),      S(123, 49),     S(169, 5),      S(135, 30),     S(63, 85),      S(37, 81),      S(-36, 93),     //
    S(-58, 22),     S(22, 30),      S(18, 40),      S(19, 38),      S(16, 33),      S(-18, 81),     S(-47, 77),     S(-67, 64),     //
    S(-88, 2),      S(-13, -23),    S(-16, 1),      S(-33, 9),      S(-11, -11),    S(-63, 38),     S(-69, 25),     S(-87, 18),     //
    S(-131, 8),     S(-41, -41),    S(-18, -30),    S(-8, -28),     S(-13, -25),    S(-33, -12),    S(-52, -28),    S(-92, -15),    //
    S(-110, 12),    S(-71, 17),     S(-26, -14),    S(5, -31),      S(-3, -17),     S(-15, -11),    S(-37, -16),    S(-67, 0),      //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(53, 82),      S(72, 55),      S(77, 63),      S(-49, 204),    S(35, 108),     S(-38, 152),    S(41, 49),      S(-3, 69),      //
    S(36, 124),     S(-37, 213),    S(-40, 271),    S(-112, 296),   S(-94, 244),    S(-118, 254),   S(-52, 144),    S(-22, 85),     //
    S(-5, 155),     S(78, 158),     S(34, 226),     S(17, 226),     S(-20, 209),    S(-62, 216),    S(9, 116),      S(-26, 79),     //
    S(45, 80),      S(36, 166),     S(11, 186),     S(15, 238),     S(-11, 222),    S(-14, 152),    S(2, 85),       S(0, 38),       //
    S(17, 103),     S(55, 62),      S(29, 130),     S(2, 178),      S(-15, 168),    S(-13, 126),    S(-9, 57),      S(-5, 7),       //
    S(31, -73),     S(50, -17),     S(39, 60),      S(-7, 89),      S(11, 34),      S(9, 45),       S(21, -27),     S(-1, -11),     //
    S(18, -179),    S(51, -281),    S(35, -135),    S(51, -60),     S(22, -39),     S(43, -117),    S(19, -49),     S(9, -60),      //
    S(-31, -92),    S(37, -357),    S(33, -348),    S(65, -259),    S(60, -171),    S(67, -214),    S(47, -166),    S(-7, -82),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(32, -515),    S(130, -68),    S(-155, 44),    S(-299, 97),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(329, -194),   S(-14, 145),    S(-35, 153),    S(149, 71),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-54, 48),     S(32, 145),     S(100, 107),    S(184, 36),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-349, 108),   S(-16, 111),    S(19, 99),      S(-22, 77),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-269, 43),    S(-74, 76),     S(-59, 81),     S(-131, 121),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-161, 2),     S(42, 8),       S(-55, 65),     S(-103, 97),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(74, -97),     S(124, -34),    S(36, 12),      S(-42, 59),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-48, -136),   S(86, -117),    S(-2, -84),     S(-23, -78),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
