#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(318, 308);
inline const PScore KNIGHT_MAT = S(1299, 885);
inline const PScore BISHOP_MAT = S(1408, 934);
inline const PScore ROOK_MAT   = S(1954, 1646);
inline const PScore QUEEN_MAT  = S(4226, 2723);
inline const PScore TEMPO_VAL  = S(58, 11);

inline const PScore BISHOP_PAIR_VAL  = S(124, 163);
inline const PScore DOUBLED_PAWN_VAL = S(-54, -68);

inline const PScore POTENTIAL_CHECKER_VAL = S(-76, -3);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(23, 27), S(55, 43), S(77, 84), S(175, 194), S(633, 389), S(2054, 719)
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(67, 42), S(59, 34), S(68, 56), S(176, 100), S(718, -57)
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(-8, 26), S(-22, 51), S(-18, 109), S(32, 169), S(118, 296), S(231, 329)
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-243, -190), S(-134, -92), S(-76, -1), S(-23, 29), S(21, 51), S(51, 83), S(95, 73), S(129, 59),
    S(184, -14)
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-255, -188), S(-171, -74), S(-101, -54), S(-75, -1), S(-34, 26), S(-9, 46), S(8, 61), S(21, 75),
    S(26, 83), S(47, 62), S(70, 32), S(98, 3), S(166, -22), S(209, -42)
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-285, -302), S(-223, -70), S(-145, -39), S(-108, -23), S(-70, 11), S(-48, 35), S(-21, 46), S(1, 49),
    S(33, 52), S(53, 70), S(90, 67), S(115, 67), S(149, 57), S(161, 43), S(299, -66)
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-1221, -870), S(-355, -897), S(-197, -415), S(-166, -237), S(-172, -15), S(-139, 86), S(-140, 175), S(-118, 183),
    S(-109, 241), S(-100, 266), S(-84, 281), S(-74, 283), S(-64, 290), S(-53, 293), S(-44, 290), S(-42, 299),
    S(-41, 289), S(-13, 245), S(-15, 242), S(33, 185), S(54, 156), S(108, 63), S(222, -38), S(304, -113),
    S(475, -257), S(658, -317), S(466, -333), S(820, -386)
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(-29, 101), S(140, -59), S(47, -7), S(8, 37), S(-19, 33), S(-45, 7), S(-26, 12), S(-42, -16),
    S(-37, -107)
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(72, -29), S(142, -78)
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(29, -3), S(124, -45)
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(75, -49), S(82, -80), S(115, -71), S(138, -132)
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-53, 57), S(-83, 77), S(-28, 20), S(113, -76), S(288, -205)
};

inline const PScore PAWN_THREAT_KNIGHT = S(235, 50);
inline const PScore PAWN_THREAT_BISHOP = S(220, 114);
inline const PScore PAWN_THREAT_ROOK = S(228, 41);
inline const PScore PAWN_THREAT_QUEEN = S(185, -75);

inline const PScore KNIGHT_THREAT_BISHOP = S(118, 58);
inline const PScore KNIGHT_THREAT_ROOK = S(246, -17);
inline const PScore KNIGHT_THREAT_QUEEN = S(149, -88);

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(39, 217), S(11, 271), S(51, 209), S(111, 96), S(100, 53), S(111, 78), S(128, 139), S(111, 135),
    S(56, 47), S(123, 84), S(131, 6), S(145, -94), S(81, -113), S(44, -52), S(35, 13), S(-35, 46),
    S(-34, 21), S(6, 20), S(28, -29), S(20, -55), S(8, -63), S(-38, -53), S(-51, 6), S(-97, 24),
    S(-42, -49), S(-5, -25), S(14, -63), S(-7, -50), S(-21, -69), S(-53, -48), S(-110, 5), S(-133, -13),
    S(-56, -81), S(24, -90), S(-14, -51), S(-43, -32), S(-58, -38), S(-96, -36), S(-114, -25), S(-136, -35),
    S(-54, -78), S(92, -76), S(55, -50), S(-11, -13), S(-44, -37), S(-69, -22), S(-71, -10), S(-136, -17)
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-410, -141), S(-204, 34), S(-623, 327), S(123, -26), S(-46, 19), S(-443, 115), S(-128, -68), S(-510, -1),
    S(-16, -26), S(46, 23), S(113, -31), S(97, -17), S(187, -24), S(44, -17), S(-22, 2), S(-18, -22),
    S(69, 1), S(56, 42), S(173, 60), S(144, 62), S(121, 59), S(100, 43), S(61, 7), S(-57, -22),
    S(128, -22), S(81, 27), S(120, 73), S(91, 99), S(114, 83), S(83, 58), S(27, 25), S(63, -2),
    S(111, -19), S(113, -13), S(103, 53), S(69, 71), S(75, 62), S(56, 67), S(29, 12), S(35, -18),
    S(-3, -48), S(43, -29), S(13, -13), S(45, 34), S(36, 47), S(-24, 13), S(8, -38), S(-74, -9),
    S(5, -35), S(25, -33), S(14, -41), S(15, -2), S(-15, -9), S(-8, -56), S(-22, -74), S(-55, -143),
    S(-41, -44), S(-5, -16), S(43, -80), S(53, -60), S(37, -71), S(-56, -101), S(-44, -17), S(-135, -148)
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-81, -25), S(-160, 45), S(-551, 95), S(-69, 38), S(-287, 99), S(-318, 115), S(-206, 108), S(-126, 55),
    S(-38, -13), S(3, 9), S(63, -25), S(41, -20), S(9, -6), S(-31, 28), S(17, -4), S(-101, 42),
    S(43, -18), S(112, 8), S(219, 14), S(194, -24), S(128, -19), S(90, 24), S(66, 11), S(2, -13),
    S(-17, -12), S(44, 39), S(134, 22), S(121, 61), S(142, 44), S(64, 29), S(41, 13), S(-53, 8),
    S(39, -64), S(38, 15), S(57, 13), S(114, 31), S(81, 58), S(26, 49), S(4, 8), S(30, -65),
    S(18, -41), S(64, -25), S(82, -13), S(16, 36), S(27, 36), S(14, 31), S(41, -12), S(-19, -39),
    S(-4, -100), S(68, -55), S(15, -33), S(-5, -10), S(-31, -9), S(4, -36), S(-2, -37), S(18, -100),
    S(9, -62), S(-76, 3), S(-23, 3), S(-50, -49), S(-31, -85), S(-4, -10), S(15, -103), S(-33, -43)
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(99, 26), S(117, 38), S(158, 25), S(103, 39), S(96, 21), S(74, 22), S(104, 23), S(73, 48),
    S(54, 73), S(121, 44), S(208, 23), S(140, 43), S(168, 24), S(116, 28), S(46, 57), S(30, 70),
    S(32, 49), S(175, 13), S(222, -9), S(219, -16), S(191, -14), S(103, 21), S(122, 11), S(-7, 61),
    S(-42, 39), S(34, 40), S(108, -5), S(103, -17), S(92, -22), S(55, 21), S(14, 37), S(-45, 44),
    S(-138, 11), S(-61, 8), S(-20, 1), S(-7, -23), S(-30, -2), S(-41, 31), S(-114, 43), S(-127, 38),
    S(-169, -21), S(-67, -65), S(-80, -32), S(-73, -31), S(-44, -57), S(-118, 2), S(-92, -38), S(-162, -6),
    S(-250, -5), S(-125, -51), S(-69, -67), S(-56, -68), S(-78, -49), S(-85, -35), S(-125, -56), S(-152, -46),
    S(-181, -24), S(-181, 8), S(-85, -49), S(-28, -83), S(-57, -52), S(-60, -54), S(-82, -54), S(-127, -34)
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(54, 33), S(50, 59), S(100, 23), S(14, 94), S(37, 76), S(18, 42), S(-2, 75), S(-74, 73),
    S(56, 57), S(-54, 195), S(-10, 222), S(-97, 215), S(-102, 194), S(-100, 195), S(-74, 130), S(-19, 33),
    S(-45, 134), S(66, 138), S(-6, 243), S(22, 171), S(-19, 160), S(-56, 165), S(41, 26), S(-44, 13),
    S(52, 20), S(-4, 152), S(37, 131), S(5, 175), S(-31, 204), S(-20, 107), S(-8, 34), S(4, -48),
    S(-11, 45), S(27, 51), S(14, 78), S(-15, 140), S(-4, 117), S(-18, 83), S(-51, 55), S(7, -102),
    S(11, -120), S(48, -84), S(46, -29), S(2, -3), S(15, -11), S(-1, 4), S(17, -68), S(-19, -44),
    S(-12, -248), S(51, -395), S(34, -214), S(43, -135), S(19, -102), S(56, -174), S(29, -132), S(40, -184),
    S(-82, -168), S(-95, -412), S(-116, -259), S(-3, -270), S(52, -222), S(54, -290), S(48, -244), S(20, -230)
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(-162, -482), S(157, -80), S(129, -110), S(30, -14), S(-21, -4), S(-21, -4), S(-21, -4), S(-21, -4),
    S(334, -216), S(85, 102), S(135, 109), S(178, 75), S(-21, -4), S(-21, -4), S(-21, -4), S(-21, -4),
    S(114, -31), S(202, 133), S(132, 122), S(171, 86), S(-21, -4), S(-21, -4), S(-21, -4), S(-21, -4),
    S(-218, 29), S(69, 98), S(97, 111), S(66, 107), S(-21, -4), S(-21, -4), S(-21, -4), S(-21, -4),
    S(-280, 25), S(-21, 79), S(-21, 100), S(-108, 153), S(-21, -4), S(-21, -4), S(-21, -4), S(-21, -4),
    S(-166, -23), S(32, 21), S(-78, 92), S(-119, 132), S(-21, -4), S(-21, -4), S(-21, -4), S(-21, -4),
    S(68, -114), S(99, -21), S(11, 39), S(-104, 89), S(-21, -4), S(-21, -4), S(-21, -4), S(-21, -4),
    S(-44, -195), S(66, -133), S(-77, -77), S(-74, -84), S(-21, -4), S(-21, -4), S(-21, -4), S(-21, -4)
};
// clang-format on

}
