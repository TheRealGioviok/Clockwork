#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(289, 454);
inline const PScore KNIGHT_MAT = S(1013, 979);
inline const PScore BISHOP_MAT = S(1040, 1069);
inline const PScore ROOK_MAT   = S(1543, 1797);
inline const PScore QUEEN_MAT  = S(3405, 3223);
inline const PScore TEMPO_VAL  = S(27, 17);

inline const PScore BISHOP_PAIR_VAL  = S(80, 191);
inline const PScore DOUBLED_PAWN_VAL = S(-36, -66);

inline const PScore POTENTIAL_CHECKER_VAL = S(-72, -2);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(-8, 19), S(46, 20), S(73, 53), S(192, 124), S(596, 488), S(1712, 1483),
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(40, 40), S(39, 9), S(52, 14), S(119, 78), S(702, -204),
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(17, 8), S(-7, 37), S(-13, 87), S(48, 139), S(72, 245), S(-5, 73),
};
inline const std::array<PScore, 6> ISOLATED_PAWN = {
    S(-20, -8), S(-17, -8), S(-26, -14), S(1, -25), S(30, -39), S(137, -104),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-142, -243), S(-72, -113), S(-13, -42), S(10, -3), S(41, 27), S(64, 58), S(91, 57), S(115, 43), S(155, -28),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-113, -283), S(-62, -179), S(-9, -119), S(7, -65), S(34, -36), S(44, -13), S(68, -7), S(70, 9), S(73, 19), S(85, 7), S(106, -3), S(143, -50), S(239, -80), S(200, -66),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-124, -288), S(-58, -117), S(-24, -44), S(-8, -43), S(1, -17), S(6, 4), S(32, 11), S(48, 12), S(80, 21), S(106, 25), S(116, 28), S(142, 31), S(166, 17), S(161, 15), S(282, -77),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-447, -46), S(-247, -191), S(-189, -410), S(-153, -244), S(-101, -257), S(-99, -134), S(-115, -5), S(-92, -51), S(-81, -10), S(-82, 32), S(-67, 44), S(-61, 65), S(-38, 56), S(-33, 53), S(-17, 58), S(-6, 48), S(-13, 58), S(11, 18), S(26, 20), S(60, -52), S(110, -84), S(120, -145), S(239, -224), S(430, -402), S(260, -305), S(1068, -763), S(661, -568), S(1365, -945),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(199, 736), S(92, 438), S(23, 485), S(17, 513), S(-3, 506), S(-26, 491), S(-2, 494), S(10, 463), S(83, 338),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -36), S(152, -88),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(21, 2), S(131, -40),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(71, -67), S(88, -79), S(140, -78), S(149, -125),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-52, 34), S(-75, 51), S(10, -29), S(170, -120), S(453, -294),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-145, 504),   S(1, 506),      S(159, 436),    S(332, 208),    S(251, 240),    S(285, 320),    S(168, 363),    S(181, 379),    //
    S(1, 0),        S(169, 18),     S(110, -60),    S(139, -166),   S(61, -165),    S(9, -86),      S(-53, -4),     S(-73, -3),     //
    S(-54, -62),    S(-39, -66),    S(-32, -104),   S(-35, -141),   S(-50, -138),   S(-98, -134),   S(-124, -66),   S(-141, -41),   //
    S(-36, -143),   S(-25, -112),   S(-47, -149),   S(-47, -153),   S(-64, -162),   S(-99, -138),   S(-151, -73),   S(-158, -87),   //
    S(-33, -180),   S(20, -181),    S(-27, -137),   S(-90, -123),   S(-77, -147),   S(-134, -141),  S(-149, -118),  S(-175, -112),  //
    S(-31, -183),   S(113, -189),   S(42, -144),    S(-59, -102),   S(-82, -154),   S(-100, -139),  S(-130, -99),   S(-157, -107),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-495, -120),  S(-126, -44),   S(-516, 308),   S(-1, 49),      S(-348, 160),   S(-335, 171),   S(-477, 19),    S(-634, 94),    //
    S(69, -7),      S(117, 55),     S(305, -88),    S(72, 78),      S(154, 31),     S(116, -6),     S(-13, 25),     S(29, -33),     //
    S(41, 29),      S(48, 114),     S(254, 62),     S(151, 101),    S(212, 50),     S(73, 74),      S(88, 21),      S(-57, 9),      //
    S(107, 55),     S(40, 105),     S(103, 109),    S(79, 128),     S(95, 88),      S(87, 94),      S(8, 31),       S(10, 49),      //
    S(69, 43),      S(103, 42),     S(84, 89),      S(51, 74),      S(55, 88),      S(60, 91),      S(14, 29),      S(13, -57),     //
    S(8, -9),       S(36, -25),     S(43, -23),     S(47, 55),      S(63, 53),      S(-16, 0),      S(-13, -10),    S(-79, -9),     //
    S(-3, 92),      S(33, -24),     S(5, -19),      S(12, 10),      S(-11, 2),      S(-25, -31),    S(-25, -59),    S(-144, -102),  //
    S(-67, -1),     S(-31, -2),     S(29, -86),     S(14, -14),     S(43, -29),     S(-2, -140),    S(-83, -37),    S(-176, -59),   //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-85, 100),    S(-49, 18),     S(-566, 126),   S(-251, 109),   S(-315, 132),   S(-362, 125),   S(-4, 67),      S(-54, 59),     //
    S(32, -59),     S(41, 58),      S(36, 52),      S(90, -7),      S(61, 18),      S(25, 47),      S(23, 30),      S(-61, 48),     //
    S(13, 70),      S(73, 69),      S(290, 27),     S(151, 26),     S(103, 37),     S(42, 80),      S(141, 28),     S(-7, 89),      //
    S(15, 23),      S(58, 56),      S(143, 34),     S(147, 45),     S(150, 54),     S(65, 72),      S(70, 36),      S(-33, 52),     //
    S(27, -24),     S(39, 38),      S(48, 41),      S(104, 47),     S(106, 80),     S(24, 74),      S(41, 4),       S(30, -63),     //
    S(64, -28),     S(93, 6),       S(104, 4),      S(28, 55),      S(24, 63),      S(15, 69),      S(70, 2),       S(40, -55),     //
    S(52, -53),     S(96, -22),     S(59, -22),     S(25, 18),      S(14, -11),     S(55, -36),     S(-12, 12),     S(59, -120),    //
    S(40, -19),     S(11, -1),      S(-9, 20),      S(-2, -34),     S(-12, -35),    S(-1, -2),      S(24, -75),     S(-61, 5),      //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(109, 29),     S(165, 40),     S(108, 71),     S(71, 91),      S(105, 55),     S(58, 55),      S(72, 58),      S(82, 58),      //
    S(123, 70),     S(174, 62),     S(238, 43),     S(163, 90),     S(151, 92),     S(71, 106),     S(35, 103),     S(58, 91),      //
    S(43, 69),      S(294, 11),     S(243, 21),     S(269, -5),     S(166, 39),     S(79, 69),      S(135, 36),     S(-13, 87),     //
    S(8, 49),       S(52, 50),      S(76, 47),      S(120, -10),    S(91, 20),      S(28, 74),      S(6, 69),       S(-72, 63),     //
    S(-124, 13),    S(-9, 11),      S(-19, 24),     S(-22, 29),     S(-17, 15),     S(-55, 74),     S(-104, 76),    S(-124, 52),    //
    S(-116, 3),     S(-3, -72),     S(-27, -31),    S(-61, -12),    S(-22, -38),    S(-114, 24),    S(-112, 5),     S(-114, -10),   //
    S(-175, 21),    S(-77, -44),    S(-37, -55),    S(-34, -40),    S(-51, -22),    S(-58, -24),    S(-113, -36),   S(-125, -34),   //
    S(-119, 5),     S(-89, 11),     S(-46, -24),    S(-12, -38),    S(-27, -21),    S(-35, -25),    S(-52, -39),    S(-83, -20),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(32, 99),      S(36, 84),      S(92, 52),      S(-128, 253),   S(-25, 133),    S(-75, 157),    S(18, 57),      S(-28, 34),     //
    S(79, 63),      S(-92, 253),    S(-64, 312),    S(-129, 301),   S(-100, 242),   S(-156, 270),   S(-78, 143),    S(-17, 29),     //
    S(-44, 183),    S(86, 160),     S(46, 193),     S(-32, 268),    S(-25, 184),    S(-95, 228),    S(5, 100),      S(-19, 14),     //
    S(38, 81),      S(16, 157),     S(20, 170),     S(0, 221),      S(-14, 204),    S(-14, 133),    S(-4, 55),      S(-29, 49),     //
    S(22, 99),      S(36, 83),      S(25, 119),     S(0, 164),      S(-16, 173),    S(-26, 137),    S(-26, 44),     S(-18, -33),    //
    S(52, -143),    S(58, -30),     S(43, 52),      S(-31, 113),    S(7, 43),       S(-5, 58),      S(25, -63),     S(-11, -55),    //
    S(68, -287),    S(22, -301),    S(14, -125),    S(47, -52),     S(5, -12),      S(49, -134),    S(25, -47),     S(-19, -41),    //
    S(-85, -57),    S(-96, -364),   S(-13, -309),   S(39, -234),    S(59, -133),    S(86, -235),    S(73, -202),    S(9, -98),      //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(454, -713),   S(225, -100),   S(77, -47),     S(-56, 28),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(388, -175),   S(39, 129),     S(-58, 158),    S(326, 59),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(13, 35),      S(105, 160),    S(160, 121),    S(257, 49),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-229, 66),    S(-2, 123),     S(138, 118),    S(119, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-197, 5),     S(-38, 74),     S(22, 81),      S(-28, 123),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-141, -35),   S(59, -6),      S(-41, 63),     S(-91, 107),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(76, -117),    S(110, -46),    S(-11, 24),     S(-115, 83),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-23, -181),   S(88, -143),    S(-42, -96),    S(-27, -117),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
