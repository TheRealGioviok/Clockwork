#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(311, 320);
inline const PParam KNIGHT_MAT = S(1127, 916);
inline const PParam BISHOP_MAT = S(1239, 965);
inline const PParam ROOK_MAT   = S(1770, 1672);
inline const PParam QUEEN_MAT  = S(3655, 2890);
inline const PParam TEMPO_VAL  = S(59, 15);

inline const PParam BISHOP_PAIR_VAL  = S(80, 177);
inline const PParam ROOK_CLOSED_VAL  = S(-59, 3);
inline const PParam DOUBLED_PAWN_VAL = S(-45, -75);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(19, 20), S(62, 33), S(79, 69), S(198, 137), S(570, 243), S(930, 1104),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(63, 44), S(61, 30), S(68, 55), S(149, 119), S(700, -87),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-69, -99), S(-59, -80), S(-33, -4), S(23, 73), S(55, 211), S(288, 304),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(46, -41), S(31, -3), S(13, 31), S(17, 77), S(85, 153), S(155, 289),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(19, -46), S(4, 3), S(0, -24), S(-1, -44), S(-7, -94), S(-182, -148),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(15, 99), S(-18, 87), S(-10, 35), S(2, 6), S(11, 11), S(41, 8), S(18, -2),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-191, -48), S(29, -3), S(-10, 43), S(11, 74), S(16, 98), S(38, 97), S(-12, 117),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-233, -228), S(-126, -64), S(-67, -10), S(-21, 23), S(27, 38), S(56, 77), S(95, 73), S(133, 74), S(182, 16),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-237, -281), S(-163, -96), S(-86, -36), S(-51, 13), S(-20, 43), S(-4, 63), S(13, 77), S(28, 80), S(45, 83), S(53, 75), S(71, 60), S(131, 6), S(157, -22), S(213, -56),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-315, -242), S(-152, -79), S(-99, -15), S(-68, -5), S(-42, 18), S(-28, 42), S(-10, 54), S(10, 59), S(29, 70), S(50, 78), S(71, 78), S(90, 77), S(119, 75), S(136, 56), S(282, -72),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-991, -892), S(-254, -639), S(-154, -520), S(-103, -308), S(-93, -106), S(-55, 0), S(-50, 107), S(-26, 120), S(-21, 174), S(-8, 199), S(0, 223), S(5, 238), S(24, 230), S(34, 242), S(40, 237), S(54, 233), S(60, 224), S(60, 230), S(86, 185), S(109, 147), S(124, 128), S(166, 63), S(179, 55), S(340, -119), S(374, -162), S(597, -304), S(314, -146), S(351, -172),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(408, 49), S(97, -119), S(-5, -29), S(-21, 9), S(-47, 11), S(-82, 17), S(-61, 18), S(-70, 12), S(-71, -36),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(81, -30), S(151, -75),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(36, -4), S(140, -41),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(57, -42), S(63, -69), S(110, -66), S(164, -131),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-40, 31), S(-59, 43), S(-4, -3), S(158, -93), S(359, -239),
};

inline const PParam PAWN_THREAT_KNIGHT = S(234, 68);
inline const PParam PAWN_THREAT_BISHOP = S(211, 111);
inline const PParam PAWN_THREAT_ROOK   = S(189, 56);
inline const PParam PAWN_THREAT_QUEEN  = S(171, -59);

inline const PParam KNIGHT_THREAT_BISHOP = S(103, 69);
inline const PParam KNIGHT_THREAT_ROOK   = S(245, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(154, -69);

inline const PParam BISHOP_THREAT_KNIGHT = S(108, 25);
inline const PParam BISHOP_THREAT_ROOK   = S(243, 49);
inline const PParam BISHOP_THREAT_QUEEN  = S(191, 46);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-3, -10), S(-6, -2), S(-5, -12), S(-10, -22), S(-16, -27), S(-20, -34), S(-21, -41), S(-26, -40), S(-36, -47),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(108, 164),    S(99, 212),     S(172, 176),    S(236, 57),     S(182, 49),     S(164, 116),    S(58, 140),     S(118, 117),    //
    S(65, 36),      S(182, 63),     S(159, 5),      S(160, -51),    S(113, -67),    S(57, -19),     S(19, 27),      S(-35, 31),     //
    S(-14, 4),      S(6, 9),        S(27, -36),     S(14, -50),     S(-2, -54),     S(-45, -47),    S(-89, 0),      S(-116, 21),    //
    S(-38, -44),    S(-15, -15),    S(-18, -49),    S(-31, -48),    S(-58, -56),    S(-83, -46),    S(-134, 2),     S(-156, -10),   //
    S(-41, -74),    S(25, -70),     S(-19, -27),    S(-50, -24),    S(-71, -32),    S(-112, -34),   S(-132, -20),   S(-159, -29),   //
    S(-31, -68),    S(98, -63),     S(56, -28),     S(-1, -9),      S(-38, -22),    S(-75, -27),    S(-102, -2),    S(-138, -17),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-380, -158),  S(-333, 55),    S(-444, 232),   S(-106, 62),    S(-238, 87),    S(-325, 94),    S(-553, 83),    S(-523, -17),   //
    S(14, -6),      S(79, 4),       S(178, -64),    S(126, 0),      S(127, 7),      S(62, -15),     S(5, 4),        S(-13, -37),    //
    S(72, -27),     S(112, 25),     S(200, 15),     S(155, 35),     S(156, 24),     S(69, 34),      S(65, 7),       S(-29, 10),     //
    S(116, 12),     S(89, 45),      S(122, 49),     S(107, 74),     S(118, 60),     S(79, 55),      S(51, 13),      S(43, 10),      //
    S(107, 0),      S(126, -4),     S(112, 23),     S(92, 35),      S(82, 46),      S(73, 42),      S(55, 10),      S(48, -45),     //
    S(16, -26),     S(38, -39),     S(32, -21),     S(43, 23),      S(50, 20),      S(-5, -2),      S(1, -40),      S(-31, -44),    //
    S(23, -10),     S(43, -40),     S(23, -35),     S(24, -16),     S(11, -22),     S(-15, -43),    S(0, -56),      S(-56, -125),   //
    S(-19, -60),    S(16, -18),     S(33, -43),     S(42, -37),     S(35, -29),     S(-11, -60),    S(-24, -32),    S(-72, -84),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-165, 64),    S(-187, 46),    S(-431, 72),    S(-308, 85),    S(-257, 89),    S(-425, 115),   S(-171, 93),    S(-122, 68),    //
    S(3, -46),      S(-8, 34),      S(8, 15),       S(-8, 17),      S(-33, 32),     S(4, 25),       S(-18, 16),     S(-60, 16),     //
    S(33, 14),      S(94, 18),      S(180, 27),     S(109, 22),     S(87, 25),      S(58, 40),      S(110, 11),     S(-4, 16),      //
    S(38, -24),     S(44, 34),      S(99, 30),      S(106, 57),     S(115, 56),     S(48, 52),      S(18, 35),      S(-25, 14),     //
    S(43, -53),     S(61, -3),      S(66, 20),      S(71, 44),      S(65, 62),      S(16, 52),      S(5, 10),       S(-8, -47),     //
    S(60, -52),     S(99, -28),     S(105, -14),    S(48, 28),      S(29, 32),      S(28, 29),      S(56, -14),     S(23, -48),     //
    S(46, -86),     S(96, -62),     S(67, -49),     S(40, -20),     S(29, -34),     S(32, -46),     S(14, -32),     S(33, -97),     //
    S(44, -71),     S(30, -23),     S(36, -17),     S(47, -52),     S(56, -63),     S(51, -20),     S(44, -49),     S(25, -51),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(123, 7),      S(182, 7),      S(111, 37),     S(118, 29),     S(124, 18),     S(74, 31),      S(83, 34),      S(93, 39),      //
    S(39, 59),      S(123, 35),     S(199, 11),     S(132, 50),     S(147, 39),     S(94, 48),      S(33, 68),      S(21, 77),      //
    S(20, 39),      S(166, -1),     S(198, -8),     S(211, -18),    S(163, -8),     S(84, 35),      S(98, 25),      S(-20, 76),     //
    S(-24, 35),     S(41, 27),      S(73, 19),      S(109, -24),    S(78, 0),       S(11, 50),      S(-15, 54),     S(-74, 61),     //
    S(-95, -9),     S(-16, -8),     S(-32, 7),      S(-39, 4),      S(-45, 0),      S(-67, 43),     S(-98, 42),     S(-114, 34),    //
    S(-116, -28),   S(-45, -58),    S(-48, -30),    S(-64, -30),    S(-46, -49),    S(-97, 4),      S(-103, -9),    S(-123, -10),   //
    S(-175, -17),   S(-77, -78),    S(-53, -63),    S(-43, -64),    S(-49, -61),    S(-70, -43),    S(-94, -64),    S(-125, -46),   //
    S(-140, -14),   S(-109, -9),    S(-54, -47),    S(-27, -65),    S(-39, -50),    S(-53, -39),    S(-72, -45),    S(-89, -27),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(42, 37),      S(80, 3),       S(81, 13),      S(-36, 140),    S(35, 58),      S(-22, 86),     S(44, 1),       S(-15, 21),     //
    S(29, 74),      S(-43, 170),    S(-46, 224),    S(-134, 256),   S(-105, 202),   S(-115, 200),   S(-69, 107),    S(-34, 46),     //
    S(-10, 104),    S(78, 101),     S(16, 181),     S(2, 188),      S(-38, 170),    S(-72, 172),    S(-1, 65),      S(-35, 38),     //
    S(38, 36),      S(32, 112),     S(1, 141),      S(-5, 201),     S(-24, 182),    S(-36, 122),    S(-4, 36),      S(-6, -7),      //
    S(7, 59),       S(38, 22),      S(9, 95),       S(-20, 143),    S(-33, 130),    S(-31, 92),     S(-19, 14),     S(-13, -37),    //
    S(25, -108),    S(43, -56),     S(46, 7),       S(-6, 35),      S(6, -9),       S(9, -4),       S(19, -72),     S(0, -70),      //
    S(13, -213),    S(44, -314),    S(33, -179),    S(49, -106),    S(23, -87),     S(41, -160),    S(14, -97),     S(0, -95),      //
    S(-41, -134),   S(20, -387),    S(17, -376),    S(45, -283),    S(47, -199),    S(51, -245),    S(37, -206),    S(-16, -127),   //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-142, -380),  S(88, -22),     S(-64, 28),     S(-177, 53),    S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(196, -120),   S(7, 139),      S(23, 125),     S(125, 55),     S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(-36, 51),     S(68, 129),     S(105, 98),     S(89, 54),      S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(-257, 75),    S(31, 89),      S(22, 87),      S(-33, 72),     S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(-231, 33),    S(-45, 63),     S(-30, 69),     S(-113, 104),   S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(-136, 3),     S(55, 6),       S(-35, 57),     S(-78, 83),     S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(80, -88),     S(133, -46),    S(45, 0),       S(-37, 43),     S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
    S(-44, -115),   S(88, -107),    S(-11, -71),    S(-28, -70),    S(20, -15),     S(20, -15),     S(20, -15),     S(20, -15),     //
};
// Epoch duration: 61.6787s
// clang-format on
}
