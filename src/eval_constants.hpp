#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(299, 315);
inline const PParam KNIGHT_MAT = S(1131, 908);
inline const PParam BISHOP_MAT = S(1226, 955);
inline const PParam ROOK_MAT   = S(1713, 1683);
inline const PParam QUEEN_MAT  = S(3658, 2890);
inline const PParam TEMPO_VAL  = S(59, 15);

inline const PParam BISHOP_PAIR_VAL  = S(80, 178);
inline const PParam ROOK_OPEN_VAL  = S(104, -29);
inline const PParam ROOK_SEMIOPEN_VAL  = S(39, 12);

inline const PParam DOUBLED_PAWN_VAL = S(-39, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);
inline const PParam OUTPOST_KNIGHT_VAL = S(6, 52);
inline const PParam OUTPOST_BISHOP_VAL = S(45, 43);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(19, 20), S(63, 32), S(78, 69), S(197, 137), S(570, 242), S(939, 1145),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(64, 44), S(62, 31), S(67, 58), S(148, 121), S(698, -88),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-73, -102), S(-61, -85), S(-35, -9), S(22, 68), S(53, 208), S(303, 312),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(53, -45), S(37, -6), S(20, 28), S(20, 77), S(87, 153), S(142, 296),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(17, -47), S(2, 3), S(-5, -25), S(-3, -43), S(-9, -93), S(-189, -145),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(13, 103), S(-20, 91), S(-12, 39), S(1, 10), S(11, 14), S(40, 12), S(19, 0),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-185, -49), S(33, -3), S(-7, 44), S(14, 74), S(19, 99), S(40, 99), S(-9, 118),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-233, -228), S(-125, -64), S(-67, -10), S(-22, 23), S(27, 39), S(56, 78), S(96, 76), S(134, 79), S(183, 23),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-235, -287), S(-162, -102), S(-85, -41), S(-50, 8), S(-19, 38), S(-1, 59), S(16, 73), S(33, 79), S(52, 82), S(64, 79), S(87, 66), S(151, 20), S(182, -1), S(240, -34),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-317, -246), S(-154, -84), S(-100, -21), S(-68, -10), S(-42, 13), S(-28, 36), S(-10, 48), S(8, 54), S(25, 67), S(43, 76), S(61, 78), S(72, 81), S(93, 84), S(104, 70), S(249, -56),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-975, -882), S(-252, -652), S(-154, -524), S(-102, -308), S(-93, -103), S(-55, 2), S(-51, 111), S(-27, 125), S(-22, 179), S(-10, 204), S(-1, 229), S(4, 243), S(22, 235), S(33, 246), S(39, 242), S(52, 237), S(58, 229), S(58, 235), S(84, 190), S(106, 153), S(121, 134), S(164, 67), S(176, 59), S(338, -116), S(371, -159), S(619, -318), S(449, -236), S(713, -379),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(452, 5), S(104, -120), S(0, -30), S(-16, 8), S(-44, 11), S(-79, 17), S(-58, 19), S(-68, 13), S(-69, -35),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(81, -30), S(152, -77),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(35, -5), S(137, -44),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -48), S(52, -64), S(104, -64), S(161, -128),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-40, 31), S(-59, 43), S(-3, -4), S(160, -95), S(358, -238),
};

inline const PParam PAWN_THREAT_KNIGHT = S(231, 57);
inline const PParam PAWN_THREAT_BISHOP = S(200, 100);
inline const PParam PAWN_THREAT_ROOK   = S(193, 55);
inline const PParam PAWN_THREAT_QUEEN  = S(171, -57);

inline const PParam KNIGHT_THREAT_BISHOP = S(105, 73);
inline const PParam KNIGHT_THREAT_ROOK   = S(245, 4);
inline const PParam KNIGHT_THREAT_QUEEN  = S(155, -67);

inline const PParam BISHOP_THREAT_KNIGHT = S(109, 34);
inline const PParam BISHOP_THREAT_ROOK   = S(243, 55);
inline const PParam BISHOP_THREAT_QUEEN  = S(190, 51);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-2, -6), S(-5, 0), S(-4, -10), S(-10, -21), S(-16, -26), S(-21, -32), S(-22, -39), S(-27, -37), S(-36, -44),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(106, 160),    S(98, 207),     S(169, 171),    S(231, 52),     S(176, 47),     S(161, 112),    S(55, 136),     S(113, 114),    //
    S(75, 42),      S(194, 68),     S(170, 11),     S(173, -45),    S(125, -62),    S(69, -13),     S(29, 33),      S(-25, 38),     //
    S(-4, 9),       S(18, 12),      S(38, -33),     S(26, -47),     S(8, -51),      S(-34, -44),    S(-78, 4),      S(-108, 26),    //
    S(-30, -39),    S(-6, -12),     S(-11, -45),    S(-23, -44),    S(-50, -53),    S(-75, -42),    S(-126, 6),     S(-150, -4),    //
    S(-34, -67),    S(32, -66),     S(-15, -22),    S(-46, -20),    S(-68, -28),    S(-107, -30),   S(-126, -16),   S(-154, -21),   //
    S(-23, -61),    S(108, -56),    S(64, -20),     S(5, -2),       S(-31, -14),    S(-67, -19),    S(-94, 5),      S(-132, -8),    //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-383, -154),  S(-338, 63),    S(-447, 236),   S(-111, 69),    S(-243, 95),    S(-330, 102),   S(-557, 88),    S(-527, -12),   //
    S(10, 2),       S(75, 12),      S(174, -56),    S(123, 8),      S(124, 16),     S(58, -8),      S(1, 13),       S(-15, -30),    //
    S(68, -26),     S(106, 16),     S(191, 6),      S(144, 30),     S(144, 19),     S(60, 29),      S(54, 4),       S(-35, 14),     //
    S(112, 9),      S(83, 30),      S(115, 34),     S(99, 60),      S(108, 47),     S(70, 42),      S(43, 1),       S(36, 9),       //
    S(100, -9),     S(118, -14),    S(103, 8),      S(85, 24),      S(73, 34),      S(66, 28),      S(47, 2),       S(41, -51),     //
    S(13, -18),     S(36, -32),     S(27, -16),     S(40, 29),      S(46, 25),      S(-10, 2),      S(-1, -33),     S(-34, -37),    //
    S(21, -2),      S(42, -33),     S(21, -28),     S(21, -9),      S(7, -14),      S(-19, -36),    S(-3, -47),     S(-60, -115),   //
    S(-22, -53),    S(12, -10),     S(29, -35),     S(38, -28),     S(30, -20),     S(-16, -51),    S(-28, -24),    S(-75, -76),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-155, 75),    S(-180, 58),    S(-421, 85),    S(-299, 97),    S(-249, 102),   S(-417, 127),   S(-160, 104),   S(-111, 78),    //
    S(14, -36),     S(-1, 43),      S(16, 24),      S(-1, 28),      S(-26, 43),     S(10, 34),      S(-10, 24),     S(-49, 26),     //
    S(44, 21),      S(92, 10),      S(169, 21),     S(98, 19),      S(74, 22),      S(48, 35),      S(106, 6),      S(3, 23),       //
    S(48, -19),     S(42, 20),      S(93, 18),      S(94, 43),      S(103, 42),     S(39, 41),      S(13, 22),      S(-17, 21),     //
    S(49, -47),     S(54, -8),      S(58, 11),      S(66, 31),      S(57, 49),      S(13, 41),      S(0, 2),        S(0, -43),      //
    S(71, -41),     S(111, -19),    S(116, -8),     S(58, 35),      S(39, 40),      S(39, 36),      S(68, -6),      S(35, -37),     //
    S(58, -77),     S(109, -54),    S(79, -41),     S(50, -11),     S(40, -25),     S(42, -36),     S(25, -23),     S(44, -87),     //
    S(56, -60),     S(42, -13),     S(47, -6),      S(57, -40),     S(66, -51),     S(62, -10),     S(55, -38),     S(37, -40),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(107, 10),     S(172, 9),      S(102, 39),     S(102, 34),     S(109, 23),     S(58, 36),      S(64, 40),      S(74, 44),      //
    S(15, 68),      S(102, 44),     S(177, 21),     S(102, 65),     S(119, 52),     S(66, 62),      S(5, 80),       S(-3, 86),      //
    S(4, 46),       S(153, 4),      S(182, 0),      S(182, -3),     S(136, 5),      S(62, 46),      S(80, 34),      S(-38, 84),     //
    S(-32, 39),     S(34, 31),      S(66, 24),      S(94, -14),     S(62, 11),      S(-1, 58),      S(-22, 58),     S(-83, 66),     //
    S(-97, -8),     S(-20, -5),     S(-36, 10),     S(-50, 12),     S(-56, 8),      S(-75, 49),     S(-103, 45),    S(-118, 36),    //
    S(-118, -29),   S(-48, -56),    S(-52, -28),    S(-72, -25),    S(-55, -44),    S(-105, 9),     S(-108, -7),    S(-127, -9),    //
    S(-178, -17),   S(-79, -78),    S(-55, -63),    S(-51, -61),    S(-58, -56),    S(-77, -40),    S(-97, -63),    S(-129, -45),   //
    S(-142, -15),   S(-112, -10),   S(-58, -46),    S(-33, -63),    S(-47, -47),    S(-60, -36),    S(-76, -44),    S(-93, -27),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(43, 37),      S(82, 3),       S(87, 9),       S(-32, 138),    S(38, 57),      S(-16, 83),     S(48, -1),      S(-14, 22),     //
    S(30, 74),      S(-41, 169),    S(-46, 225),    S(-134, 257),   S(-105, 203),   S(-117, 202),   S(-67, 107),    S(-33, 46),     //
    S(-9, 104),     S(79, 102),     S(18, 181),     S(1, 191),      S(-38, 173),    S(-72, 173),    S(0, 65),       S(-35, 38),     //
    S(40, 36),      S(34, 113),     S(3, 143),      S(-3, 204),     S(-23, 186),    S(-35, 123),    S(-3, 37),      S(-4, -7),      //
    S(7, 59),       S(39, 23),      S(11, 95),      S(-20, 145),    S(-34, 134),    S(-30, 93),     S(-17, 15),     S(-12, -37),    //
    S(26, -108),    S(45, -58),     S(47, 8),       S(-6, 36),      S(6, -7),       S(10, -3),      S(20, -72),     S(0, -69),      //
    S(13, -214),    S(46, -314),    S(34, -179),    S(49, -105),    S(23, -86),     S(41, -158),    S(15, -96),     S(0, -96),      //
    S(-40, -136),   S(20, -387),    S(16, -375),    S(43, -280),    S(45, -197),    S(49, -243),    S(36, -205),    S(-16, -127),   //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-135, -380),  S(96, -22),     S(-60, 29),     S(-172, 55),    S(20, -12),     S(20, -12),     S(20, -12),     S(20, -12),     //
    S(194, -115),   S(7, 142),      S(22, 128),     S(129, 58),     S(20, -12),     S(20, -12),     S(20, -12),     S(20, -12),     //
    S(-35, 56),     S(72, 133),     S(110, 102),    S(93, 57),      S(20, -12),     S(20, -12),     S(20, -12),     S(20, -12),     //
    S(-255, 80),    S(33, 94),      S(25, 92),      S(-27, 76),     S(20, -12),     S(20, -12),     S(20, -12),     S(20, -12),     //
    S(-228, 38),    S(-43, 67),     S(-28, 73),     S(-111, 108),   S(20, -12),     S(20, -12),     S(20, -12),     S(20, -12),     //
    S(-133, 7),     S(59, 9),       S(-32, 61),     S(-75, 86),     S(20, -12),     S(20, -12),     S(20, -12),     S(20, -12),     //
    S(84, -84),     S(138, -45),    S(50, 1),       S(-32, 45),     S(20, -12),     S(20, -12),     S(20, -12),     S(20, -12),     //
    S(-39, -112),   S(91, -103),    S(-9, -67),     S(-26, -66),    S(20, -12),     S(20, -12),     S(20, -12),     S(20, -12),     //
};
// Epoch duration: 80.0908s
// clang-format on
}
