#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(285, 444);
inline const PParam KNIGHT_MAT = S(963, 1004);
inline const PParam BISHOP_MAT = S(975, 1068);
inline const PParam ROOK_MAT   = S(1475, 1801);
inline const PParam QUEEN_MAT  = S(3215, 3268);
inline const PParam TEMPO_VAL  = S(47, 15);

inline const PParam BISHOP_PAIR_VAL  = S(63, 189);
inline const PParam DOUBLED_PAWN_VAL = S(-48, -77);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(0, 21), S(53, 28), S(83, 71), S(190, 147), S(467, 573), S(1783, 1447),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(48, 47), S(51, 21), S(55, 37), S(103, 112), S(653, -132),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-1, 4), S(-26, 38), S(-28, 89), S(44, 139), S(73, 246), S(23, 42),
};
inline const PParam DEFENDED_PASSED_PUSH = S(0, 0);

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-218, -193), S(-110, -133), S(-55, -37), S(-4, -10), S(42, 11), S(63, 55), S(95, 53), S(119, 52), S(170, -28),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-128, -275), S(-78, -183), S(-18, -120), S(-5, -62), S(31, -31), S(42, -7), S(65, 1), S(75, 13), S(82, 24), S(84, 20), S(109, 9), S(166, -43), S(212, -61), S(282, -92),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-209, -341), S(-86, -117), S(-44, -42), S(-23, -46), S(-8, -11), S(5, 4), S(24, 12), S(52, 8), S(78, 18), S(105, 26), S(130, 26), S(142, 31), S(188, 17), S(173, 19), S(272, -74),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(69, 102), S(-642, 565), S(-213, -396), S(-151, -218), S(-110, -266), S(-77, -215), S(-111, -14), S(-87, -45), S(-74, -13), S(-71, 14), S(-62, 35), S(-61, 69), S(-39, 55), S(-27, 53), S(-17, 55), S(-5, 50), S(-19, 74), S(4, 34), S(18, 22), S(51, -31), S(92, -77), S(124, -139), S(219, -214), S(414, -409), S(373, -415), S(945, -700), S(739, -627), S(1366, -998),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(390, 799), S(92, 431), S(21, 479), S(22, 509), S(1, 501), S(-21, 482), S(-5, 489), S(3, 457), S(55, 334),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(87, -40), S(152, -91),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(28, -2), S(137, -43),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -65), S(89, -81), S(138, -79), S(148, -128),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-53, 37), S(-71, 48), S(9, -28), S(177, -125), S(417, -272),
};

inline const PParam PAWN_THREAT_KNIGHT = S(209, 69);
inline const PParam PAWN_THREAT_BISHOP = S(178, 79);
inline const PParam PAWN_THREAT_ROOK   = S(175, 49);
inline const PParam PAWN_THREAT_QUEEN  = S(146, -75);

inline const PParam KNIGHT_THREAT_BISHOP = S(83, 69);
inline const PParam KNIGHT_THREAT_ROOK   = S(225, -13);
inline const PParam KNIGHT_THREAT_QUEEN  = S(133, -72);

inline const PParam BISHOP_THREAT_KNIGHT = S(82, 22);
inline const PParam BISHOP_THREAT_ROOK   = S(209, 41);
inline const PParam BISHOP_THREAT_QUEEN  = S(174, 30);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-119, 489),   S(16, 493),     S(160, 440),    S(315, 218),    S(265, 235),    S(282, 329),    S(158, 368),    S(221, 354),    //
    S(13, -6),      S(177, 14),     S(113, -65),    S(147, -173),   S(70, -175),    S(13, -88),     S(-31, -9),     S(-53, -19),    //
    S(-44, -67),    S(-31, -60),    S(-31, -107),   S(-40, -140),   S(-53, -139),   S(-97, -134),   S(-113, -63),   S(-134, -43),   //
    S(-39, -143),   S(-19, -104),   S(-53, -148),   S(-54, -150),   S(-73, -160),   S(-105, -139),  S(-145, -68),   S(-156, -89),   //
    S(-34, -177),   S(28, -173),    S(-33, -133),   S(-93, -117),   S(-86, -137),   S(-135, -134),  S(-142, -106),  S(-174, -108),  //
    S(-29, -178),   S(124, -177),   S(40, -136),    S(-57, -95),    S(-77, -149),   S(-101, -128),  S(-116, -86),   S(-151, -104),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-402, -160),  S(-86, -76),    S(-560, 314),   S(-53, 61),     S(-335, 154),   S(-357, 176),   S(-410, -16),   S(-530, 45),    //
    S(51, -21),     S(83, 64),      S(199, -55),    S(32, 72),      S(88, 48),      S(43, 2),       S(-36, 20),     S(16, -42),     //
    S(38, 24),      S(-1, 123),     S(215, 61),     S(91, 97),      S(138, 60),     S(34, 65),      S(33, 32),      S(-62, 11),     //
    S(113, 40),     S(40, 96),      S(88, 97),      S(72, 113),     S(84, 78),      S(73, 75),      S(5, 26),       S(16, 42),      //
    S(81, 26),      S(108, 30),     S(84, 65),      S(49, 62),      S(54, 71),      S(53, 74),      S(11, 29),      S(24, -60),     //
    S(3, -29),      S(31, -36),     S(14, -27),     S(37, 40),      S(52, 36),      S(-30, -1),     S(-24, -16),    S(-61, -20),    //
    S(19, 67),      S(47, -27),     S(-6, -22),     S(-12, 5),      S(-18, -8),     S(-40, -35),    S(-22, -57),    S(-113, -117),  //
    S(-43, -16),    S(0, -30),      S(57, -103),    S(37, -35),     S(70, -50),     S(3, -147),     S(-48, -45),    S(-163, -53),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-111, 109),   S(-43, 27),     S(-546, 131),   S(-281, 122),   S(-313, 140),   S(-421, 145),   S(-4, 80),      S(-13, 58),     //
    S(14, -33),     S(0, 80),       S(25, 60),      S(27, 19),      S(16, 43),      S(7, 59),       S(0, 44),       S(-58, 51),     //
    S(16, 79),      S(68, 78),      S(267, 42),     S(127, 41),     S(79, 53),      S(22, 89),      S(138, 30),     S(8, 86),       //
    S(28, 22),      S(31, 75),      S(128, 45),     S(124, 63),     S(133, 65),     S(54, 81),      S(41, 55),      S(-37, 67),     //
    S(28, -14),     S(42, 43),      S(63, 39),      S(82, 63),      S(83, 93),      S(29, 73),      S(31, 18),      S(21, -45),     //
    S(65, -22),     S(113, 0),      S(111, 1),      S(38, 58),      S(30, 67),      S(18, 75),      S(83, 5),       S(40, -43),     //
    S(32, -52),     S(112, -30),    S(58, -18),     S(37, 18),      S(27, -9),      S(57, -21),     S(4, 11),       S(66, -106),    //
    S(52, 0),       S(24, 12),      S(18, 22),      S(26, -38),     S(9, -34),      S(33, 2),       S(40, -63),     S(-36, 20),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(114, 31),     S(208, 33),     S(106, 76),     S(82, 87),      S(110, 58),     S(65, 60),      S(87, 59),      S(95, 60),      //
    S(124, 69),     S(172, 65),     S(244, 42),     S(157, 96),     S(155, 93),     S(69, 111),     S(33, 109),     S(52, 100),     //
    S(40, 75),      S(300, 7),      S(253, 20),     S(262, 3),      S(167, 38),     S(79, 77),      S(128, 47),     S(-14, 92),     //
    S(10, 57),      S(51, 57),      S(87, 46),      S(136, -9),     S(102, 19),     S(38, 82),      S(17, 72),      S(-74, 74),     //
    S(-112, 11),    S(25, -1),      S(-6, 29),      S(-4, 25),      S(-10, 20),     S(-46, 78),     S(-93, 78),     S(-114, 58),    //
    S(-100, -4),    S(16, -83),     S(-15, -31),    S(-48, -11),    S(-14, -34),    S(-104, 32),    S(-108, 14),    S(-114, 2),     //
    S(-157, 19),    S(-77, -49),    S(-34, -54),    S(-30, -39),    S(-46, -23),    S(-57, -19),    S(-110, -32),   S(-119, -31),   //
    S(-127, 1),     S(-92, 11),     S(-53, -25),    S(-19, -41),    S(-31, -20),    S(-39, -25),    S(-58, -38),    S(-89, -19),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(44, 85),      S(63, 53),      S(92, 68),      S(-81, 222),    S(3, 118),      S(-60, 163),    S(45, 42),      S(-24, 37),     //
    S(91, 66),      S(-92, 257),    S(-52, 312),    S(-151, 336),   S(-100, 253),   S(-146, 272),   S(-69, 139),    S(-7, 36),      //
    S(-34, 180),    S(92, 162),     S(49, 211),     S(-15, 265),    S(-35, 209),    S(-76, 220),    S(11, 95),      S(-9, 17),      //
    S(51, 69),      S(31, 154),     S(21, 168),     S(-2, 235),     S(-9, 214),     S(4, 114),      S(7, 50),       S(-21, 52),     //
    S(28, 90),      S(57, 69),      S(28, 135),     S(-2, 171),     S(-23, 184),    S(-20, 138),    S(-8, 26),      S(-13, -25),    //
    S(63, -135),    S(59, -19),     S(45, 56),      S(-34, 121),    S(10, 43),      S(2, 47),       S(28, -56),     S(-3, -43),     //
    S(51, -244),    S(44, -301),    S(20, -123),    S(42, -42),     S(-3, -1),      S(43, -125),    S(29, -58),     S(-17, -28),    //
    S(-80, -51),    S(-80, -329),   S(-15, -290),   S(13, -207),    S(38, -113),    S(61, -208),    S(36, -156),    S(-22, -54),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(484, -691),   S(284, -129),   S(-37, -12),    S(-154, 54),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(365, -159),   S(23, 138),     S(-35, 166),    S(290, 79),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-18, 40),     S(115, 152),    S(178, 119),    S(234, 58),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-218, 62),    S(-5, 129),     S(139, 117),    S(109, 81),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-200, 5),     S(-31, 78),     S(39, 80),      S(-32, 128),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-144, -32),   S(68, -4),      S(-31, 63),     S(-81, 111),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(83, -117),    S(123, -44),    S(8, 26),       S(-106, 89),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-28, -180),   S(74, -138),    S(-55, -91),    S(-24, -120),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
