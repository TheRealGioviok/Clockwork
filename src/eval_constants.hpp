#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(281, 414);
inline const PParam KNIGHT_MAT = S(1057, 970);
inline const PParam BISHOP_MAT = S(1030, 1014);
inline const PParam ROOK_MAT   = S(1565, 1711);
inline const PParam QUEEN_MAT  = S(3559, 3047);
inline const PParam TEMPO_VAL  = S(56, 16);

inline const PParam BISHOP_PAIR_VAL  = S(82, 176);
inline const PParam DOUBLED_PAWN_VAL = S(-25, -85);

inline const PParam POTENTIAL_CHECKER_VAL = S(-76, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
  S(18, 16), S(52, 34), S(82, 67), S(205, 131), S(502, 273), S(1227, 1014),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
  S(64, 43), S(60, 26), S(66, 49), S(150, 115), S(655, -85),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
  S(-58, 0), S(-41, 15), S(-14, 88), S(55, 161), S(82, 291), S(206, 80),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
  S(53, -44), S(34, -2), S(16, 28), S(19, 75), S(82, 162), S(174, 275),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
  S(15, -45), S(-8, 2), S(-31, -21), S(-32, -47), S(-46, -92), S(-226, -155),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
  CS(0, 0), S(4, 52), S(-35, 34), S(-23, -17), S(-10, -44), S(-5, -38), S(23, -42), S(4, -52),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
  CS(0, 0), S(-175, -89), S(33, -47), S(-6, -2), S(10, 28), S(15, 52), S(38, 49), S(-10, 73),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
  S(-226, -213), S(-101, -154), S(-38, -84), S(7, -29),  S(50, -12),
  S(73, 27),     S(105, 32),    S(147, 25),  S(189, -3),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
  S(-116, -370), S(-91, -308), S(-11, -140), S(36, -83), S(65, -42),  S(87, -16),  S(108, 0),
  S(120, 15),    S(133, 30),   S(153, 22),   S(161, 20), S(217, -16), S(245, -45), S(309, -91),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
  S(-10, -217), S(-82, -121), S(-40, -59), S(-11, -51), S(10, -27),
  S(31, -12),   S(50, 4),     S(78, 8),    S(99, 22),   S(121, 24),
  S(147, 29),   S(174, 29),   S(207, 27),  S(224, 16),  S(361, -107),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
  S(-257, 71),  S(-247, -833), S(-114, -707), S(-138, -707), S(-91, -481), S(-84, -334),
  S(-70, -183), S(-51, -104),  S(-48, -38),   S(-38, 0),     S(-34, 44),   S(-27, 66),
  S(-14, 61),   S(1, 64),      S(1, 79),      S(10, 75),     S(14, 79),    S(32, 61),
  S(38, 50),    S(56, 17),     S(79, -17),    S(93, -57),    S(98, -58),   S(266, -229),
  S(295, -277), S(635, -498),  S(586, -514),  S(1269, -866),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
  S(328, 468), S(42, 382), S(45, 449), S(-6, 485), S(-4, 480),
  S(-36, 481), S(18, 481), S(36, 460), S(27, 422),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
  CS(0, 0),
  S(84, -31),
  S(155, -74),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
  CS(0, 0),
  S(39, -1),
  S(144, -41),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
  CS(0, 0), S(71, -47), S(76, -73), S(117, -70), S(149, -125),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
  CS(0, 0), S(-41, 33), S(-58, 41), S(-3, -8), S(149, -92), S(347, -231),
};

inline const PParam PAWN_THREAT_KNIGHT = S(228, 72);
inline const PParam PAWN_THREAT_BISHOP = S(191, 95);
inline const PParam PAWN_THREAT_ROOK   = S(186, 58);
inline const PParam PAWN_THREAT_QUEEN  = S(157, -39);

inline const PParam KNIGHT_THREAT_BISHOP = S(107, 75);
inline const PParam KNIGHT_THREAT_ROOK   = S(237, 2);
inline const PParam KNIGHT_THREAT_QUEEN  = S(149, -70);

inline const PParam BISHOP_THREAT_KNIGHT = S(112, 32);
inline const PParam BISHOP_THREAT_ROOK   = S(235, 56);
inline const PParam BISHOP_THREAT_QUEEN  = S(185, 68);

inline const std::array<PParam, 48> PAWN_PSQT = {
  S(197, 399),  S(212, 440),   S(233, 417),   S(301, 288),
  S(228, 293),  S(239, 353),   S(160, 373),   S(198, 348),  //
  S(32, -32),   S(166, -7),    S(135, -67),   S(135, -124),
  S(90, -139),  S(42, -100),   S(11, -49),    S(-53, -49),  //
  S(-30, -72),  S(-7, -68),    S(3, -111),    S(-15, -126),
  S(-24, -134), S(-60, -133),  S(-97, -83),   S(-127, -63),  //
  S(-41, -128), S(-18, -99),   S(-29, -135),  S(-44, -136),
  S(-62, -148), S(-84, -135),  S(-133, -83),  S(-155, -96),  //
  S(-59, -155), S(14, -153),   S(-43, -106),  S(-75, -104),
  S(-87, -118), S(-129, -124), S(-140, -109), S(-178, -113),  //
  S(-34, -154), S(96, -149),   S(56, -115),   S(-9, -97),
  S(-55, -110), S(-86, -118),  S(-114, -90),  S(-142, -106),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
  S(-379, -60), S(-333, 55),  S(-406, 232), S(-137, 95),
  S(-269, 111), S(-361, 139), S(-558, 76),  S(-516, 53),  //
  S(3, 11),     S(76, 23),    S(175, -47),  S(114, 26),
  S(120, 27),   S(49, 5),     S(0, 16),     S(-22, -22),  //
  S(62, -12),   S(107, 40),   S(196, 30),   S(144, 43),
  S(157, 31),   S(66, 41),    S(65, 22),    S(-35, 26),  //
  S(94, 28),    S(80, 57),    S(110, 64),   S(115, 84),
  S(115, 72),   S(69, 76),    S(32, 28),    S(24, 21),  //
  S(101, 8),    S(104, 8),    S(100, 38),   S(81, 47),
  S(75, 60),    S(61, 59),    S(35, 22),    S(22, -38),  //
  S(6, -16),    S(27, -26),   S(6, -11),    S(29, 34),
  S(37, 33),    S(-22, 9),    S(-4, -32),   S(-48, -28),  //
  S(6, 14),     S(24, -25),   S(15, -33),   S(11, -12),
  S(4, -21),    S(-23, -35),  S(-5, -44),   S(-77, -106),  //
  S(-46, -63),  S(-8, -30),   S(-1, -46),   S(13, -32),
  S(7, -26),    S(-38, -63),  S(-53, -48),  S(-91, -88),  //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
  S(-138, 101), S(-149, 62),  S(-382, 88),  S(-296, 121),
  S(-226, 115), S(-410, 146), S(-120, 114), S(-87, 107),  //
  S(46, -11),   S(22, 51),    S(32, 39),    S(22, 26),
  S(12, 40),    S(23, 45),    S(2, 43),     S(-28, 47),  //
  S(51, 52),    S(111, 41),   S(224, 24),   S(126, 29),
  S(106, 30),   S(87, 48),    S(132, 24),   S(23, 51),  //
  S(73, 1),     S(65, 48),    S(127, 31),   S(132, 57),
  S(140, 57),   S(70, 56),    S(48, 44),    S(3, 36),  //
  S(69, -21),   S(88, 7),     S(88, 27),    S(103, 43),
  S(87, 65),    S(47, 54),    S(28, 14),    S(27, -31),  //
  S(93, -20),   S(116, -14),  S(128, -7),   S(71, 31),
  S(60, 41),    S(42, 41),    S(78, -6),    S(59, -30),  //
  S(90, -46),   S(123, -41),  S(100, -40),  S(77, -8),
  S(62, -29),   S(64, -32),   S(32, -18),   S(74, -62),  //
  S(66, -28),   S(60, 0),     S(53, -5),    S(72, -40),
  S(86, -50),   S(61, -27),   S(71, -43),   S(51, -26),  //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
  S(148, 41),  S(208, 45),  S(131, 73),  S(143, 69),
  S(160, 49),  S(106, 62),  S(115, 69),  S(127, 71),  //
  S(84, 88),   S(169, 65),  S(230, 49),  S(173, 84),
  S(183, 74),  S(138, 82),  S(91, 95),   S(66, 107),  //
  S(67, 68),   S(207, 36),  S(250, 21),  S(277, 11),
  S(227, 24),  S(145, 65),  S(158, 53),  S(34, 106),  //
  S(17, 61),   S(86, 52),   S(126, 46),  S(179, 1),
  S(144, 27),  S(74, 79),   S(47, 75),   S(-30, 90),  //
  S(-61, 18),  S(17, 26),   S(11, 35),   S(18, 33),
  S(13, 28),   S(-20, 76),  S(-47, 70),  S(-69, 59),  //
  S(-91, -1),  S(-20, -29), S(-25, -5),  S(-38, 3),
  S(-14, -18), S(-66, 32),  S(-72, 19),  S(-90, 12),  //
  S(-147, 5),  S(-52, -43), S(-27, -35), S(-16, -36),
  S(-23, -30), S(-38, -16), S(-53, -37), S(-97, -22),  //
  S(-123, 14), S(-76, 21),  S(-24, -15), S(7, -29),
  S(-1, -16),  S(-12, -9),  S(-33, -16), S(-69, -1),  //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
  S(62, 75),   S(78, 52),    S(86, 53),   S(-38, 189),
  S(49, 91),   S(-25, 131),  S(52, 38),   S(1, 67),  //
  S(43, 123),  S(-28, 203),  S(-33, 258), S(-108, 283),
  S(-91, 235), S(-108, 243), S(-45, 140), S(-12, 79),  //
  S(-4, 158),  S(84, 151),   S(36, 216),  S(22, 218),
  S(-20, 205), S(-57, 210),  S(16, 108),  S(-20, 75),  //
  S(48, 75),   S(38, 158),   S(6, 187),   S(16, 233),
  S(-9, 220),  S(-15, 152),  S(2, 83),    S(0, 38),  //
  S(9, 107),   S(49, 65),    S(22, 129),  S(2, 176),
  S(-16, 167), S(-17, 127),  S(-8, 54),   S(-10, 8),  //
  S(24, -70),  S(37, -18),   S(32, 57),   S(-10, 86),
  S(12, 32),   S(5, 48),     S(11, -26),  S(-6, -11),  //
  S(10, -163), S(46, -281),  S(33, -140), S(50, -64),
  S(21, -44),  S(42, -122),  S(19, -53),  S(7, -55),  //
  S(-47, -55), S(24, -326),  S(25, -331), S(61, -257),
  S(59, -173), S(66, -213),  S(43, -159), S(-10, -68),  //
};
inline const std::array<PParam, 64> KING_PSQT = {
  S(-68, -420), S(141, -46),  S(-57, 24),  S(-134, 56),  S(0, 0), S(0, 0), S(0, 0), S(0, 0),  //
  S(247, -136), S(-42, 131),  S(-23, 122), S(117, 61),   S(0, 0), S(0, 0), S(0, 0), S(0, 0),  //
  S(-28, 42),   S(35, 127),   S(50, 106),  S(60, 59),    S(0, 0), S(0, 0), S(0, 0), S(0, 0),  //
  S(-257, 73),  S(7, 92),     S(7, 92),    S(-49, 72),   S(0, 0), S(0, 0), S(0, 0), S(0, 0),  //
  S(-207, 20),  S(-66, 64),   S(-34, 65),  S(-116, 104), S(0, 0), S(0, 0), S(0, 0), S(0, 0),  //
  S(-120, -12), S(21, 12),    S(-60, 61),  S(-103, 86),  S(0, 0), S(0, 0), S(0, 0), S(0, 0),  //
  S(101, -103), S(85, -28),   S(6, 14),    S(-71, 56),   S(0, 0), S(0, 0), S(0, 0), S(0, 0),  //
  S(-25, -147), S(101, -117), S(11, -85),  S(-9, -77),   S(0, 0), S(0, 0), S(0, 0), S(0, 0),  //
};
// clang-format on
}
