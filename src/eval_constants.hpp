#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(302, 319);
inline const PParam KNIGHT_MAT = S(1120, 907);
inline const PParam BISHOP_MAT = S(1228, 955);
inline const PParam ROOK_MAT   = S(1713, 1685);
inline const PParam QUEEN_MAT  = S(3655, 2884);
inline const PParam TEMPO_VAL  = S(59, 15);

inline const PParam BISHOP_PAIR_VAL  = S(80, 177);
inline const PParam ROOK_OPEN_VAL  = S(103, -30);
inline const PParam ROOK_SEMIOPEN_VAL  = S(39, 12);

inline const PParam DOUBLED_PAWN_VAL = S(-39, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);
inline const PParam OUTPOST_KNIGHT_VAL = S(42, 14);
inline const PParam OUTPOST_BISHOP_VAL = S(3, 2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(19, 20), S(62, 33), S(78, 70), S(197, 137), S(570, 242), S(942, 1138),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(63, 44), S(61, 30), S(66, 56), S(147, 120), S(698, -87),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-71, -101), S(-59, -83), S(-32, -7), S(24, 71), S(55, 210), S(301, 310),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(52, -46), S(37, -7), S(18, 28), S(20, 76), S(87, 153), S(144, 296),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(18, -45), S(3, 3), S(-2, -23), S(-2, -44), S(-8, -94), S(-190, -146),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(13, 101), S(-21, 89), S(-13, 38), S(0, 8), S(10, 12), S(39, 11), S(17, 0),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-186, -50), S(32, -4), S(-8, 44), S(13, 74), S(18, 99), S(38, 98), S(-10, 118),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-237, -227), S(-129, -63), S(-70, -9), S(-25, 24), S(24, 39), S(53, 78), S(93, 74), S(131, 75), S(180, 17),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-233, -278), S(-159, -93), S(-83, -32), S(-48, 16), S(-16, 46), S(0, 66), S(17, 80), S(33, 83), S(49, 86), S(58, 78), S(76, 63), S(136, 9), S(160, -18), S(216, -52),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-319, -249), S(-154, -86), S(-100, -22), S(-69, -13), S(-42, 10), S(-28, 33), S(-10, 45), S(7, 52), S(25, 65), S(43, 74), S(60, 76), S(72, 79), S(93, 83), S(103, 70), S(248, -57),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-980, -885), S(-249, -650), S(-151, -522), S(-99, -308), S(-90, -106), S(-52, 1), S(-48, 109), S(-24, 123), S(-19, 178), S(-6, 203), S(1, 227), S(7, 242), S(25, 234), S(35, 246), S(42, 241), S(55, 236), S(61, 228), S(60, 235), S(87, 190), S(109, 153), S(123, 134), S(165, 68), S(179, 60), S(341, -115), S(373, -156), S(618, -313), S(418, -212), S(618, -321),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(443, 8), S(100, -124), S(-3, -34), S(-19, 4), S(-47, 7), S(-82, 12), S(-60, 14), S(-70, 8), S(-72, -40),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(81, -30), S(151, -75),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(36, -4), S(140, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -48), S(53, -64), S(104, -64), S(161, -129),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-39, 31), S(-59, 42), S(-2, -5), S(160, -95), S(359, -240),
};

inline const PParam PAWN_THREAT_KNIGHT = S(209, 56);
inline const PParam PAWN_THREAT_BISHOP = S(208, 110);
inline const PParam PAWN_THREAT_ROOK   = S(192, 54);
inline const PParam PAWN_THREAT_QUEEN  = S(171, -59);

inline const PParam KNIGHT_THREAT_BISHOP = S(104, 69);
inline const PParam KNIGHT_THREAT_ROOK   = S(243, 1);
inline const PParam KNIGHT_THREAT_QUEEN  = S(154, -70);

inline const PParam BISHOP_THREAT_KNIGHT = S(109, 25);
inline const PParam BISHOP_THREAT_ROOK   = S(243, 49);
inline const PParam BISHOP_THREAT_QUEEN  = S(190, 47);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-2, -11), S(-6, -2), S(-5, -12), S(-10, -22), S(-16, -27), S(-20, -34), S(-21, -41), S(-27, -40), S(-36, -47),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(106, 160),    S(96, 207),     S(169, 171),    S(231, 52),     S(176, 46),     S(161, 111),    S(55, 135),     S(114, 113),    //
    S(71, 39),      S(190, 65),     S(166, 8),      S(169, -49),    S(121, -65),    S(65, -17),     S(25, 30),      S(-30, 34),     //
    S(-8, 7),       S(15, 11),      S(35, -34),     S(23, -48),     S(5, -52),      S(-37, -45),    S(-81, 3),      S(-111, 25),    //
    S(-32, -41),    S(-8, -13),     S(-13, -46),    S(-26, -45),    S(-52, -53),    S(-77, -43),    S(-129, 5),     S(-153, -5),    //
    S(-37, -70),    S(31, -67),     S(-16, -23),    S(-47, -20),    S(-68, -28),    S(-108, -30),   S(-127, -17),   S(-156, -24),   //
    S(-26, -65),    S(104, -60),    S(61, -25),     S(2, -6),       S(-34, -18),    S(-70, -23),    S(-98, 0),      S(-135, -12),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-368, -151),  S(-324, 64),    S(-435, 241),   S(-98, 71),     S(-227, 94),    S(-317, 104),   S(-541, 91),    S(-511, -10),   //
    S(25, 1),       S(88, 12),      S(186, -55),    S(135, 8),      S(136, 16),     S(71, -7),      S(15, 13),      S(-1, -30),     //
    S(42, -35),     S(81, 18),      S(168, 8),      S(122, 29),     S(122, 18),     S(36, 27),      S(33, 0),       S(-60, 3),      //
    S(87, 5),       S(58, 38),      S(91, 42),      S(76, 67),      S(86, 53),      S(48, 48),      S(20, 6),       S(13, 3),       //
    S(77, -8),      S(97, -12),     S(82, 15),      S(61, 28),      S(51, 39),      S(43, 35),      S(25, 2),       S(16, -52),     //
    S(27, -19),     S(49, -32),     S(41, -14),     S(53, 30),      S(60, 27),      S(3, 5),        S(12, -32),     S(-20, -37),    //
    S(35, -3),      S(55, -34),     S(35, -28),     S(35, -9),      S(22, -15),     S(-5, -35),     S(10, -48),     S(-45, -116),   //
    S(-7, -53),     S(27, -10),     S(44, -36),     S(52, -29),     S(44, -20),     S(-1, -52),     S(-13, -25),    S(-59, -77),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-158, 70),    S(-181, 53),    S(-424, 79),    S(-302, 92),    S(-252, 96),    S(-420, 122),   S(-164, 100),   S(-114, 73),    //
    S(11, -40),     S(-2, 41),      S(14, 22),      S(-3, 24),      S(-29, 41),     S(8, 33),       S(-11, 23),     S(-52, 21),     //
    S(38, 17),      S(96, 23),      S(181, 32),     S(110, 28),     S(89, 30),      S(60, 44),      S(113, 16),     S(-1, 21),      //
    S(42, -21),     S(48, 38),      S(103, 34),     S(110, 61),     S(121, 59),     S(52, 56),      S(22, 39),      S(-21, 18),     //
    S(48, -49),     S(65, 0),       S(70, 24),      S(76, 48),      S(70, 65),      S(21, 56),      S(9, 14),       S(-3, -44),     //
    S(67, -46),     S(107, -22),    S(113, -9),     S(56, 33),      S(37, 38),      S(36, 35),      S(65, -9),      S(31, -42),     //
    S(54, -82),     S(105, -57),    S(75, -44),     S(47, -14),     S(37, -29),     S(39, -40),     S(21, -26),     S(40, -92),     //
    S(52, -65),     S(38, -18),     S(43, -11),     S(54, -46),     S(62, -56),     S(58, -14),     S(51, -43),     S(33, -45),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(108, 9),      S(172, 8),      S(101, 38),     S(103, 32),     S(109, 21),     S(59, 34),      S(65, 37),      S(75, 42),      //
    S(16, 67),      S(102, 42),     S(176, 20),     S(103, 62),     S(119, 50),     S(67, 59),      S(5, 78),       S(-2, 84),      //
    S(4, 44),       S(153, 2),      S(182, -2),     S(182, -6),     S(137, 3),      S(63, 43),      S(81, 31),      S(-37, 82),     //
    S(-32, 37),     S(34, 29),      S(65, 20),      S(93, -18),     S(62, 7),       S(-1, 54),      S(-22, 55),     S(-83, 64),     //
    S(-97, -10),    S(-20, -9),     S(-36, 6),      S(-50, 8),      S(-56, 4),      S(-75, 45),     S(-103, 42),    S(-118, 33),    //
    S(-118, -31),   S(-47, -60),    S(-51, -31),    S(-72, -29),    S(-54, -47),    S(-104, 5),     S(-107, -10),   S(-127, -12),   //
    S(-177, -20),   S(-79, -81),    S(-54, -66),    S(-50, -64),    S(-57, -59),    S(-76, -43),    S(-97, -66),    S(-128, -47),   //
    S(-142, -16),   S(-111, -12),   S(-57, -48),    S(-32, -66),    S(-46, -51),    S(-59, -39),    S(-75, -47),    S(-92, -29),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(44, 37),      S(81, 3),       S(85, 9),       S(-33, 138),    S(38, 55),      S(-18, 83),     S(47, 0),       S(-14, 22),     //
    S(30, 75),      S(-42, 169),    S(-47, 224),    S(-135, 257),   S(-106, 201),   S(-117, 201),   S(-67, 106),    S(-33, 46),     //
    S(-9, 104),     S(79, 100),     S(17, 180),     S(0, 189),      S(-39, 171),    S(-73, 172),    S(-1, 66),      S(-35, 38),     //
    S(39, 35),      S(33, 111),     S(2, 140),      S(-5, 202),     S(-24, 183),    S(-36, 122),    S(-4, 36),      S(-5, -8),      //
    S(6, 59),       S(38, 22),      S(10, 94),      S(-21, 142),    S(-35, 131),    S(-31, 91),     S(-18, 13),     S(-13, -37),    //
    S(25, -107),    S(44, -58),     S(47, 7),       S(-6, 34),      S(6, -10),      S(10, -6),      S(19, -72),     S(0, -69),      //
    S(13, -213),    S(45, -313),    S(33, -180),    S(49, -106),    S(23, -88),     S(41, -160),    S(15, -97),     S(0, -95),      //
    S(-40, -135),   S(20, -386),    S(17, -375),    S(43, -281),    S(46, -198),    S(50, -244),    S(37, -205),    S(-16, -127),   //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-140, -375),  S(94, -17),     S(-65, 35),     S(-175, 60),    S(20, -13),     S(20, -13),     S(20, -13),     S(20, -13),     //
    S(196, -113),   S(7, 147),      S(23, 132),     S(128, 62),     S(20, -13),     S(20, -13),     S(20, -13),     S(20, -13),     //
    S(-35, 58),     S(69, 137),     S(107, 106),    S(90, 61),      S(20, -13),     S(20, -13),     S(20, -13),     S(20, -13),     //
    S(-256, 82),    S(31, 97),      S(22, 94),      S(-32, 79),     S(20, -13),     S(20, -13),     S(20, -13),     S(20, -13),     //
    S(-229, 40),    S(-44, 70),     S(-29, 75),     S(-111, 110),   S(20, -13),     S(20, -13),     S(20, -13),     S(20, -13),     //
    S(-134, 9),     S(58, 12),      S(-32, 63),     S(-75, 89),     S(20, -13),     S(20, -13),     S(20, -13),     S(20, -13),     //
    S(84, -82),     S(138, -41),    S(49, 5),       S(-32, 49),     S(20, -13),     S(20, -13),     S(20, -13),     S(20, -13),     //
    S(-40, -110),   S(90, -100),    S(-9, -64),     S(-26, -63),    S(20, -13),     S(20, -13),     S(20, -13),     S(20, -13),     //
};
// Epoch duration: 63.506s
// clang-format on
}
