#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(304, 324);
inline const PParam KNIGHT_MAT = S(1132, 917);
inline const PParam BISHOP_MAT = S(1252, 972);
inline const PParam ROOK_MAT   = S(1744, 1693);
inline const PParam QUEEN_MAT  = S(3681, 2886);
inline const PParam TEMPO_VAL  = S(58, 15);

inline const PParam BISHOP_PAIR_VAL  = S(79, 178);
inline const PParam DOUBLED_PAWN_VAL = S(-32, -76);

inline const PParam POTENTIAL_CHECKER_VAL = S(-70, -4);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(17, 21), S(62, 33), S(79, 69), S(193, 138), S(555, 249), S(923, 1100)
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(63, 45), S(62, 30), S(67, 56), S(149, 120), S(701, -87)
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-67, -95), S(-57, -75), S(-34, 1), S(20, 80), S(55, 215), S(278, 314)
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(44, -43), S(30, -5), S(16, 28), S(21, 76), S(93, 153), S(153, 294)
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(17, -47), S(0, 2), S(-2, -26), S(-2, -47), S(-15, -96), S(-211, -150)
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(18, 95), S(-17, 83), S(-12, 32), S(0, 3), S(11, 6), S(41, 5), S(19, -5)
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-172, -55), S(34, -7), S(-5, 40), S(12, 72), S(16, 97), S(36, 97), S(-11, 116)
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-242, -226), S(-134, -62), S(-74, -9), S(-28, 24), S(22, 39), S(52, 78), S(92, 73), S(131, 73),
    S(180, 14)
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-247, -283), S(-173, -97), S(-97, -36), S(-63, 13), S(-33, 44), S(-17, 64), S(-1, 78), S(15, 82),
    S(31, 84), S(40, 75), S(59, 59), S(121, 4), S(150, -26), S(211, -64)
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-345, -267), S(-181, -85), S(-129, -22), S(-95, -12), S(-65, 9), S(-46, 31), S(-23, 42), S(4, 45),
    S(29, 56), S(56, 63), S(82, 63), S(106, 62), S(140, 60), S(158, 43), S(302, -84)
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-1037, -880), S(-300, -615), S(-201, -498), S(-147, -290), S(-137, -93), S(-99, 13), S(-94, 119), S(-68, 130),
    S(-63, 185), S(-50, 209), S(-43, 234), S(-38, 251), S(-20, 244), S(-9, 256), S(-3, 252), S(10, 249),
    S(16, 240), S(16, 246), S(44, 199), S(67, 162), S(82, 143), S(126, 77), S(143, 64), S(309, -114),
    S(344, -160), S(568, -305), S(278, -142), S(307, -171)
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(399, 49), S(87, -114), S(-17, -23), S(-35, 16), S(-61, 19), S(-97, 25), S(-79, 28), S(-95, 24),
    S(-104, -22)
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(51, -17), S(93, -46)
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(33, -3), S(62, -11)
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -42), S(65, -65), S(104, -65), S(242, -144)
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-2, 10), S(-35, 18), S(-11, 19), S(16, 15), S(117, -37)
};

inline const PParam PAWN_THREAT_KNIGHT = S(233, 66);
inline const PParam PAWN_THREAT_BISHOP = S(208, 112);
inline const PParam PAWN_THREAT_ROOK   = S(196, 52);
inline const PParam PAWN_THREAT_QUEEN  = S(166, -53);

inline const PParam KNIGHT_THREAT_BISHOP = S(103, 70);
inline const PParam KNIGHT_THREAT_ROOK   = S(246, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(150, -65);

inline const PParam BISHOP_THREAT_KNIGHT = S(105, 26);
inline const PParam BISHOP_THREAT_ROOK   = S(242, 49);
inline const PParam BISHOP_THREAT_QUEEN  = S(187, 50);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-3, -10), S(-6, -2), S(-5, -12), S(-10, -22), S(-15, -27), S(-20, -34), S(-21, -42), S(-26, -42),
    S(-34, -52)
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(103, 161), S(104, 207), S(165, 173), S(216, 57), S(165, 47), S(156, 112), S(55, 135), S(109, 110),
    S(45, 40), S(171, 64), S(139, 9), S(138, -47), S(96, -67), S(42, -19), S(8, 27), S(-54, 32),
    S(-21, 3), S(5, 6), S(17, -36), S(5, -51), S(-8, -58), S(-47, -51), S(-90, -2), S(-124, 18),
    S(-47, -44), S(-23, -15), S(-30, -48), S(-42, -48), S(-64, -59), S(-85, -49), S(-138, -1), S(-164, -12),
    S(-47, -76), S(22, -73), S(-25, -29), S(-54, -26), S(-73, -35), S(-112, -38), S(-132, -24), S(-163, -32),
    S(-35, -70), S(97, -66), S(53, -31), S(-3, -12), S(-36, -26), S(-72, -31), S(-99, -7), S(-138, -22)
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-368, -165), S(-335, 57), S(-443, 234), S(-102, 60), S(-240, 89), S(-332, 98), S(-554, 83), S(-510, -25),
    S(16, -6), S(81, 3), S(186, -68), S(144, -6), S(136, 5), S(69, -18), S(8, 4), S(-12, -38),
    S(94, -38), S(136, 14), S(225, 5), S(190, 19), S(184, 12), S(83, 28), S(76, 2), S(-18, 4),
    S(113, 16), S(109, 35), S(121, 52), S(104, 78), S(108, 67), S(80, 57), S(52, 12), S(37, 14),
    S(82, 11), S(95, 10), S(80, 38), S(57, 52), S(58, 57), S(50, 53), S(31, 20), S(36, -43),
    S(9, -27), S(33, -40), S(26, -22), S(38, 23), S(43, 21), S(-13, -3), S(-6, -40), S(-36, -47),
    S(18, -14), S(40, -42), S(17, -36), S(17, -17), S(7, -25), S(-25, -43), S(-6, -57), S(-62, -128),
    S(-26, -63), S(14, -21), S(32, -48), S(45, -42), S(37, -34), S(-10, -65), S(-25, -39), S(-79, -87)
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-181, 59), S(-198, 42), S(-432, 63), S(-315, 79), S(-273, 85), S(-437, 109), S(-183, 89), S(-131, 62),
    S(-3, -50), S(-20, 30), S(7, 7), S(-15, 10), S(-36, 25), S(1, 18), S(-25, 12), S(-67, 12),
    S(66, -8), S(115, 2), S(207, 11), S(130, 8), S(103, 12), S(69, 29), S(120, 0), S(7, 4),
    S(28, -27), S(13, 40), S(87, 27), S(87, 57), S(109, 51), S(40, 47), S(8, 30), S(-34, 10),
    S(21, -51), S(53, -9), S(43, 20), S(53, 43), S(45, 61), S(6, 47), S(-3, 5), S(-18, -51),
    S(50, -55), S(91, -33), S(100, -21), S(33, 24), S(18, 27), S(19, 23), S(50, -21), S(17, -55),
    S(37, -92), S(92, -69), S(62, -57), S(36, -28), S(18, -40), S(23, -53), S(5, -40), S(25, -105),
    S(34, -77), S(24, -31), S(32, -24), S(47, -61), S(58, -72), S(49, -29), S(39, -58), S(11, -56)
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(115, 2), S(163, 7), S(90, 38), S(105, 28), S(112, 17), S(66, 29), S(81, 29), S(93, 32),
    S(37, 54), S(113, 32), S(183, 11), S(132, 46), S(145, 36), S(94, 44), S(36, 62), S(23, 70),
    S(3, 43), S(147, 2), S(174, -2), S(186, -6), S(144, 2), S(69, 41), S(94, 25), S(-28, 77),
    S(-28, 32), S(37, 24), S(70, 16), S(121, -31), S(88, -5), S(22, 43), S(-5, 48), S(-71, 57),
    S(-105, -10), S(-24, -9), S(-37, 5), S(-36, 1), S(-41, -3), S(-65, 40), S(-94, 38), S(-116, 30),
    S(-134, -27), S(-56, -57), S(-57, -30), S(-64, -32), S(-49, -49), S(-97, 2), S(-105, -11), S(-132, -12),
    S(-189, -19), S(-80, -82), S(-58, -66), S(-45, -67), S(-50, -63), S(-72, -45), S(-95, -66), S(-137, -46),
    S(-156, -22), S(-120, -13), S(-67, -51), S(-30, -69), S(-39, -56), S(-54, -45), S(-76, -50), S(-106, -33)
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(56, 21), S(90, -12), S(102, -11), S(-1, 105), S(72, 22), S(-5, 64), S(56, -16), S(-3, 3),
    S(24, 71), S(-47, 166), S(-51, 215), S(-138, 249), S(-112, 198), S(-120, 195), S(-73, 103), S(-37, 42),
    S(-15, 96), S(53, 105), S(2, 177), S(-13, 191), S(-51, 171), S(-77, 168), S(-14, 68), S(-37, 34),
    S(19, 42), S(27, 106), S(-16, 145), S(-16, 202), S(-43, 190), S(-50, 124), S(-10, 35), S(-16, -4),
    S(1, 58), S(32, 20), S(8, 87), S(-22, 139), S(-39, 130), S(-40, 90), S(-29, 16), S(-16, -41),
    S(22, -118), S(40, -64), S(45, 2), S(-6, 27), S(4, -13), S(8, -12), S(15, -79), S(-4, -75),
    S(12, -221), S(44, -320), S(37, -191), S(50, -114), S(24, -97), S(39, -165), S(13, -105), S(-1, -108),
    S(-40, -146), S(26, -402), S(24, -395), S(57, -303), S(58, -215), S(60, -264), S(42, -223), S(-16, -140)
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-155, -377), S(54, -13), S(-96, 33), S(-206, 59), S(26, -18), S(26, -18), S(26, -18), S(26, -18),
    S(172, -115), S(-7, 142), S(11, 127), S(116, 57), S(26, -18), S(26, -18), S(26, -18), S(26, -18),
    S(-62, 57), S(48, 134), S(90, 102), S(75, 57), S(26, -18), S(26, -18), S(26, -18), S(26, -18),
    S(-279, 79), S(9, 94), S(-2, 93), S(-59, 79), S(26, -18), S(26, -18), S(26, -18), S(26, -18),
    S(-250, 37), S(-67, 68), S(-64, 78), S(-147, 113), S(26, -18), S(26, -18), S(26, -18), S(26, -18),
    S(-148, 4), S(37, 10), S(-62, 64), S(-110, 91), S(26, -18), S(26, -18), S(26, -18), S(26, -18),
    S(75, -90), S(129, -49), S(34, -1), S(-50, 45), S(26, -18), S(26, -18), S(26, -18), S(26, -18),
    S(-31, -125), S(114, -120), S(17, -82), S(3, -81), S(26, -18), S(26, -18), S(26, -18), S(26, -18)
};
// Epoch duration: 51.3923s
// Loss: 0.00246796
// clang-format on
}
