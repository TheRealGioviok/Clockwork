#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(289, 408);
inline const PParam KNIGHT_MAT = S(1062, 960);
inline const PParam BISHOP_MAT = S(1033, 1016);
inline const PParam ROOK_MAT   = S(1573, 1704);
inline const PParam QUEEN_MAT  = S(3565, 3061);
inline const PParam TEMPO_VAL  = S(56, 17);

inline const PParam BISHOP_PAIR_VAL  = S(77, 176);
inline const PParam DOUBLED_PAWN_VAL = S(-18, -82);

inline const PParam POTENTIAL_CHECKER_VAL = S(-77, -1);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(12, 21), S(48, 35), S(79, 66), S(206, 131), S(503, 281), S(1179, 1051),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(62, 44), S(58, 29), S(61, 54), S(143, 116), S(663, -86),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-61, -3), S(-47, 13), S(-21, 86), S(46, 160), S(94, 288), S(208, 82),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(51, -45), S(31, -3), S(12, 28), S(19, 73), S(83, 159), S(164, 276),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(25, -52), S(18, -7), S(-3, -25), S(-2, -47), S(-25, -87), S(-218, -145),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(5, 57), S(-35, 39), S(-23, -10), S(-10, -37), S(-4, -30), S(22, -34), S(3, -46),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-177, -95), S(21, -50), S(-7, -4), S(10, 26), S(15, 50), S(40, 47), S(-9, 70),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-279, -380), S(-132, -148), S(-52, -75), S(7, -27), S(54, -9), S(82, 32), S(117, 38), S(160, 39), S(203, -2),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-191, -492), S(-103, -267), S(-17, -106), S(40, -55), S(75, -20), S(99, 4), S(120, 18), S(133, 27), S(149, 32), S(161, 25), S(170, 22), S(223, -25), S(238, -49), S(318, -101),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-238, -318), S(-55, -188), S(-55, -82), S(-33, -57), S(7, -25), S(32, -6), S(52, 13), S(78, 16), S(103, 22), S(130, 30), S(160, 34), S(183, 34), S(213, 31), S(228, 20), S(365, -101),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-330, 68), S(-267, -833), S(-200, -751), S(-192, -555), S(-151, -336), S(-115, -250), S(-81, -134), S(-65, -56), S(-42, -42), S(-42, 16), S(-24, 26), S(-19, 55), S(-7, 59), S(6, 59), S(8, 74), S(23, 56), S(35, 52), S(38, 54), S(53, 30), S(66, -3), S(96, -34), S(111, -78), S(133, -92), S(296, -254), S(321, -318), S(645, -509), S(570, -501), S(1241, -849),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(502, 552), S(27, 330), S(-13, 462), S(-18, 476), S(-5, 483), S(-17, 475), S(6, 476), S(19, 461), S(34, 422),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(83, -31), S(154, -74),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(34, -4), S(143, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(73, -46), S(78, -74), S(117, -69), S(155, -127),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-40, 28), S(-57, 37), S(-3, -12), S(155, -100), S(343, -233),
};

inline const PParam PAWN_THREAT_KNIGHT = S(227, 70);
inline const PParam PAWN_THREAT_BISHOP = S(193, 98);
inline const PParam PAWN_THREAT_ROOK   = S(183, 54);
inline const PParam PAWN_THREAT_QUEEN  = S(150, -40);

inline const PParam KNIGHT_THREAT_BISHOP = S(96, 71);
inline const PParam KNIGHT_THREAT_ROOK   = S(238, 2);
inline const PParam KNIGHT_THREAT_QUEEN  = S(150, -72);

inline const PParam BISHOP_THREAT_KNIGHT = S(111, 25);
inline const PParam BISHOP_THREAT_ROOK   = S(234, 54);
inline const PParam BISHOP_THREAT_QUEEN  = S(184, 56);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(8, -10), S(6, -3), S(7, -13), S(1, -25), S(-5, -31), S(-12, -37), S(-15, -44), S(-23, -41), S(-30, -53),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(202, 398),    S(209, 442),    S(242, 417),    S(310, 291),    S(242, 296),    S(242, 358),    S(157, 375),    S(199, 346),    //
    S(22, -25),     S(139, -1),     S(103, -55),    S(112, -112),   S(70, -129),    S(18, -89),     S(-10, -43),    S(-63, -44),    //
    S(-27, -66),    S(-8, -62),     S(4, -104),     S(-12, -118),   S(-23, -125),   S(-60, -124),   S(-100, -76),   S(-125, -58),   //
    S(-34, -122),   S(-15, -93),    S(-21, -128),   S(-37, -127),   S(-56, -139),   S(-77, -128),   S(-129, -79),   S(-151, -92),   //
    S(-50, -149),   S(16, -142),    S(-37, -97),    S(-72, -92),    S(-82, -110),   S(-121, -117),  S(-136, -105),  S(-172, -107),  //
    S(-29, -148),   S(113, -147),   S(63, -109),    S(-6, -89),     S(-49, -103),   S(-83, -110),   S(-100, -85),   S(-141, -99),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-360, -67),   S(-317, 49),    S(-400, 237),   S(-128, 94),    S(-270, 116),   S(-352, 138),   S(-551, 84),    S(-480, 53),    //
    S(19, 12),      S(83, 25),      S(178, -47),    S(124, 23),     S(122, 28),     S(59, 0),       S(8, 19),       S(-3, -20),     //
    S(63, -7),      S(99, 40),      S(183, 24),     S(143, 39),     S(152, 27),     S(58, 36),      S(62, 20),      S(-35, 35),     //
    S(98, 29),      S(77, 54),      S(99, 57),      S(102, 78),     S(103, 66),     S(60, 68),      S(28, 28),      S(28, 25),      //
    S(101, 7),      S(101, 5),      S(89, 33),      S(67, 41),      S(64, 53),      S(61, 49),      S(37, 20),      S(44, -38),     //
    S(13, -15),     S(28, -29),     S(19, -21),     S(29, 28),      S(39, 25),      S(-14, 2),      S(2, -34),      S(-31, -30),    //
    S(15, 17),      S(35, -18),     S(10, -25),     S(6, -9),       S(1, -22),      S(-25, -35),    S(3, -39),      S(-59, -105),   //
    S(-42, -48),    S(-16, -21),    S(-3, -35),     S(8, -22),      S(4, -14),      S(-45, -48),    S(-62, -27),    S(-82, -72),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-116, 95),    S(-130, 54),    S(-366, 87),    S(-296, 122),   S(-228, 119),   S(-405, 144),   S(-104, 110),   S(-69, 97),     //
    S(59, -15),     S(37, 53),      S(37, 46),      S(34, 33),      S(14, 49),      S(33, 49),      S(5, 47),       S(-11, 39),     //
    S(60, 51),      S(113, 50),     S(221, 40),     S(132, 41),     S(120, 42),     S(87, 59),      S(136, 35),     S(28, 50),      //
    S(76, 1),       S(72, 60),      S(126, 49),     S(137, 75),     S(141, 75),     S(74, 73),      S(51, 55),      S(10, 39),      //
    S(77, -21),     S(89, 14),      S(94, 41),      S(100, 61),     S(91, 83),      S(54, 68),      S(36, 28),      S(34, -25),     //
    S(101, -25),    S(128, -8),     S(137, 0),      S(75, 44),      S(62, 54),      S(58, 54),      S(96, 2),       S(76, -29),     //
    S(104, -51),    S(119, -36),    S(98, -30),     S(69, 3),       S(61, -17),     S(61, -20),     S(40, -9),      S(88, -64),     //
    S(91, -18),     S(60, 4),       S(48, 2),       S(72, -33),     S(82, -41),     S(77, -9),      S(69, -22),     S(74, -3),      //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(145, 43),     S(209, 42),     S(124, 77),     S(133, 70),     S(158, 48),     S(102, 64),     S(118, 66),     S(126, 69),     //
    S(84, 87),      S(166, 65),     S(229, 48),     S(172, 83),     S(184, 73),     S(136, 80),     S(88, 95),      S(66, 106),     //
    S(62, 70),      S(195, 37),     S(234, 23),     S(264, 14),     S(221, 23),     S(135, 66),     S(150, 53),     S(32, 105),     //
    S(13, 64),      S(79, 56),      S(122, 46),     S(166, 4),      S(134, 29),     S(66, 78),      S(42, 77),      S(-30, 89),     //
    S(-60, 23),     S(18, 26),      S(14, 36),      S(15, 34),      S(10, 30),      S(-15, 76),     S(-43, 71),     S(-64, 62),     //
    S(-95, 3),      S(-18, -27),    S(-18, -6),     S(-35, 0),      S(-12, -19),    S(-59, 29),     S(-65, 18),     S(-86, 15),     //
    S(-153, 14),    S(-58, -38),    S(-30, -30),    S(-13, -34),    S(-18, -29),    S(-33, -15),    S(-52, -35),    S(-97, -17),    //
    S(-120, 15),    S(-66, 16),     S(-18, -19),    S(17, -34),     S(8, -21),      S(-5, -14),     S(-27, -21),    S(-66, -2),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(66, 71),      S(82, 51),      S(85, 56),      S(-37, 191),    S(44, 95),      S(-27, 139),    S(52, 41),      S(6, 63),       //
    S(53, 112),     S(-31, 207),    S(-35, 268),    S(-106, 287),   S(-90, 235),    S(-113, 252),   S(-46, 143),    S(-4, 73),      //
    S(-6, 158),     S(75, 159),     S(18, 234),     S(8, 232),      S(-31, 217),    S(-73, 226),    S(11, 114),     S(-21, 80),     //
    S(47, 79),      S(31, 163),     S(0, 196),      S(5, 244),      S(-18, 229),    S(-20, 157),    S(0, 85),       S(5, 35),       //
    S(16, 107),     S(52, 62),      S(22, 133),     S(-7, 183),     S(-27, 180),    S(-16, 131),    S(-10, 62),     S(-1, 10),      //
    S(35, -80),     S(46, -23),     S(47, 48),      S(-7, 86),      S(13, 33),      S(17, 41),      S(26, -31),     S(12, -23),     //
    S(19, -182),    S(44, -282),    S(27, -131),    S(49, -60),     S(21, -40),     S(42, -117),    S(23, -54),     S(12, -57),     //
    S(-22, -95),    S(38, -346),    S(35, -351),    S(66, -259),    S(67, -176),    S(72, -214),    S(49, -164),    S(1, -93),      //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-55, -405),   S(135, -43),    S(-48, 24),     S(-146, 59),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(233, -133),   S(-31, 123),    S(-20, 119),    S(128, 57),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-39, 49),     S(49, 122),     S(58, 103),     S(67, 57),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-249, 78),    S(11, 93),      S(10, 93),      S(-44, 73),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-198, 26),    S(-55, 66),     S(-27, 67),     S(-116, 107),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-109, -8),    S(36, 14),      S(-46, 62),     S(-95, 89),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(103, -98),    S(92, -19),     S(8, 20),       S(-69, 61),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(13, -147),    S(101, -112),   S(7, -78),      S(-16, -71),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on
}
