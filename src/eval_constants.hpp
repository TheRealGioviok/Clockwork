#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(347, 469);
inline const PScore KNIGHT_MAT = S(1120, 834);
inline const PScore BISHOP_MAT = S(1182, 936);
inline const PScore ROOK_MAT   = S(1636, 1519);
inline const PScore QUEEN_MAT  = S(3726, 2702);
inline const PScore TEMPO_VAL  = S(43, 8);

inline const PScore BISHOP_PAIR_VAL  = S(98, 164);
inline const PScore DOUBLED_PAWN_VAL = S(-70, -125);

inline const PScore POTENTIAL_CHECKER_VAL = S(-66, -10);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(14, -23), S(7, 12), S(55, 51), S(150, 153), S(697, 410), S(1239, 1531),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-132, -232), S(-65, -113), S(-15, -50), S(24, -22), S(65, -5), S(99, 22), S(143, 9), S(176, 7), S(231, -67),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-175, -255), S(-95, -163), S(-38, -142), S(-4, -107), S(36, -77), S(69, -51), S(88, -45), S(103, -47), S(114, -34), S(126, -49), S(139, -58), S(176, -101), S(226, -146), S(297, -154),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-238, -424), S(-131, -111), S(-74, -43), S(-34, -46), S(4, -33), S(32, -13), S(56, 8), S(79, 6), S(112, 3), S(144, 10), S(178, 7), S(204, 7), S(245, -5), S(257, -14), S(404, -156),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-220, 41), S(-490, 184), S(-133, -381), S(-109, -235), S(-86, -346), S(-87, -240), S(-74, -150), S(-60, -94), S(-43, -67), S(-41, -27), S(-28, 1), S(-20, 12), S(-12, 18), S(1, 28), S(11, 21), S(13, 39), S(23, 14), S(50, -16), S(62, -38), S(67, -53), S(116, -127), S(165, -194), S(284, -281), S(298, -323), S(359, -420), S(608, -588), S(641, -599), S(980, -870),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(-87, 446), S(145, 477), S(77, 500), S(26, 512), S(16, 487), S(-13, 474), S(-12, 474), S(-24, 450), S(-7, 398),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(80, -28), S(142, -63),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(31, -3), S(112, -33),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(73, -39), S(77, -87), S(124, -77), S(126, -98),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-47, 54), S(-73, 76), S(-16, 18), S(123, -67), S(293, -179),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(156, 317),    S(204, 349),    S(232, 349),    S(249, 240),    S(244, 145),    S(153, 234),    S(242, 295),    S(248, 263),    //
    S(-27, 76),     S(83, 104),     S(98, 50),      S(132, -7),     S(103, -24),    S(32, 31),      S(20, 52),      S(-68, 52),     //
    S(-101, -66),   S(-34, -73),    S(-16, -107),   S(-12, -133),   S(-26, -137),   S(-73, -111),   S(-87, -82),    S(-148, -58),   //
    S(-99, -147),   S(-59, -125),   S(-22, -161),   S(-29, -163),   S(-47, -174),   S(-84, -153),   S(-132, -106),  S(-175, -113),  //
    S(-74, -187),   S(28, -191),    S(-14, -164),   S(-20, -155),   S(-58, -157),   S(-96, -149),   S(-102, -133),  S(-150, -145),  //
    S(-112, -172),  S(32, -174),    S(-6, -163),    S(-40, -126),   S(-85, -124),   S(-105, -130),  S(-101, -108),  S(-180, -121),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-349, -108),  S(-347, 111),   S(-711, 312),   S(124, -49),    S(-66, 45),     S(-350, 46),    S(-367, 3),     S(-450, -27),   //
    S(-55, -9),     S(0, 27),       S(164, -50),    S(220, -90),    S(229, -77),    S(102, -22),    S(-70, 32),     S(-70, -13),    //
    S(32, 38),      S(124, 33),     S(197, 20),     S(220, 12),     S(174, 35),     S(107, 42),     S(85, 20),      S(-14, 25),     //
    S(127, -16),    S(56, 45),      S(117, 68),     S(88, 100),     S(110, 73),     S(96, 73),      S(24, 42),      S(49, 13),      //
    S(80, 17),      S(75, 20),      S(81, 58),      S(80, 61),      S(84, 52),      S(54, 61),      S(56, -1),      S(34, 16),      //
    S(-17, -4),     S(52, -18),     S(7, 5),        S(39, 37),      S(53, 48),      S(-20, 32),     S(14, 1),       S(-53, -2),     //
    S(14, -37),     S(5, -9),       S(30, -34),     S(17, 8),       S(-2, 20),      S(-6, -14),     S(-12, -20),    S(-28, -122),   //
    S(-31, -29),    S(0, 16),       S(-9, -42),     S(28, -45),     S(10, -9),      S(-38, -93),    S(-23, -13),    S(-65, -130),   //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-25, 14),     S(-221, 47),    S(-424, 72),    S(22, 25),      S(-275, 104),   S(-306, 96),    S(-204, 151),   S(-82, 61),     //
    S(-30, 23),     S(4, 21),       S(72, 1),       S(-21, -1),     S(15, -8),      S(3, 23),       S(12, 23),      S(-45, 25),     //
    S(23, 15),      S(91, 41),      S(170, 17),     S(145, -5),     S(133, 4),      S(88, 44),      S(62, 6),       S(1, -2),       //
    S(19, -32),     S(62, 16),      S(88, 51),      S(119, 43),     S(141, 37),     S(64, 23),      S(54, 4),       S(-18, -4),     //
    S(66, -60),     S(51, -3),      S(76, 0),       S(99, 34),      S(93, 43),      S(43, 29),      S(18, -10),     S(54, -59),     //
    S(46, -32),     S(93, -27),     S(90, -19),     S(38, 32),      S(49, 14),      S(40, 22),      S(65, 0),       S(9, -19),      //
    S(29, -68),     S(81, -44),     S(31, -13),     S(23, -11),     S(2, -9),       S(56, -36),     S(36, -24),     S(55, -58),     //
    S(37, -30),     S(-13, 5),      S(24, 0),       S(0, -32),      S(-13, -31),    S(46, -8),      S(20, -54),     S(8, -42),      //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(205, -1),     S(163, 34),     S(109, 68),     S(162, 33),     S(197, 5),      S(114, 32),     S(96, 38),      S(150, 38),     //
    S(49, 94),      S(67, 82),      S(223, 35),     S(170, 42),     S(178, 27),     S(127, 54),     S(53, 88),      S(31, 89),      //
    S(-10, 82),     S(134, 24),     S(186, 13),     S(234, -23),    S(196, -26),    S(117, 27),     S(109, 29),     S(32, 67),      //
    S(-14, 50),     S(-21, 77),     S(76, 48),      S(91, 16),      S(88, 12),      S(56, 48),      S(36, 40),      S(-5, 45),      //
    S(-63, 16),     S(-53, 20),     S(-43, 46),     S(8, 3),        S(15, -9),      S(-29, 39),     S(-79, 55),     S(-78, 48),     //
    S(-114, -22),   S(-62, -20),    S(-53, -21),    S(-42, -15),    S(-39, -21),    S(-72, 4),      S(-72, 0),      S(-101, -11),   //
    S(-192, 1),     S(-97, -54),    S(-54, -50),    S(-33, -55),    S(-38, -43),    S(-25, -51),    S(-55, -49),    S(-96, -29),    //
    S(-135, -5),    S(-146, 31),    S(-36, -45),    S(13, -65),     S(-18, -41),    S(-19, -38),    S(-44, -38),    S(-75, -20),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(21, 87),      S(71, 62),      S(79, 102),     S(66, 78),      S(17, 108),     S(14, 91),      S(-43, 133),    S(-57, 85),     //
    S(41, 115),     S(-13, 198),    S(6, 236),      S(-61, 227),    S(-102, 257),   S(-74, 199),    S(-69, 152),    S(-16, 87),     //
    S(8, 113),      S(36, 228),     S(-2, 260),     S(-16, 231),    S(-45, 225),    S(-50, 199),    S(19, 86),      S(-33, 60),     //
    S(65, 53),      S(-7, 178),     S(-16, 228),    S(-4, 211),     S(-35, 225),    S(-34, 154),    S(-28, 86),     S(20, -11),     //
    S(30, 61),      S(34, 69),      S(10, 113),     S(0, 152),      S(21, 101),     S(-6, 92),      S(-6, 22),      S(36, -70),     //
    S(29, -48),     S(34, -13),     S(38, 47),      S(17, 27),      S(34, -1),      S(15, 21),      S(50, -75),     S(27, -86),     //
    S(80, -288),    S(61, -311),    S(47, -154),    S(60, -104),    S(55, -98),     S(81, -176),    S(32, -78),     S(37, -105),    //
    S(30, -153),    S(-18, -405),   S(-21, -254),   S(26, -196),    S(86, -215),    S(88, -274),    S(61, -183),    S(29, -100),    //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(-37, -233),   S(346, -139),   S(279, -238),   S(65, -360),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(309, -119),   S(102, 163),    S(160, 127),    S(138, 121),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-39, 47),     S(-13, 229),    S(64, 161),     S(0, 139),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-316, 73),    S(-21, 151),    S(-51, 163),    S(-137, 176),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-285, 26),    S(-98, 95),     S(-142, 134),   S(-201, 176),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-135, -44),   S(64, 0),       S(-65, 80),     S(-110, 128),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(91, -148),    S(131, -46),    S(57, 10),      S(-42, 67),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-7, -239),    S(103, -153),   S(-12, -103),   S(-26, -102),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
