#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(403, 485);
inline const PScore KNIGHT_MAT = S(1321, 829);
inline const PScore BISHOP_MAT = S(1383, 926);
inline const PScore ROOK_MAT   = S(1962, 1524);
inline const PScore QUEEN_MAT  = S(4494, 2629);
inline const PScore TEMPO_VAL  = S(51, 6);

inline const PScore BISHOP_PAIR_VAL  = S(114, 181);
inline const PScore DOUBLED_PAWN_VAL = S(-87, -131);

inline const PScore POTENTIAL_CHECKER_VAL = S(-72, -6);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(14, -16), S(9, 16), S(66, 53), S(169, 159), S(729, 444), S(1156, 1333),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-117, -279), S(-49, -135), S(11, -56), S(54, -19), S(109, -4), S(145, 22), S(196, 4), S(235, -3), S(294, -88),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-160, -271), S(-68, -171), S(-5, -145), S(37, -104), S(82, -75), S(117, -48), S(135, -39), S(147, -38), S(166, -32), S(172, -46), S(198, -64), S(250, -116), S(258, -115), S(323, -170),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-359, -391), S(-125, -116), S(-54, -62), S(-20, -47), S(22, -27), S(51, -11), S(77, 9), S(104, 4), S(135, 5), S(167, 12), S(207, 4), S(245, -2), S(278, -9), S(303, -22), S(523, -202),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-463, 19), S(-443, 32), S(-143, -283), S(-100, -375), S(-86, -327), S(-73, -238), S(-58, -147), S(-40, -98), S(-29, -48), S(-11, -31), S(-2, -6), S(5, 19), S(22, 19), S(25, 39), S(36, 37), S(31, 51), S(52, 14), S(66, 0), S(89, -28), S(107, -63), S(169, -134), S(215, -201), S(286, -259), S(398, -380), S(494, -478), S(706, -633), S(843, -775), S(1225, -883),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(-143, 703), S(172, 451), S(78, 498), S(28, 517), S(7, 495), S(-18, 474), S(-11, 472), S(-23, 443), S(1, 382),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(78, -27), S(146, -69),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(32, -3), S(117, -35),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(71, -34), S(82, -87), S(120, -73), S(116, -98),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-49, 64), S(-74, 86), S(-35, 36), S(141, -70), S(427, -269),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(245, 302),    S(282, 350),    S(269, 334),    S(313, 237),    S(328, 151),    S(234, 225),    S(299, 278),    S(306, 261),    //
    S(-18, 78),     S(103, 121),    S(113, 64),     S(132, 10),     S(113, -24),    S(49, 16),      S(27, 57),      S(-83, 66),     //
    S(-111, -56),   S(-19, -71),    S(0, -110),     S(3, -135),     S(-16, -137),   S(-74, -113),   S(-89, -75),    S(-162, -49),   //
    S(-115, -141),  S(-45, -128),   S(-13, -171),   S(-23, -170),   S(-38, -180),   S(-89, -151),   S(-140, -100),  S(-198, -105),  //
    S(-85, -184),   S(47, -190),    S(-2, -168),    S(-14, -159),   S(-51, -163),   S(-98, -155),   S(-110, -119),  S(-169, -142),  //
    S(-126, -169),  S(54, -173),    S(9, -149),     S(-36, -124),   S(-86, -118),   S(-110, -117),  S(-102, -102),  S(-205, -108),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-389, -48),   S(-204, 38),    S(-605, 234),   S(155, -41),    S(-1, 7),       S(-463, 76),    S(-354, 65),    S(-507, 19),    //
    S(-6, 6),       S(18, 37),      S(193, -38),    S(284, -138),   S(248, -78),    S(133, -34),    S(-37, 35),     S(-48, 19),     //
    S(69, 19),      S(145, 22),     S(227, 28),     S(253, 34),     S(216, 40),     S(124, 64),     S(159, -21),    S(39, 1),       //
    S(151, 8),      S(81, 58),      S(149, 74),     S(118, 102),    S(118, 99),     S(110, 78),     S(40, 54),      S(98, 7),       //
    S(122, 3),      S(92, 22),      S(120, 50),     S(85, 78),      S(94, 69),      S(66, 81),      S(85, 1),       S(66, 9),       //
    S(12, -16),     S(69, -20),     S(20, 13),      S(66, 43),      S(74, 42),      S(-10, 32),     S(25, -21),     S(-32, -22),    //
    S(40, -23),     S(27, -25),     S(30, -23),     S(43, -6),      S(10, 12),      S(8, -38),      S(0, -24),      S(-24, -134),   //
    S(-84, 5),      S(19, 0),       S(34, -60),     S(62, -51),     S(52, -51),     S(-4, -85),     S(-4, -26),     S(-147, -62),   //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(0, 14),       S(-149, 52),    S(-520, 106),   S(-108, 30),    S(-196, 69),    S(-274, 76),    S(-215, 143),   S(-90, 87),     //
    S(-15, 23),     S(12, 36),      S(69, 4),       S(23, -11),     S(-27, 33),     S(14, 24),      S(51, 7),       S(-25, 21),     //
    S(59, -5),      S(123, 30),     S(202, 19),     S(209, -2),     S(167, 7),      S(138, 25),     S(90, 6),       S(19, -15),     //
    S(41, -25),     S(92, 21),      S(133, 31),     S(145, 58),     S(183, 32),     S(97, 18),      S(74, 19),      S(8, -10),      //
    S(87, -63),     S(64, 0),       S(93, 20),      S(138, 32),     S(123, 43),     S(70, 39),      S(30, 7),       S(56, -60),     //
    S(68, -20),     S(119, -24),    S(122, -16),    S(62, 38),      S(70, 25),      S(55, 31),      S(109, -19),    S(41, -24),     //
    S(55, -48),     S(114, -49),    S(60, -23),     S(49, -12),     S(21, -7),      S(59, -37),     S(71, -44),     S(83, -101),    //
    S(33, -4),      S(-23, 4),      S(39, 2),       S(16, -40),     S(15, -61),     S(67, -17),     S(58, -80),     S(21, -29),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(220, 11),     S(185, 35),     S(168, 50),     S(192, 33),     S(215, 5),      S(144, 37),     S(175, 27),     S(192, 34),     //
    S(99, 79),      S(87, 84),      S(245, 38),     S(256, 10),     S(295, -17),    S(189, 39),     S(82, 73),      S(90, 69),      //
    S(27, 82),      S(152, 35),     S(217, 11),     S(269, -37),    S(238, -33),    S(157, 15),     S(135, 22),     S(66, 60),      //
    S(-2, 55),      S(8, 66),       S(122, 23),     S(123, 4),      S(132, 2),      S(75, 44),      S(41, 47),      S(7, 52),       //
    S(-68, 17),     S(-52, 28),     S(-11, 27),     S(6, 12),       S(14, 9),       S(-4, 38),      S(-55, 43),     S(-68, 50),     //
    S(-121, -19),   S(-45, -37),    S(-47, -31),    S(-25, -25),    S(-31, -21),    S(-67, 10),     S(-49, -15),    S(-102, 5),     //
    S(-195, 8),     S(-91, -53),    S(-45, -46),    S(-17, -52),    S(-28, -42),    S(-22, -43),    S(-44, -62),    S(-90, -43),    //
    S(-127, -1),    S(-144, 40),    S(-22, -42),    S(45, -78),     S(3, -43),      S(-8, -28),     S(-27, -33),    S(-63, -14),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(52, 51),      S(119, 28),     S(82, 63),      S(86, 98),      S(61, 92),      S(48, 90),      S(58, 46),      S(-31, 87),     //
    S(57, 108),     S(-36, 226),    S(46, 234),     S(-113, 315),   S(-92, 279),    S(-62, 230),    S(-65, 176),    S(-4, 81),      //
    S(0, 147),      S(67, 204),     S(24, 257),     S(31, 219),     S(-41, 246),    S(-23, 198),    S(2, 145),      S(-12, 41),     //
    S(89, 38),      S(-4, 184),     S(9, 209),      S(1, 224),      S(-12, 219),    S(-27, 169),    S(-15, 123),    S(22, 0),       //
    S(36, 51),      S(37, 87),      S(32, 108),     S(5, 162),      S(-3, 162),     S(-4, 110),     S(1, 56),       S(54, -58),     //
    S(28, -61),     S(61, -29),     S(58, 29),      S(24, 35),      S(48, -1),      S(23, 43),      S(60, -53),     S(25, -34),     //
    S(27, -242),    S(66, -312),    S(63, -205),    S(81, -131),    S(63, -100),    S(97, -182),    S(75, -150),    S(66, -141),    //
    S(32, -257),    S(-20, -412),   S(-48, -245),   S(42, -247),    S(96, -224),    S(88, -258),    S(91, -240),    S(36, -145),    //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(-164, -325),  S(248, -126),   S(375, -274),   S(225, -448),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(205, -131),   S(219, 105),    S(107, 141),    S(78, 116),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-48, 27),     S(61, 196),     S(38, 176),     S(-55, 158),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-193, 18),    S(26, 123),     S(5, 146),      S(-118, 175),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-268, -2),    S(-48, 82),     S(-85, 120),    S(-168, 161),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-136, -50),   S(42, 17),      S(-73, 84),     S(-120, 133),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(91, -151),    S(123, -37),    S(44, 25),      S(-66, 82),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-17, -243),   S(116, -159),   S(-30, -92),    S(-21, -101),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
