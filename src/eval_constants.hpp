#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(284, 450);
inline const PScore KNIGHT_MAT = S(948, 997);
inline const PScore BISHOP_MAT = S(975, 1080);
inline const PScore ROOK_MAT   = S(1449, 1809);
inline const PScore QUEEN_MAT  = S(3172, 3283);
inline const PScore TEMPO_VAL  = S(28, 17);

inline const PScore BISHOP_PAIR_VAL  = S(73, 196);
inline const PScore DOUBLED_PAWN_VAL = S(-50, -77);

inline const PScore POTENTIAL_CHECKER_VAL = S(-73, -2);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(0, 21), S(55, 29), S(84, 72), S(193, 146), S(489, 567), S(1747, 1478),
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(47, 47), S(50, 22), S(52, 38), S(101, 113), S(651, -133),
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(0, 4), S(-25, 37), S(-26, 88), S(43, 139), S(73, 246), S(27, 42),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-213, -195), S(-107, -129), S(-56, -31), S(-7, -4), S(38, 17), S(57, 62), S(87, 60), S(111, 58), S(163, -24),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-140, -279), S(-88, -184), S(-28, -122), S(-13, -64), S(23, -32), S(37, -9), S(60, 0), S(68, 11), S(75, 22), S(76, 18), S(101, 7), S(161, -46), S(191, -57), S(262, -91),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-226, -327), S(-89, -111), S(-45, -39), S(-26, -41), S(-12, -7), S(2, 8), S(21, 16), S(48, 12), S(73, 21), S(100, 29), S(125, 29), S(137, 34), S(183, 20), S(169, 22), S(267, -71),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(62, 99), S(-621, 521), S(-218, -392), S(-160, -207), S(-118, -253), S(-85, -207), S(-117, -13), S(-94, -44), S(-80, -11), S(-78, 16), S(-69, 34), S(-66, 66), S(-43, 51), S(-32, 50), S(-22, 52), S(-11, 48), S(-24, 71), S(-1, 32), S(12, 20), S(45, -33), S(89, -81), S(118, -140), S(216, -218), S(416, -416), S(373, -422), S(952, -710), S(738, -633), S(1403, -1028),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(402, 799), S(84, 441), S(15, 485), S(17, 514), S(-2, 505), S(-24, 485), S(-8, 492), S(0, 461), S(52, 338),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -38), S(154, -90),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(22, 0), S(129, -41),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -64), S(90, -81), S(140, -80), S(159, -129),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-53, 38), S(-68, 49), S(12, -27), S(184, -127), S(423, -273),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-126, 485),   S(19, 486),     S(161, 434),    S(320, 212),    S(265, 229),    S(284, 323),    S(160, 362),    S(214, 351),    //
    S(8, -10),      S(175, 9),      S(116, -72),    S(147, -179),   S(72, -182),    S(15, -96),     S(-36, -14),    S(-58, -24),    //
    S(-46, -72),    S(-27, -67),    S(-30, -113),   S(-35, -147),   S(-48, -147),   S(-96, -141),   S(-110, -70),   S(-135, -48),   //
    S(-44, -147),   S(-17, -110),   S(-55, -153),   S(-56, -154),   S(-75, -165),   S(-107, -143),  S(-145, -74),   S(-161, -93),   //
    S(-37, -181),   S(25, -177),    S(-37, -136),   S(-97, -121),   S(-89, -142),   S(-140, -137),  S(-146, -110),  S(-175, -113),  //
    S(-33, -182),   S(121, -181),   S(36, -140),    S(-62, -99),    S(-81, -155),   S(-105, -133),  S(-119, -90),   S(-154, -108),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-393, -153),  S(-76, -69),    S(-547, 318),   S(-15, 58),     S(-324, 160),   S(-339, 178),   S(-399, -9),    S(-523, 54),    //
    S(86, -26),     S(102, 65),     S(276, -75),    S(63, 71),      S(141, 41),     S(119, -16),    S(-11, 19),     S(48, -48),     //
    S(28, 37),      S(33, 118),     S(234, 64),     S(144, 90),     S(182, 55),     S(59, 68),      S(67, 32),      S(-60, 20),     //
    S(115, 45),     S(26, 105),     S(87, 107),     S(63, 126),     S(83, 88),      S(73, 87),      S(-2, 33),      S(13, 51),      //
    S(82, 30),      S(95, 39),      S(74, 77),      S(38, 73),      S(38, 87),      S(46, 86),      S(4, 38),       S(22, -54),     //
    S(-12, -18),    S(23, -29),     S(5, -19),      S(30, 50),      S(47, 47),      S(-39, 6),      S(-27, -9),     S(-75, -10),    //
    S(17, 74),      S(36, -18),     S(-14, -11),    S(-14, 12),     S(-21, 1),      S(-40, -28),    S(-28, -49),    S(-111, -108),  //
    S(-49, -8),     S(-1, -23),     S(49, -93),     S(38, -27),     S(65, -41),     S(2, -138),     S(-50, -38),    S(-167, -48),   //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-109, 98),    S(-54, 21),     S(-567, 127),   S(-273, 111),   S(-325, 135),   S(-420, 135),   S(-18, 76),     S(-25, 53),     //
    S(8, -40),      S(27, 63),      S(35, 49),      S(75, -4),      S(39, 28),      S(16, 47),      S(25, 25),      S(-69, 46),     //
    S(6, 75),       S(58, 71),      S(277, 32),     S(138, 29),     S(94, 38),      S(32, 77),      S(132, 21),     S(-6, 83),      //
    S(14, 17),      S(47, 56),      S(127, 36),     S(130, 51),     S(141, 51),     S(57, 69),      S(54, 39),      S(-43, 60),     //
    S(34, -28),     S(29, 37),      S(45, 36),      S(86, 52),      S(85, 84),      S(14, 71),      S(28, 7),       S(19, -54),     //
    S(61, -29),     S(93, -4),      S(95, -2),      S(16, 53),      S(13, 62),      S(3, 72),       S(65, 2),       S(39, -52),     //
    S(18, -55),     S(96, -32),     S(38, -23),     S(15, 17),      S(6, -10),      S(44, -26),     S(-8, 8),       S(58, -109),    //
    S(37, -5),      S(11, 5),       S(2, 18),       S(10, -41),     S(-5, -37),     S(16, 0),       S(31, -68),     S(-50, 17),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(106, 30),     S(198, 34),     S(90, 78),      S(76, 86),      S(97, 60),      S(57, 60),      S(79, 59),      S(86, 61),      //
    S(119, 69),     S(163, 65),     S(235, 43),     S(149, 96),     S(145, 93),     S(61, 111),     S(23, 109),     S(47, 99),      //
    S(26, 76),      S(286, 10),     S(232, 25),     S(249, 3),      S(154, 40),     S(67, 78),      S(119, 47),     S(-22, 91),     //
    S(0, 57),       S(39, 56),      S(70, 47),      S(117, -6),     S(81, 23),      S(23, 83),      S(4, 72),       S(-79, 72),     //
    S(-119, 9),     S(4, 0),        S(-23, 30),     S(-22, 27),     S(-29, 23),     S(-62, 79),     S(-107, 78),    S(-122, 57),    //
    S(-111, -3),    S(0, -80),      S(-30, -30),    S(-65, -9),     S(-29, -34),    S(-118, 32),    S(-119, 15),    S(-122, 1),     //
    S(-162, 18),    S(-88, -50),    S(-44, -55),    S(-38, -41),    S(-54, -24),    S(-64, -21),    S(-121, -31),   S(-125, -32),   //
    S(-125, -1),    S(-95, 10),     S(-55, -27),    S(-22, -41),    S(-35, -21),    S(-43, -26),    S(-60, -39),    S(-87, -21),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(47, 76),      S(59, 50),      S(81, 70),      S(-95, 227),    S(-4, 118),     S(-60, 157),    S(48, 34),      S(-28, 35),     //
    S(87, 65),      S(-97, 254),    S(-60, 311),    S(-157, 333),   S(-110, 254),   S(-151, 271),   S(-72, 134),    S(-11, 34),     //
    S(-44, 184),    S(76, 168),     S(46, 204),     S(-23, 264),    S(-43, 210),    S(-85, 222),    S(6, 94),       S(-15, 17),     //
    S(42, 72),      S(18, 158),     S(10, 170),     S(-19, 242),    S(-24, 218),    S(-5, 116),     S(-1, 52),      S(-24, 49),     //
    S(25, 86),      S(50, 67),      S(20, 132),     S(-14, 174),    S(-33, 184),    S(-27, 136),    S(-12, 23),     S(-15, -30),    //
    S(63, -146),    S(53, -22),     S(37, 54),      S(-41, 118),    S(5, 40),       S(-5, 48),      S(24, -56),     S(-6, -44),     //
    S(56, -254),    S(43, -309),    S(18, -127),    S(41, -48),     S(-3, -6),      S(47, -135),    S(29, -65),     S(-14, -37),    //
    S(-76, -63),    S(-73, -346),   S(-17, -293),   S(16, -215),    S(43, -124),    S(62, -211),    S(36, -161),    S(-21, -57),    //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(488, -698),   S(272, -131),   S(-39, -17),    S(-160, 51),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(360, -163),   S(8, 135),      S(-45, 163),    S(276, 77),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-25, 38),     S(106, 149),    S(170, 116),    S(221, 56),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-231, 61),    S(-14, 126),    S(131, 114),    S(103, 77),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-202, 0),     S(-37, 74),     S(31, 77),      S(-39, 124),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-145, -36),   S(63, -7),      S(-39, 61),     S(-89, 108),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(83, -121),    S(121, -48),    S(5, 22),       S(-111, 85),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-24, -187),   S(78, -142),    S(-53, -96),    S(-21, -126),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
