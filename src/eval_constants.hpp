#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(304, 320);
inline const PParam KNIGHT_MAT = S(1122, 911);
inline const PParam BISHOP_MAT = S(1227, 956);
inline const PParam ROOK_MAT   = S(1715, 1682);
inline const PParam QUEEN_MAT  = S(3655, 2884);
inline const PParam TEMPO_VAL  = S(59, 15);

inline const PParam BISHOP_PAIR_VAL  = S(80, 177);
inline const PParam ROOK_OPEN_VAL  = S(103, -30);
inline const PParam ROOK_SEMIOPEN_VAL  = S(39, 12);

inline const PParam DOUBLED_PAWN_VAL = S(-39, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);
inline const PParam OUTPOST_VAL = S(24, 12);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(19, 20), S(62, 32), S(78, 69), S(197, 137), S(568, 243), S(941, 1127),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(63, 44), S(61, 30), S(66, 56), S(147, 120), S(698, -87),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-72, -100), S(-60, -82), S(-33, -6), S(23, 72), S(54, 210), S(296, 308),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(52, -46), S(37, -7), S(18, 27), S(20, 76), S(86, 153), S(143, 296),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(18, -45), S(3, 3), S(-2, -23), S(-2, -44), S(-8, -94), S(-190, -146),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(14, 102), S(-19, 90), S(-12, 38), S(1, 9), S(11, 13), S(41, 11), S(19, 0),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-186, -51), S(32, -5), S(-9, 42), S(12, 73), S(17, 98), S(38, 97), S(-10, 116),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-234, -227), S(-127, -62), S(-68, -9), S(-22, 24), S(26, 39), S(55, 78), S(95, 74), S(133, 75), S(183, 17),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-235, -280), S(-161, -94), S(-85, -34), S(-50, 15), S(-19, 45), S(-2, 64), S(15, 78), S(31, 82), S(47, 84), S(55, 76), S(73, 62), S(133, 8), S(158, -20), S(213, -53),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-319, -247), S(-155, -84), S(-101, -20), S(-70, -10), S(-43, 12), S(-29, 35), S(-11, 48), S(7, 54), S(24, 67), S(42, 76), S(60, 79), S(71, 82), S(92, 85), S(102, 72), S(247, -55),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-986, -889), S(-248, -650), S(-149, -522), S(-98, -308), S(-88, -107), S(-51, 0), S(-47, 108), S(-22, 122), S(-17, 177), S(-5, 202), S(2, 226), S(8, 241), S(26, 233), S(36, 245), S(43, 240), S(56, 236), S(62, 228), S(61, 234), S(88, 189), S(110, 152), S(124, 134), S(166, 68), S(179, 60), S(340, -114), S(372, -156), S(614, -311), S(376, -184), S(501, -252),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(438, 21), S(102, -124), S(-2, -33), S(-18, 5), S(-45, 7), S(-80, 13), S(-59, 14), S(-68, 8), S(-70, -39),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(81, -30), S(151, -75),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(36, -4), S(140, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -48), S(53, -64), S(104, -64), S(161, -129),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-39, 31), S(-59, 42), S(-2, -5), S(160, -95), S(360, -240),
};

inline const PParam PAWN_THREAT_KNIGHT = S(219, 59);
inline const PParam PAWN_THREAT_BISHOP = S(192, 102);
inline const PParam PAWN_THREAT_ROOK   = S(192, 54);
inline const PParam PAWN_THREAT_QUEEN  = S(170, -59);

inline const PParam KNIGHT_THREAT_BISHOP = S(104, 69);
inline const PParam KNIGHT_THREAT_ROOK   = S(244, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(154, -69);

inline const PParam BISHOP_THREAT_KNIGHT = S(109, 25);
inline const PParam BISHOP_THREAT_ROOK   = S(242, 49);
inline const PParam BISHOP_THREAT_QUEEN  = S(190, 47);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-2, -11), S(-6, -2), S(-5, -12), S(-10, -22), S(-16, -27), S(-20, -34), S(-21, -41), S(-27, -40), S(-36, -47),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(108, 161),    S(99, 207),     S(171, 172),    S(233, 53),     S(179, 47),     S(163, 112),    S(57, 136),     S(116, 114),    //
    S(69, 38),      S(187, 63),     S(164, 6),      S(166, -50),    S(119, -67),    S(63, -19),     S(23, 28),      S(-32, 33),     //
    S(-10, 6),      S(12, 9),       S(32, -35),     S(20, -50),     S(2, -53),      S(-39, -47),    S(-84, 2),      S(-113, 23),    //
    S(-35, -42),    S(-10, -14),    S(-15, -47),    S(-28, -46),    S(-55, -55),    S(-80, -44),    S(-131, 4),     S(-155, -7),    //
    S(-39, -71),    S(29, -69),     S(-18, -24),    S(-49, -21),    S(-70, -30),    S(-110, -32),   S(-130, -18),   S(-159, -25),   //
    S(-29, -66),    S(102, -61),    S(58, -26),     S(0, -7),       S(-36, -19),    S(-72, -24),    S(-100, 0),     S(-138, -13),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-372, -155),  S(-328, 59),    S(-440, 237),   S(-103, 67),    S(-231, 90),    S(-321, 99),    S(-546, 86),    S(-515, -14),   //
    S(21, -2),      S(84, 9),       S(182, -59),    S(130, 4),      S(132, 12),     S(67, -11),     S(11, 9),       S(-6, -34),     //
    S(56, -37),     S(95, 15),      S(181, 6),      S(135, 27),     S(136, 16),     S(50, 25),      S(46, -1),      S(-47, 1),      //
    S(100, 3),      S(71, 36),      S(104, 40),     S(90, 65),      S(100, 51),     S(62, 46),      S(34, 4),       S(26, 0),       //
    S(90, -10),     S(110, -14),    S(95, 13),      S(74, 26),      S(64, 37),      S(56, 33),      S(38, 0),       S(30, -54),     //
    S(23, -23),     S(45, -36),     S(37, -18),     S(49, 26),      S(56, 23),      S(0, 1),        S(8, -37),      S(-24, -41),    //
    S(31, -7),      S(51, -38),     S(30, -32),     S(30, -13),     S(18, -19),     S(-9, -40),     S(6, -52),      S(-49, -120),   //
    S(-12, -57),    S(22, -14),     S(40, -40),     S(48, -32),     S(40, -24),     S(-5, -56),     S(-17, -29),    S(-64, -81),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-154, 72),    S(-178, 55),    S(-421, 81),    S(-298, 94),    S(-249, 98),    S(-416, 124),   S(-161, 102),   S(-111, 75),    //
    S(15, -38),     S(1, 43),       S(18, 23),      S(0, 26),       S(-26, 42),     S(12, 34),      S(-8, 25),      S(-49, 23),     //
    S(20, 8),       S(79, 14),      S(164, 23),     S(93, 19),      S(72, 21),      S(43, 35),      S(96, 7),       S(-18, 11),     //
    S(25, -29),     S(31, 28),      S(86, 24),      S(93, 52),      S(103, 50),     S(34, 46),      S(4, 30),       S(-39, 9),      //
    S(30, -58),     S(48, -8),      S(53, 14),      S(58, 39),      S(52, 56),      S(3, 46),       S(-7, 5),       S(-20, -53),    //
    S(71, -44),     S(111, -21),    S(117, -7),     S(59, 34),      S(40, 39),      S(40, 36),      S(68, -7),      S(35, -40),     //
    S(58, -80),     S(109, -55),    S(79, -43),     S(51, -13),     S(40, -27),     S(42, -38),     S(25, -25),     S(44, -90),     //
    S(55, -63),     S(41, -16),     S(46, -10),     S(57, -45),     S(66, -55),     S(62, -13),     S(54, -42),     S(37, -44),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(107, 9),      S(171, 7),      S(100, 37),     S(102, 32),     S(108, 21),     S(58, 34),      S(64, 37),      S(74, 42),      //
    S(15, 67),      S(101, 42),     S(176, 19),     S(102, 62),     S(118, 49),     S(66, 59),      S(4, 78),       S(-3, 84),      //
    S(4, 44),       S(152, 2),      S(181, -3),     S(181, -6),     S(136, 3),      S(62, 43),      S(80, 31),      S(-38, 81),     //
    S(-33, 36),     S(33, 28),      S(65, 20),      S(92, -18),     S(61, 7),       S(-2, 54),      S(-23, 55),     S(-84, 64),     //
    S(-98, -10),    S(-21, -9),     S(-37, 6),      S(-50, 7),      S(-57, 4),      S(-76, 45),     S(-104, 42),    S(-119, 33),    //
    S(-119, -31),   S(-48, -60),    S(-52, -31),    S(-73, -29),    S(-55, -48),    S(-105, 5),     S(-108, -10),   S(-128, -12),   //
    S(-178, -20),   S(-80, -81),    S(-55, -66),    S(-51, -64),    S(-58, -59),    S(-77, -44),    S(-98, -66),    S(-129, -48),   //
    S(-143, -16),   S(-112, -12),   S(-58, -48),    S(-33, -66),    S(-47, -51),    S(-60, -39),    S(-76, -47),    S(-93, -29),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(43, 37),      S(81, 3),       S(85, 9),       S(-34, 139),    S(37, 56),      S(-18, 83),     S(46, 0),       S(-14, 22),     //
    S(29, 75),      S(-42, 170),    S(-47, 224),    S(-135, 257),   S(-106, 202),   S(-117, 201),   S(-68, 106),    S(-33, 46),     //
    S(-10, 105),    S(79, 100),     S(16, 180),     S(0, 190),      S(-40, 171),    S(-73, 172),    S(-1, 66),      S(-35, 39),     //
    S(39, 35),      S(33, 111),     S(1, 141),      S(-5, 202),     S(-24, 183),    S(-37, 122),    S(-4, 36),      S(-5, -7),      //
    S(6, 59),       S(38, 22),      S(9, 94),       S(-21, 142),    S(-35, 131),    S(-31, 91),     S(-18, 13),     S(-13, -37),    //
    S(25, -107),    S(43, -57),     S(47, 7),       S(-6, 34),      S(6, -10),      S(9, -5),       S(19, -72),     S(0, -69),      //
    S(12, -213),    S(45, -313),    S(33, -180),    S(49, -106),    S(23, -87),     S(41, -160),    S(14, -96),     S(0, -95),      //
    S(-41, -134),   S(20, -386),    S(16, -375),    S(43, -281),    S(45, -198),    S(50, -243),    S(36, -205),    S(-16, -127),   //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-143, -376),  S(91, -18),     S(-66, 33),     S(-178, 59),    S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(195, -114),   S(5, 146),      S(21, 131),     S(126, 61),     S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(-36, 57),     S(66, 136),     S(105, 104),    S(89, 60),      S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(-258, 80),    S(30, 95),      S(21, 93),      S(-34, 78),     S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(-231, 39),    S(-45, 68),     S(-30, 74),     S(-113, 109),   S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(-136, 8),     S(56, 11),      S(-34, 62),     S(-77, 87),     S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(82, -83),     S(135, -42),    S(47, 4),       S(-34, 47),     S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(-42, -111),   S(88, -101),    S(-12, -65),    S(-28, -64),    S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
};
// Epoch duration: 63.506s
// clang-format on
}
