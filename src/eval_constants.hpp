#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(288, 368);
inline const PParam KNIGHT_MAT = S(1029, 1129);
inline const PParam BISHOP_MAT = S(1137, 1196);
inline const PParam ROOK_MAT   = S(1467, 2180);
inline const PParam QUEEN_MAT  = S(2957, 4039);
inline const PParam TEMPO_VAL  = S(96, 86);

inline const PParam BISHOP_PAIR_VAL  = S(70, 203);
inline const PParam ROOK_OPEN_VAL  = S(109, 6);
inline const PParam ROOK_SEMIOPEN_VAL  = S(41, 30);

inline const PParam DOUBLED_PAWN_VAL = S(-27, -90);

inline const PParam POTENTIAL_CHECKER_VAL = S(-67, -33);
inline const PParam OUTPOST_KNIGHT_VAL = S(18, 72);
inline const PParam OUTPOST_BISHOP_VAL = S(51, 40);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(23, 16), S(61, 44), S(75, 88), S(170, 217), S(559, 370), S(640, 822),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(70, 62), S(56, 53), S(61, 93), S(78, 196), S(601, 127),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-71, -161), S(-46, -132), S(-32, -21), S(46, 106), S(-20, 385), S(134, 464),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(68, -58), S(62, -34), S(41, 4), S(-14, 72), S(-16, 233), S(-226, 678),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(6, -54), S(23, 0), S(8, -38), S(12, -75), S(66, -267), S(-51, -337),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-34, 151), S(-67, 126), S(-37, 61), S(-9, 29), S(7, 33), S(67, 26), S(21, 25),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-209, -73), S(17, -13), S(-22, 70), S(7, 108), S(6, 143), S(19, 163), S(-43, 173),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-242, -222), S(-129, -46), S(-78, 55), S(-37, 95), S(-3, 131), S(24, 177), S(55, 189), S(88, 208), S(116, 186),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-223, -64), S(-145, -20), S(-99, 34), S(-75, 90), S(-40, 115), S(-21, 143), S(-10, 160), S(3, 167), S(10, 179), S(27, 175), S(54, 157), S(90, 144), S(104, 145), S(139, 119),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-125, -495), S(-112, -54), S(-61, 17), S(-54, 58), S(-36, 81), S(-31, 103), S(-26, 134), S(-10, 150), S(-8, 168), S(5, 179), S(17, 186), S(18, 200), S(18, 210), S(39, 196), S(43, 182),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-1006, -894), S(-424, -705), S(-171, -404), S(-109, -9), S(-85, 133), S(-65, 154), S(-59, 223), S(-50, 283), S(-36, 322), S(-20, 331), S(-12, 345), S(0, 351), S(0, 365), S(13, 368), S(11, 378), S(28, 366), S(26, 384), S(24, 389), S(33, 385), S(64, 354), S(87, 335), S(134, 272), S(155, 283), S(276, 152), S(202, 235), S(681, -128), S(552, -61), S(713, -217),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(204, 104), S(58, -150), S(-9, -37), S(-13, 12), S(-42, 17), S(-46, 12), S(-53, 32), S(-59, 28), S(-16, -27),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(50, -24), S(113, -73),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(26, -7), S(135, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(80, -68), S(89, -110), S(169, -98), S(142, -158),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-43, 4), S(-62, -13), S(-27, -54), S(118, -158), S(319, -268),
};

inline const PParam PAWN_THREAT_KNIGHT = S(203, 77);
inline const PParam PAWN_THREAT_BISHOP = S(194, 153);
inline const PParam PAWN_THREAT_ROOK   = S(272, 17);
inline const PParam PAWN_THREAT_QUEEN  = S(260, -123);

inline const PParam KNIGHT_THREAT_BISHOP = S(103, 114);
inline const PParam KNIGHT_THREAT_ROOK   = S(235, 58);
inline const PParam KNIGHT_THREAT_QUEEN  = S(185, -75);

inline const PParam BISHOP_THREAT_KNIGHT = S(80, 75);
inline const PParam BISHOP_THREAT_ROOK   = S(179, 89);
inline const PParam BISHOP_THREAT_QUEEN  = S(226, 185);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-6, 7), S(-6, -1), S(-6, -14), S(-12, -26), S(-14, -38), S(-17, -54), S(-20, -66), S(-23, -83), S(-28, -93),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-57, 301),    S(44, 236),     S(188, 236),    S(193, 114),    S(218, 65),     S(75, 137),     S(63, 168),     S(11, 224),     //
    S(115, 88),     S(183, 80),     S(244, -35),    S(160, -105),   S(127, -119),   S(100, -68),    S(1, 49),       S(-24, 57),     //
    S(19, 10),      S(15, 10),      S(52, -49),     S(29, -74),     S(-20, -78),    S(-52, -47),    S(-73, -1),     S(-117, 30),    //
    S(-28, -23),    S(-7, -1),      S(-12, -47),    S(-11, -51),    S(-43, -60),    S(-73, -44),    S(-103, -6),    S(-149, -12),   //
    S(-19, -52),    S(30, -37),     S(-29, -25),    S(-47, -24),    S(-77, -28),    S(-97, -36),    S(-126, -16),   S(-170, -16),   //
    S(5, -43),      S(112, -26),    S(64, -10),     S(-16, 32),     S(-38, -12),    S(-64, -8),     S(-92, 17),     S(-134, 16),    //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-293, -222),  S(-252, -45),   S(-218, -18),   S(-13, -2),     S(-160, 54),    S(-282, 65),    S(-399, 73),    S(-344, -116),  //
    S(-37, -2),     S(60, 27),      S(76, 0),       S(-15, 27),     S(-10, 46),     S(-23, 51),     S(-16, 91),     S(-47, 61),     //
    S(54, 10),      S(-7, 29),      S(152, 0),      S(73, 66),      S(57, 76),      S(18, 70),      S(31, 28),      S(-5, 55),      //
    S(83, 52),      S(11, 96),      S(42, 88),      S(54, 92),      S(45, 101),     S(68, 76),      S(23, 65),      S(37, 87),      //
    S(61, 52),      S(37, 39),      S(66, 44),      S(39, 89),      S(58, 65),      S(31, 75),      S(46, 37),      S(18, 66),      //
    S(26, 29),      S(44, 8),       S(35, 11),      S(54, 66),      S(29, 73),      S(-3, 40),      S(-19, 25),     S(-41, 28),     //
    S(33, 47),      S(20, 27),      S(12, 17),      S(19, 22),      S(8, 23),       S(-15, 27),     S(-14, 21),     S(-53, 21),     //
    S(-13, 30),     S(-8, 43),      S(34, 26),      S(20, 61),      S(24, 43),      S(-48, 16),     S(-17, 20),     S(-145, 20),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-132, 19),    S(-172, 84),    S(-205, 51),    S(-309, 91),    S(-304, 105),   S(-251, 76),    S(-124, 67),    S(-66, 73),     //
    S(-77, 18),     S(-109, 83),    S(-18, 44),     S(-31, 43),     S(-70, 70),     S(14, 43),      S(11, 53),      S(0, 33),       //
    S(35, 74),      S(38, 50),      S(111, 69),     S(16, 67),      S(46, 35),      S(19, 65),      S(57, 47),      S(12, 58),      //
    S(-36, 51),     S(6, 48),       S(20, 80),      S(43, 96),      S(46, 113),     S(40, 63),      S(-9, 75),      S(-24, 65),     //
    S(64, -7),      S(-17, 52),     S(25, 61),      S(28, 90),      S(47, 90),      S(-15, 96),     S(-27, 69),     S(-8, 44),      //
    S(70, 11),      S(105, 28),     S(82, 60),      S(65, 85),      S(23, 84),      S(49, 89),      S(56, 76),      S(0, 30),       //
    S(78, -8),      S(117, -3),     S(83, 11),      S(37, 39),      S(25, 51),      S(62, 0),       S(49, 8),       S(49, 10),      //
    S(115, -54),    S(77, 9),       S(28, 57),      S(58, 34),      S(16, 26),      S(51, 54),      S(79, 55),      S(45, 2),       //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(20, 80),      S(-84, 134),    S(33, 105),     S(-38, 97),     S(-113, 146),   S(-80, 140),    S(-29, 108),    S(-62, 129),    //
    S(82, 54),      S(60, 91),      S(69, 101),     S(-44, 131),    S(4, 135),      S(-47, 168),    S(-82, 159),    S(-79, 145),    //
    S(35, 40),      S(172, 40),     S(87, 50),      S(63, 68),      S(-21, 97),     S(-30, 124),    S(6, 108),      S(-86, 133),    //
    S(-14, 59),     S(-11, 73),     S(8, 65),       S(-21, 67),     S(-27, 92),     S(-44, 116),    S(-42, 108),    S(-85, 134),    //
    S(-77, 41),     S(-16, 41),     S(-90, 65),     S(-61, 62),     S(-88, 73),     S(-99, 92),     S(-118, 94),    S(-120, 98),    //
    S(-23, 1),      S(25, -23),     S(-33, 16),     S(-56, 27),     S(-96, 55),     S(-102, 49),    S(-96, 43),     S(-128, 65),    //
    S(-62, -18),    S(6, -40),      S(-36, -4),     S(-41, 6),      S(-62, 22),     S(-67, 33),     S(-99, 36),     S(-113, 32),    //
    S(-96, -14),    S(-63, 23),     S(-50, 19),     S(-24, -3),     S(-44, 16),     S(-62, 42),     S(-65, 25),     S(-83, 43),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(-58, 27),     S(146, -95),    S(-6, 110),     S(-94, 168),    S(-37, 106),    S(-114, 141),   S(-142, 94),    S(-124, 113),   //
    S(112, 54),     S(-67, 153),    S(-80, 238),    S(-221, 328),   S(-162, 258),   S(-84, 165),    S(-49, 88),     S(-8, 60),      //
    S(-29, 103),    S(49, 81),      S(-38, 204),    S(-49, 207),    S(-51, 189),    S(-20, 146),    S(12, 40),      S(11, 46),      //
    S(27, 81),      S(5, 161),      S(-13, 159),    S(-40, 204),    S(-35, 208),    S(-18, 127),    S(-3, 95),      S(-8, 62),      //
    S(53, 53),      S(20, 113),     S(0, 131),      S(-15, 173),    S(-36, 202),    S(-29, 154),    S(-25, 124),    S(-12, 56),     //
    S(59, -10),     S(60, 48),      S(46, 80),      S(-6, 121),     S(-13, 111),    S(-1, 128),     S(7, 77),       S(11, 13),      //
    S(51, -128),    S(64, -150),    S(49, -63),     S(32, 33),      S(29, 39),      S(24, 18),      S(22, 13),      S(44, -58),     //
    S(14, -144),    S(-19, -119),   S(-23, -40),    S(16, -36),     S(8, 40),       S(13, -8),      S(13, -25),     S(-18, 8),      //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(211, -325),   S(170, -123),   S(75, -66),     S(-82, -14),    S(20, -11),     S(20, -11),     S(20, -11),     S(20, -11),     //
    S(-196, 37),    S(22, 124),     S(-39, 147),    S(201, 73),     S(20, -11),     S(20, -11),     S(20, -11),     S(20, -11),     //
    S(-150, 56),    S(65, 138),     S(112, 149),    S(-38, 173),    S(20, -11),     S(20, -11),     S(20, -11),     S(20, -11),     //
    S(-274, 43),    S(-131, 116),   S(-173, 152),   S(-278, 176),   S(20, -11),     S(20, -11),     S(20, -11),     S(20, -11),     //
    S(-313, 4),     S(-137, 51),    S(-134, 90),    S(-273, 141),   S(20, -11),     S(20, -11),     S(20, -11),     S(20, -11),     //
    S(-119, -33),   S(40, -7),      S(-46, 44),     S(-88, 82),     S(20, -11),     S(20, -11),     S(20, -11),     S(20, -11),     //
    S(103, -110),   S(139, -51),    S(42, 9),       S(-38, 42),     S(20, -11),     S(20, -11),     S(20, -11),     S(20, -11),     //
    S(47, -166),    S(95, -120),    S(-2, -49),     S(-2, -55),     S(20, -11),     S(20, -11),     S(20, -11),     S(20, -11),     //
};
// Epoch duration: 80.0908s
// clang-format on
}
