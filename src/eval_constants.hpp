#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(302, 323);
inline const PParam KNIGHT_MAT = S(1121, 912);
inline const PParam BISHOP_MAT = S(1241, 968);
inline const PParam ROOK_MAT   = S(1747, 1674);
inline const PParam QUEEN_MAT  = S(3641, 2899);
inline const PParam TEMPO_VAL  = S(58, 15);

inline const PParam BISHOP_PAIR_VAL  = S(79, 178);
inline const PParam DOUBLED_PAWN_VAL = S(-32, -77);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(17, 21), S(61, 33), S(78, 69), S(194, 138), S(564, 245), S(876, 1017),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(63, 45), S(63, 30), S(68, 56), S(148, 120), S(701, -86),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-69, -98), S(-57, -80), S(-31, -4), S(24, 73), S(53, 211), S(282, 306),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(44, -44), S(31, -5), S(15, 29), S(21, 75), S(95, 151), S(164, 289),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(15, -47), S(1, 1), S(-1, -26), S(-2, -47), S(-15, -96), S(-213, -149),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(18, 99), S(-18, 87), S(-11, 35), S(1, 6), S(12, 10), S(40, 9), S(20, -2),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-179, -52), S(30, -4), S(-10, 42), S(10, 74), S(16, 98), S(38, 96), S(-10, 116),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-233, -226), S(-124, -61), S(-64, -8), S(-19, 25), S(29, 40), S(58, 80), S(97, 76), S(135, 78), S(184, 19),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-240, -281), S(-165, -95), S(-88, -36), S(-53, 13), S(-22, 43), S(-5, 63), S(11, 77), S(27, 80), S(44, 83), S(52, 75), S(70, 60), S(131, 6), S(157, -23), S(213, -57),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-336, -268), S(-178, -73), S(-126, -10), S(-92, 0), S(-61, 21), S(-42, 43), S(-18, 53), S(9, 56), S(35, 66), S(61, 74), S(88, 72), S(112, 72), S(145, 71), S(165, 53), S(311, -75),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-996, -895), S(-261, -602), S(-156, -510), S(-103, -304), S(-91, -108), S(-53, 0), S(-48, 105), S(-23, 117), S(-17, 171), S(-4, 195), S(4, 220), S(10, 235), S(28, 229), S(39, 240), S(45, 235), S(58, 232), S(65, 223), S(65, 229), S(92, 184), S(115, 146), S(130, 127), S(171, 63), S(186, 53), S(347, -119), S(379, -162), S(544, -265), S(216, -76), S(179, -70),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(372, 85), S(94, -119), S(-7, -30), S(-22, 8), S(-47, 10), S(-83, 15), S(-60, 17), S(-69, 10), S(-70, -38),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(81, -30), S(152, -76),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(36, -4), S(140, -41),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(70, -44), S(73, -72), S(113, -67), S(161, -130),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-40, 31), S(-58, 41), S(-4, -5), S(159, -96), S(358, -242),
};

inline const PParam PAWN_THREAT_KNIGHT = S(233, 68);
inline const PParam PAWN_THREAT_BISHOP = S(208, 112);
inline const PParam PAWN_THREAT_ROOK   = S(192, 54);
inline const PParam PAWN_THREAT_QUEEN  = S(167, -54);

inline const PParam KNIGHT_THREAT_BISHOP = S(102, 69);
inline const PParam KNIGHT_THREAT_ROOK   = S(244, 1);
inline const PParam KNIGHT_THREAT_QUEEN  = S(153, -69);

inline const PParam BISHOP_THREAT_KNIGHT = S(108, 25);
inline const PParam BISHOP_THREAT_ROOK   = S(242, 50);
inline const PParam BISHOP_THREAT_QUEEN  = S(190, 48);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-2, -11), S(-5, -2), S(-5, -12), S(-9, -22), S(-15, -27), S(-20, -34), S(-21, -42), S(-26, -41), S(-35, -50),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(107, 162),    S(113, 208),    S(171, 175),    S(222, 59),     S(169, 52),     S(159, 116),    S(61, 138),     S(112, 114),    //
    S(56, 38),      S(179, 63),     S(148, 8),      S(146, -48),    S(104, -67),    S(49, -19),     S(14, 27),      S(-46, 32),     //
    S(-19, 5),      S(4, 9),        S(19, -34),     S(5, -49),      S(-7, -55),     S(-47, -49),    S(-91, 0),      S(-124, 21),    //
    S(-43, -43),    S(-18, -15),    S(-27, -46),    S(-39, -47),    S(-61, -58),    S(-84, -47),    S(-137, 2),     S(-163, -9),    //
    S(-43, -74),    S(24, -71),     S(-24, -26),    S(-53, -24),    S(-70, -34),    S(-110, -37),   S(-131, -22),   S(-161, -30),   //
    S(-29, -70),    S(102, -65),    S(57, -29),     S(1, -11),      S(-33, -25),    S(-69, -30),    S(-97, -6),     S(-136, -19),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-379, -155),  S(-333, 59),    S(-447, 237),   S(-106, 65),    S(-241, 92),    S(-329, 99),    S(-557, 87),    S(-522, -14),   //
    S(13, 0),       S(80, 7),       S(179, -60),    S(129, 3),      S(127, 11),     S(65, -13),     S(7, 8),        S(-10, -35),    //
    S(74, -24),     S(116, 28),     S(202, 18),     S(157, 38),     S(157, 27),     S(72, 36),      S(69, 9),       S(-27, 13),     //
    S(118, 15),     S(89, 49),      S(123, 53),     S(109, 77),     S(119, 63),     S(81, 58),      S(52, 16),      S(44, 13),      //
    S(107, 2),      S(127, -1),     S(114, 25),     S(93, 38),      S(82, 50),      S(75, 45),      S(55, 13),      S(48, -42),     //
    S(16, -24),     S(38, -37),     S(32, -20),     S(44, 25),      S(52, 21),      S(-5, 0),       S(2, -38),      S(-30, -43),    //
    S(23, -8),      S(43, -37),     S(23, -33),     S(25, -14),     S(13, -21),     S(-15, -41),    S(1, -55),      S(-54, -125),   //
    S(-18, -59),    S(20, -18),     S(37, -43),     S(51, -38),     S(44, -31),     S(-2, -62),     S(-18, -34),    S(-73, -82),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-169, 61),    S(-193, 45),    S(-436, 70),    S(-318, 85),    S(-264, 88),    S(-433, 114),   S(-176, 92),    S(-127, 65),    //
    S(0, -48),      S(-13, 33),     S(4, 13),       S(-12, 15),     S(-37, 31),     S(1, 22),       S(-23, 15),     S(-63, 14),     //
    S(31, 10),      S(88, 16),      S(177, 24),     S(105, 21),     S(84, 23),      S(53, 38),      S(107, 8),      S(-6, 13),      //
    S(36, -27),     S(39, 32),      S(96, 27),      S(103, 55),     S(113, 54),     S(45, 49),      S(14, 33),      S(-27, 11),     //
    S(38, -54),     S(57, -6),      S(62, 17),      S(67, 42),      S(61, 60),      S(12, 50),      S(1, 7),        S(-11, -50),    //
    S(57, -54),     S(94, -30),     S(102, -16),    S(44, 25),      S(26, 29),      S(24, 26),      S(52, -17),     S(21, -52),     //
    S(43, -90),     S(93, -64),     S(64, -52),     S(37, -23),     S(26, -37),     S(30, -49),     S(10, -36),     S(31, -103),    //
    S(41, -74),     S(30, -28),     S(37, -21),     S(52, -58),     S(61, -69),     S(57, -27),     S(44, -55),     S(19, -54),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(115, 5),      S(165, 9),      S(94, 40),      S(105, 32),     S(114, 21),     S(66, 32),      S(80, 33),      S(91, 36),      //
    S(37, 57),      S(114, 35),     S(189, 13),     S(127, 52),     S(143, 40),     S(92, 49),      S(34, 67),      S(22, 74),      //
    S(25, 36),      S(166, -2),     S(202, -10),    S(220, -20),    S(174, -9),     S(94, 33),      S(111, 21),     S(-12, 73),     //
    S(-23, 34),     S(40, 27),      S(78, 17),      S(122, -26),    S(90, -1),      S(24, 47),      S(-2, 50),      S(-68, 60),     //
    S(-101, -8),    S(-21, -6),     S(-33, 7),      S(-34, 5),      S(-39, 1),      S(-61, 42),     S(-91, 40),     S(-113, 33),    //
    S(-130, -24),   S(-54, -54),    S(-53, -28),    S(-66, -27),    S(-47, -45),    S(-96, 6),      S(-103, -8),    S(-131, -8),    //
    S(-187, -15),   S(-83, -76),    S(-60, -60),    S(-45, -62),    S(-50, -58),    S(-69, -42),    S(-93, -63),    S(-136, -42),   //
    S(-155, -17),   S(-120, -8),    S(-67, -45),    S(-30, -64),    S(-39, -51),    S(-53, -41),    S(-75, -46),    S(-106, -28),   //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(42, 34),      S(75, 4),       S(75, 15),      S(-45, 145),    S(28, 60),      S(-28, 88),     S(43, 0),       S(-13, 17),     //
    S(30, 74),      S(-44, 171),    S(-48, 224),    S(-137, 257),   S(-109, 203),   S(-117, 201),   S(-70, 108),    S(-31, 46),     //
    S(-10, 106),    S(76, 105),     S(13, 184),     S(-2, 192),     S(-41, 172),    S(-75, 175),    S(-1, 66),      S(-35, 40),     //
    S(38, 39),      S(30, 114),     S(0, 144),      S(-6, 202),     S(-26, 183),    S(-37, 123),    S(-6, 38),      S(-5, -7),      //
    S(5, 61),       S(34, 26),      S(7, 96),       S(-23, 144),    S(-37, 133),    S(-34, 94),     S(-22, 17),     S(-14, -37),    //
    S(25, -111),    S(40, -57),     S(45, 7),       S(-9, 37),      S(4, -8),       S(6, -4),       S(16, -72),     S(-1, -69),     //
    S(13, -216),    S(42, -317),    S(33, -182),    S(49, -108),    S(22, -89),     S(40, -160),    S(14, -98),     S(0, -98),      //
    S(-39, -142),   S(26, -395),    S(22, -385),    S(55, -295),    S(57, -210),    S(61, -256),    S(43, -217),    S(-15, -133),   //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-162, -369),  S(82, -16),     S(-67, 33),     S(-173, 57),    S(20, -16),     S(20, -16),     S(20, -16),     S(20, -16),     //
    S(193, -115),   S(4, 143),      S(23, 129),     S(125, 60),     S(20, -16),     S(20, -16),     S(20, -16),     S(20, -16),     //
    S(-35, 55),     S(66, 133),     S(106, 102),    S(90, 58),      S(20, -16),     S(20, -16),     S(20, -16),     S(20, -16),     //
    S(-257, 79),    S(30, 93),      S(23, 91),      S(-32, 76),     S(20, -16),     S(20, -16),     S(20, -16),     S(20, -16),     //
    S(-231, 37),    S(-45, 66),     S(-31, 73),     S(-113, 108),   S(20, -16),     S(20, -16),     S(20, -16),     S(20, -16),     //
    S(-139, 7),     S(51, 11),      S(-38, 61),     S(-80, 87),     S(20, -16),     S(20, -16),     S(20, -16),     S(20, -16),     //
    S(75, -83),     S(128, -42),    S(40, 4),       S(-42, 48),     S(20, -16),     S(20, -16),     S(20, -16),     S(20, -16),     //
    S(-48, -112),   S(89, -104),    S(-8, -68),     S(-22, -68),    S(20, -16),     S(20, -16),     S(20, -16),     S(20, -16),     //
};
// Epoch duration: 38.9337s
// Loss: 0.00246796
// clang-format on
}
