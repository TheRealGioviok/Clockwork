#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(273, 417);
inline const PParam KNIGHT_MAT = S(1050, 973);
inline const PParam BISHOP_MAT = S(1019, 1010);
inline const PParam ROOK_MAT   = S(1551, 1709);
inline const PParam QUEEN_MAT  = S(3524, 3053);
inline const PParam TEMPO_VAL  = S(55, 16);

inline const PParam BISHOP_PAIR_VAL  = S(76, 176);
inline const PParam DOUBLED_PAWN_VAL = S(-20, -86);

inline const PParam POTENTIAL_CHECKER_VAL = S(-77, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(8, 21), S(51, 36), S(81, 70), S(204, 134), S(505, 309), S(1233, 1020),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(65, 43), S(64, 27), S(67, 52), S(154, 116), S(684, -79),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-67, 8), S(-50, 24), S(-21, 96), S(52, 166), S(112, 278), S(208, 85),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(57, -46), S(36, -2), S(18, 28), S(24, 74), S(97, 150), S(185, 270),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(29, -51), S(2, -1), S(-27, -22), S(-32, -46), S(-50, -92), S(-248, -137),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(0, 52), S(-37, 29), S(-23, -21), S(-12, -48), S(-7, -40), S(21, -45), S(4, -58),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-212, -77), S(-3, -36), S(0, -6), S(17, 24), S(21, 47), S(44, 44), S(-2, 66),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-311, -252), S(-138, -114), S(-57, -53), S(7, -17), S(54, -4), S(71, 20), S(108, 16), S(150, 0), S(196, -29),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-122, -255), S(-144, -331), S(-31, -122), S(36, -63), S(73, -39), S(95, -14), S(116, 2), S(130, 17), S(145, 26), S(164, 19), S(170, 21), S(224, -18), S(244, -47), S(315, -91),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-121, -137), S(5, -266), S(-77, -93), S(-32, -42), S(3, -16), S(33, -6), S(50, 12), S(74, 15), S(100, 15), S(125, 22), S(152, 28), S(179, 27), S(213, 24), S(228, 13), S(365, -107),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-257, 71), S(-284, -799), S(-232, -804), S(-237, -531), S(-189, -394), S(-121, -330), S(-97, -169), S(-59, -103), S(-46, -34), S(-37, 1), S(-25, 37), S(-22, 64), S(-2, 55), S(8, 59), S(10, 76), S(24, 65), S(37, 55), S(40, 57), S(60, 27), S(56, 19), S(98, -27), S(114, -74), S(110, -64), S(286, -240), S(305, -289), S(631, -495), S(624, -528), S(1251, -852),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(400, 528), S(138, 791), S(-186, 657), S(-157, 580), S(-80, 510), S(-37, 474), S(40, 440), S(81, 416), S(121, 373),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(85, -30), S(157, -72),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(37, 0), S(145, -39),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(77, -48), S(81, -74), S(123, -69), S(154, -124),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-41, 32), S(-57, 41), S(-1, -10), S(148, -92), S(339, -223),
};

inline const PParam PAWN_THREAT_KNIGHT = S(234, 67);
inline const PParam PAWN_THREAT_BISHOP = S(189, 94);
inline const PParam PAWN_THREAT_ROOK   = S(189, 53);
inline const PParam PAWN_THREAT_QUEEN  = S(159, -39);

inline const PParam KNIGHT_THREAT_BISHOP = S(107, 78);
inline const PParam KNIGHT_THREAT_ROOK   = S(234, 2);
inline const PParam KNIGHT_THREAT_QUEEN  = S(149, -73);

inline const PParam BISHOP_THREAT_KNIGHT = S(113, 33);
inline const PParam BISHOP_THREAT_ROOK   = S(235, 59);
inline const PParam BISHOP_THREAT_QUEEN  = S(189, 66);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(203, 398),    S(198, 446),    S(234, 417),    S(297, 290),    S(230, 294),    S(235, 354),    S(154, 373),    S(206, 340),    //
    S(-5, -8),      S(110, 25),     S(82, -32),     S(85, -93),     S(49, -113),    S(-3, -69),     S(-31, -23),    S(-84, -30),    //
    S(-35, -69),    S(-14, -63),    S(-3, -108),    S(-23, -121),   S(-30, -130),   S(-62, -130),   S(-100, -79),   S(-127, -62),   //
    S(-37, -128),   S(-19, -97),    S(-28, -134),   S(-44, -134),   S(-62, -147),   S(-82, -134),   S(-130, -84),   S(-149, -98),   //
    S(-53, -156),   S(13, -149),    S(-42, -104),   S(-75, -102),   S(-83, -119),   S(-125, -126),  S(-136, -110),  S(-171, -115),  //
    S(-27, -156),   S(114, -152),   S(67, -118),    S(-2, -100),    S(-49, -112),   S(-83, -119),   S(-106, -92),   S(-144, -104),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-346, -105),  S(-310, 27),    S(-395, 211),   S(-128, 76),    S(-267, 96),    S(-353, 119),   S(-534, 49),    S(-473, 11),    //
    S(22, -12),     S(86, 6),       S(185, -46),    S(118, 25),     S(121, 29),     S(58, 5),       S(12, -2),      S(0, -49),      //
    S(61, -26),     S(109, 43),     S(196, 44),     S(150, 56),     S(161, 46),     S(70, 56),      S(72, 27),      S(-27, 12),     //
    S(99, 10),      S(84, 59),      S(108, 79),     S(119, 95),     S(118, 83),     S(74, 89),      S(35, 33),      S(33, 3),       //
    S(94, -9),      S(101, 11),     S(95, 53),      S(77, 61),      S(76, 71),      S(67, 71),      S(35, 27),      S(34, -58),     //
    S(11, -37),     S(31, -28),     S(17, -1),      S(25, 48),      S(34, 47),      S(-27, 28),     S(1, -32),      S(-36, -49),    //
    S(20, -12),     S(25, -43),     S(7, -27),      S(5, -10),      S(9, -27),      S(-23, -37),    S(0, -65),      S(-59, -134),   //
    S(-44, -97),    S(-7, -54),     S(-12, -59),    S(-1, -46),     S(-7, -40),     S(-57, -75),    S(-53, -65),    S(-84, -114),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-114, 93),    S(-126, 48),    S(-370, 83),    S(-296, 118),   S(-226, 113),   S(-402, 140),   S(-109, 107),   S(-65, 96),     //
    S(58, -14),     S(24, 48),      S(37, 38),      S(25, 26),      S(15, 38),      S(28, 42),      S(0, 43),       S(-18, 43),     //
    S(55, 48),      S(112, 41),     S(220, 27),     S(128, 30),     S(109, 30),     S(88, 47),      S(129, 26),     S(28, 47),      //
    S(77, -2),      S(61, 51),      S(125, 31),     S(128, 60),     S(137, 59),     S(67, 57),      S(46, 44),      S(8, 33),       //
    S(66, -22),     S(86, 7),       S(80, 29),      S(97, 44),      S(80, 68),      S(39, 59),      S(29, 13),      S(33, -34),     //
    S(101, -26),    S(109, -16),    S(123, -10),    S(54, 35),      S(48, 45),      S(40, 41),      S(74, -6),      S(72, -39),     //
    S(109, -51),    S(117, -44),    S(87, -38),     S(71, -10),     S(53, -30),     S(56, -33),     S(28, -20),     S(92, -66),     //
    S(95, -38),     S(43, -14),     S(36, -11),     S(58, -45),     S(71, -53),     S(54, -36),     S(59, -48),     S(73, -30),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(142, 46),     S(205, 47),     S(134, 74),     S(134, 72),     S(163, 48),     S(100, 66),     S(111, 72),     S(126, 73),     //
    S(88, 89),      S(174, 64),     S(230, 52),     S(173, 88),     S(186, 74),     S(141, 84),     S(94, 96),      S(73, 107),     //
    S(71, 69),      S(210, 38),     S(253, 21),     S(280, 12),     S(236, 23),     S(154, 64),     S(169, 51),     S(43, 104),     //
    S(18, 63),      S(93, 52),      S(135, 45),     S(190, -1),     S(155, 25),     S(83, 78),      S(56, 75),      S(-26, 89),     //
    S(-67, 20),     S(17, 23),      S(13, 32),      S(17, 33),      S(15, 28),      S(-19, 76),     S(-47, 70),     S(-73, 62),     //
    S(-103, 0),     S(-26, -29),    S(-29, -7),     S(-42, 1),      S(-18, -18),    S(-65, 28),     S(-71, 18),     S(-97, 12),     //
    S(-166, 12),    S(-68, -37),    S(-46, -28),    S(-30, -32),    S(-35, -26),    S(-47, -14),    S(-60, -36),    S(-107, -19),   //
    S(-122, 10),    S(-72, 19),     S(-27, -14),    S(11, -30),     S(1, -16),      S(-11, -10),    S(-33, -17),    S(-73, -1),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(77, 67),      S(94, 42),      S(93, 51),      S(-34, 187),    S(54, 85),      S(-18, 131),    S(64, 28),      S(17, 56),      //
    S(58, 115),     S(-28, 210),    S(-32, 261),    S(-103, 282),   S(-84, 231),    S(-103, 243),   S(-41, 142),    S(-3, 79),      //
    S(3, 156),      S(88, 151),     S(40, 216),     S(26, 215),     S(-13, 202),    S(-55, 214),    S(24, 105),     S(-14, 78),     //
    S(52, 77),      S(38, 158),     S(8, 188),      S(18, 232),     S(-5, 217),     S(-10, 151),    S(6, 82),       S(7, 37),       //
    S(11, 101),     S(51, 59),      S(18, 132),     S(-3, 180),     S(-24, 178),    S(-22, 135),    S(-9, 59),      S(-10, 13),     //
    S(25, -80),     S(35, -24),     S(30, 56),      S(-22, 94),     S(0, 41),       S(3, 50),       S(12, -24),     S(-2, -12),     //
    S(12, -179),    S(32, -270),    S(17, -128),    S(38, -57),     S(10, -37),     S(29, -109),    S(11, -41),     S(5, -55),      //
    S(-19, -97),    S(35, -355),    S(29, -348),    S(61, -260),    S(63, -181),    S(63, -208),    S(43, -162),    S(2, -95),      //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-32, -493),   S(151, -63),    S(-33, 5),      S(-127, 42),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(236, -143),   S(-93, 147),    S(-65, 142),    S(85, 78),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(0, 20),       S(-21, 152),    S(5, 129),      S(17, 83),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-201, 40),    S(-30, 112),    S(-27, 114),    S(-86, 97),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-143, -18),   S(-109, 88),    S(-76, 89),     S(-161, 130),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-67, -46),    S(-33, 42),     S(-114, 91),    S(-162, 117),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(135, -128),   S(10, 12),      S(-73, 54),     S(-149, 94),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(151, -286),   S(121, -132),   S(28, -99),     S(3, -93),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on
}
