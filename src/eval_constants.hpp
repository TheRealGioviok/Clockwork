#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(293, 329);
inline const PParam KNIGHT_MAT = S(1113, 905);
inline const PParam BISHOP_MAT = S(1234, 962);
inline const PParam ROOK_MAT   = S(1726, 1685);
inline const PParam QUEEN_MAT  = S(3570, 2849);
inline const PParam TEMPO_VAL  = S(59, 15);

inline const PParam BISHOP_PAIR_VAL  = S(78, 175);
inline const PParam ROOK_OPEN_VAL  = S(103, -29);
inline const PParam ROOK_SEMIOPEN_VAL  = S(40, 12);

inline const PParam DOUBLED_PAWN_VAL = S(-41, -77);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -3);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(18, 20), S(60, 33), S(76, 70), S(196, 139), S(563, 253), S(933, 1128),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(62, 45), S(60, 31), S(66, 57), S(145, 124), S(697, -81),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-63, -100), S(-51, -82), S(-28, -6), S(22, 75), S(53, 211), S(296, 307),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(48, -41), S(35, -5), S(21, 26), S(28, 71), S(96, 147), S(153, 292),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(14, -41), S(0, 5), S(-5, -21), S(-4, -42), S(-13, -91), S(-199, -140),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(29, 88), S(-8, 80), S(-6, 33), S(5, 6), S(15, 11), S(44, 9), S(26, -4),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-169, -66), S(42, -15), S(-3, 37), S(16, 71), S(20, 97), S(37, 99), S(-3, 113),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-224, -222), S(-117, -58), S(-58, -4), S(-13, 30), S(35, 46), S(64, 85), S(103, 83), S(140, 85), S(190, 27),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-232, -279), S(-157, -93), S(-81, -32), S(-46, 17), S(-15, 47), S(1, 67), S(18, 81), S(34, 85), S(50, 87), S(59, 79), S(77, 65), S(137, 12), S(158, -12), S(217, -49),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-315, -248), S(-152, -84), S(-98, -20), S(-67, -10), S(-40, 13), S(-26, 36), S(-8, 48), S(10, 54), S(26, 67), S(44, 76), S(61, 79), S(73, 82), S(92, 86), S(101, 75), S(252, -57),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-986, -889), S(-251, -659), S(-153, -527), S(-100, -317), S(-91, -114), S(-54, -5), S(-49, 102), S(-26, 116), S(-21, 171), S(-9, 196), S(0, 221), S(4, 236), S(22, 229), S(32, 241), S(38, 236), S(51, 233), S(57, 226), S(58, 232), S(85, 187), S(108, 151), S(124, 131), S(170, 64), S(185, 54), S(349, -122), S(388, -168), S(623, -322), S(380, -190), S(496, -258),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(446, 14), S(103, -126), S(-3, -35), S(-20, 3), S(-48, 7), S(-84, 12), S(-63, 15), S(-74, 10), S(-73, -41),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(80, -28), S(149, -71),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(37, -5), S(140, -41),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(68, -47), S(53, -64), S(105, -64), S(167, -132),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-39, 29), S(-58, 42), S(-2, -6), S(159, -94), S(362, -242),
};

inline const PParam PAWN_THREAT_KNIGHT = S(232, 72);
inline const PParam PAWN_THREAT_BISHOP = S(209, 113);
inline const PParam PAWN_THREAT_ROOK   = S(189, 57);
inline const PParam PAWN_THREAT_QUEEN  = S(168, -51);

inline const PParam KNIGHT_THREAT_BISHOP = S(105, 67);
inline const PParam KNIGHT_THREAT_ROOK   = S(243, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(154, -65);

inline const PParam BISHOP_THREAT_KNIGHT = S(108, 27);
inline const PParam BISHOP_THREAT_ROOK   = S(242, 48);
inline const PParam BISHOP_THREAT_QUEEN  = S(188, 55);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(-3, -9), S(-5, -4), S(-4, -12), S(-10, -21), S(-17, -26), S(-22, -33), S(-24, -42), S(-30, -44), S(-39, -49),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(118, 155),    S(111, 200),    S(180, 169),    S(238, 55),     S(183, 50),     S(168, 113),    S(63, 134),     S(120, 113),    //
    S(69, 36),      S(190, 61),     S(163, 8),      S(162, -44),    S(113, -60),    S(59, -15),     S(23, 29),      S(-34, 34),     //
    S(-12, 7),      S(11, 10),      S(30, -33),     S(16, -46),     S(-3, -49),     S(-44, -43),    S(-88, 4),      S(-117, 25),    //
    S(-37, -40),    S(-11, -13),    S(-16, -45),    S(-32, -43),    S(-59, -51),    S(-84, -41),    S(-135, 7),     S(-160, -4),    //
    S(-41, -69),    S(28, -67),     S(-19, -22),    S(-53, -17),    S(-75, -26),    S(-114, -28),   S(-134, -15),   S(-163, -23),   //
    S(-32, -63),    S(100, -59),    S(55, -22),     S(-4, -2),      S(-43, -14),    S(-78, -20),    S(-104, 3),     S(-143, -11),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-374, -152),  S(-333, 61),    S(-446, 241),   S(-112, 69),    S(-242, 94),    S(-329, 102),   S(-549, 87),    S(-521, -8),    //
    S(15, 0),       S(78, 9),       S(178, -60),    S(127, 3),      S(128, 11),     S(62, -12),     S(5, 10),       S(-12, -32),    //
    S(75, -25),     S(116, 25),     S(202, 16),     S(158, 35),     S(158, 25),     S(70, 35),      S(66, 10),      S(-29, 15),     //
    S(120, 15),     S(92, 46),      S(125, 49),     S(111, 73),     S(121, 60),     S(83, 55),      S(54, 15),      S(44, 13),      //
    S(110, 2),      S(129, -2),     S(116, 23),     S(94, 36),      S(84, 48),      S(76, 43),      S(57, 13),      S(49, -40),     //
    S(19, -24),     S(42, -38),     S(36, -22),     S(47, 22),      S(54, 20),      S(-2, -2),      S(4, -38),      S(-28, -41),    //
    S(27, -6),      S(47, -39),     S(27, -34),     S(28, -15),     S(15, -21),     S(-12, -42),    S(1, -51),      S(-55, -117),   //
    S(-16, -57),    S(19, -16),     S(35, -40),     S(44, -33),     S(36, -24),     S(-10, -56),    S(-21, -31),    S(-69, -81),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-161, 68),    S(-186, 51),    S(-428, 75),    S(-309, 89),    S(-259, 94),    S(-428, 122),   S(-171, 98),    S(-116, 70),    //
    S(4, -40),      S(-6, 38),      S(9, 18),       S(-6, 19),      S(-32, 36),     S(3, 29),       S(-14, 19),     S(-57, 18),     //
    S(36, 17),      S(94, 23),      S(180, 30),     S(110, 25),     S(89, 27),      S(61, 42),      S(112, 13),     S(-3, 19),      //
    S(39, -20),     S(46, 36),      S(101, 32),     S(110, 58),     S(120, 57),     S(51, 53),      S(20, 37),      S(-23, 17),     //
    S(46, -50),     S(64, -1),      S(70, 21),      S(75, 46),      S(69, 63),      S(19, 54),      S(8, 12),       S(-5, -45),     //
    S(62, -49),     S(103, -25),    S(109, -12),    S(52, 29),      S(32, 35),      S(32, 31),      S(60, -12),     S(26, -45),     //
    S(49, -84),     S(100, -60),    S(70, -48),     S(42, -17),     S(32, -32),     S(34, -42),     S(16, -29),     S(35, -94),     //
    S(46, -66),     S(32, -19),     S(37, -13),     S(48, -49),     S(56, -59),     S(52, -17),     S(45, -44),     S(27, -47),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(98, 13),      S(162, 11),     S(88, 42),      S(94, 35),      S(100, 24),     S(49, 37),      S(57, 40),      S(67, 44),      //
    S(13, 67),      S(99, 42),      S(173, 19),     S(102, 61),     S(116, 49),     S(64, 58),      S(4, 77),       S(-3, 83),      //
    S(4, 43),       S(152, 0),      S(181, -5),     S(183, -9),     S(137, 0),      S(62, 42),      S(80, 29),      S(-38, 80),     //
    S(-32, 35),     S(33, 26),      S(66, 17),      S(94, -21),     S(63, 4),       S(-1, 52),      S(-23, 53),     S(-82, 61),     //
    S(-98, -11),    S(-21, -10),    S(-36, 4),      S(-50, 6),      S(-55, 2),      S(-75, 43),     S(-103, 40),    S(-118, 32),    //
    S(-118, -32),   S(-47, -63),    S(-51, -33),    S(-72, -30),    S(-55, -49),    S(-104, 4),     S(-107, -12),   S(-126, -13),   //
    S(-177, -21),   S(-78, -85),    S(-54, -69),    S(-50, -66),    S(-57, -61),    S(-76, -45),    S(-97, -67),    S(-127, -49),   //
    S(-142, -18),   S(-111, -14),   S(-57, -50),    S(-32, -68),    S(-46, -53),    S(-58, -42),    S(-74, -49),    S(-91, -31),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(46, 32),      S(81, 1),       S(88, 6),       S(-34, 137),    S(32, 57),      S(-22, 83),     S(45, -2),      S(-13, 16),     //
    S(26, 79),      S(-46, 173),    S(-49, 225),    S(-136, 256),   S(-107, 202),   S(-118, 201),   S(-70, 108),    S(-35, 49),     //
    S(-13, 111),    S(74, 109),     S(14, 183),     S(-1, 193),     S(-39, 171),    S(-75, 175),    S(-2, 69),      S(-38, 43),     //
    S(35, 41),      S(31, 114),     S(0, 143),      S(-6, 202),     S(-25, 183),    S(-38, 123),    S(-6, 39),      S(-7, -4),      //
    S(5, 60),       S(36, 24),      S(9, 93),       S(-22, 141),    S(-35, 130),    S(-32, 91),     S(-20, 16),     S(-15, -35),    //
    S(24, -110),    S(44, -62),     S(47, 3),       S(-6, 30),      S(6, -13),      S(9, -8),       S(18, -73),     S(-1, -70),     //
    S(13, -219),    S(46, -321),    S(35, -188),    S(50, -111),    S(23, -91),     S(41, -163),    S(15, -100),    S(0, -98),      //
    S(-42, -135),   S(20, -388),    S(16, -378),    S(43, -283),    S(45, -200),    S(50, -246),    S(35, -205),    S(-17, -129),   //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-152, -379),  S(98, -28),     S(-51, 26),     S(-200, 65),    S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(208, -124),   S(18, 138),     S(31, 126),     S(132, 59),     S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(-34, 54),     S(83, 131),     S(115, 102),    S(96, 59),      S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(-247, 77),    S(34, 96),      S(29, 92),      S(-30, 78),     S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(-228, 39),    S(-43, 70),     S(-31, 77),     S(-114, 112),   S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(-137, 11),    S(55, 14),      S(-35, 65),     S(-78, 90),     S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(80, -81),     S(135, -41),    S(47, 5),       S(-34, 49),     S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
    S(-44, -110),   S(87, -99),     S(-13, -62),    S(-31, -61),    S(20, -14),     S(20, -14),     S(20, -14),     S(20, -14),     //
};

inline const std::array<PParam, 9> IMBALANCE_LIN_PAWNS = {
    S(138, -87), S(18, 10), S(35, 10), S(-5, 18), S(-19, 9), S(-25, -2), S(-14, -5), S(13, 13), S(55, -15),
};
inline const auto IMBALANCE_LIN_PIECES = std::to_array({
    std::to_array({ S(-8, 6),  S(2, -3),   S(-6, 21) }),
    std::to_array({ S(2, 1),   S(0, -2),   S(-1, -1) }),
    std::to_array({ S(-15, 7), S(13, 2),   S(-6, -7) }),
    std::to_array({ S(0, -4),  S(86, 46),  S(-424, -269) }),
});


// Epoch duration: 71.1385s
// clang-format on
}
