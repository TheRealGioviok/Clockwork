#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(283, 449);
inline const PScore KNIGHT_MAT = S(949, 998);
inline const PScore BISHOP_MAT = S(971, 1076);
inline const PScore ROOK_MAT   = S(1446, 1810);
inline const PScore QUEEN_MAT  = S(3171, 3283);
inline const PScore TEMPO_VAL  = S(28, 17);

inline const PScore BISHOP_PAIR_VAL  = S(73, 196);
inline const PScore DOUBLED_PAWN_VAL = S(-50, -77);

inline const PScore POTENTIAL_CHECKER_VAL = S(-73, -2);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(0, 21), S(55, 29), S(84, 71), S(193, 146), S(488, 567), S(1755, 1472),
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(47, 47), S(50, 22), S(52, 38), S(101, 113), S(649, -132),
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(0, 4), S(-25, 37), S(-26, 88), S(43, 140), S(73, 246), S(26, 39),
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-214, -195), S(-107, -130), S(-56, -32), S(-7, -4), S(38, 17), S(57, 62), S(87, 60), S(111, 57), S(163, -25),
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-138, -276), S(-86, -182), S(-26, -120), S(-11, -62), S(25, -30), S(39, -7), S(62, 2), S(70, 13), S(77, 24), S(78, 21), S(103, 9), S(163, -44), S(195, -55), S(263, -88),
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-226, -329), S(-87, -113), S(-43, -41), S(-23, -43), S(-9, -8), S(4, 7), S(23, 15), S(50, 10), S(75, 20), S(102, 28), S(127, 27), S(139, 33), S(185, 19), S(171, 20), S(270, -72),
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(64, 100), S(-623, 532), S(-216, -394), S(-160, -207), S(-118, -254), S(-85, -208), S(-118, -13), S(-94, -45), S(-80, -12), S(-78, 15), S(-68, 33), S(-66, 66), S(-43, 50), S(-32, 49), S(-23, 51), S(-11, 47), S(-24, 70), S(-1, 31), S(11, 20), S(45, -33), S(88, -82), S(118, -141), S(215, -219), S(416, -416), S(373, -422), S(950, -710), S(736, -632), S(1393, -1021),
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(398, 798), S(84, 441), S(15, 485), S(17, 514), S(-3, 505), S(-25, 485), S(-9, 493), S(0, 462), S(51, 339),
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -38), S(154, -90),
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(22, 0), S(129, -41),
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -64), S(90, -81), S(140, -80), S(159, -130),
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-53, 38), S(-68, 49), S(12, -27), S(184, -126), S(422, -272),
};

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(-123, 488),   S(21, 489),     S(163, 437),    S(322, 215),    S(268, 232),    S(286, 326),    S(163, 364),    S(216, 354),    //
    S(9, -9),       S(176, 10),     S(117, -71),    S(149, -179),   S(73, -181),    S(17, -95),     S(-35, -13),    S(-56, -23),    //
    S(-45, -71),    S(-26, -66),    S(-29, -112),   S(-33, -146),   S(-46, -146),   S(-95, -140),   S(-109, -69),   S(-134, -48),   //
    S(-43, -146),   S(-16, -109),   S(-54, -152),   S(-55, -153),   S(-74, -164),   S(-106, -142),  S(-143, -73),   S(-160, -92),   //
    S(-35, -180),   S(26, -176),    S(-36, -135),   S(-96, -120),   S(-88, -141),   S(-139, -136),  S(-145, -109),  S(-174, -113),  //
    S(-32, -181),   S(122, -180),   S(37, -139),    S(-60, -98),    S(-80, -154),   S(-104, -132),  S(-118, -89),   S(-153, -107),  //
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-393, -153),  S(-80, -68),    S(-547, 316),   S(-16, 59),     S(-327, 160),   S(-340, 176),   S(-398, -10),   S(-524, 55),    //
    S(87, -27),     S(101, 65),     S(275, -75),    S(62, 71),      S(139, 41),     S(118, -17),    S(-12, 18),     S(47, -49),     //
    S(27, 37),      S(33, 118),     S(233, 64),     S(143, 89),     S(181, 55),     S(58, 67),      S(66, 32),      S(-62, 20),     //
    S(114, 45),     S(25, 105),     S(86, 106),     S(62, 125),     S(82, 87),      S(72, 86),      S(-3, 33),      S(12, 50),      //
    S(82, 30),      S(94, 39),      S(74, 77),      S(37, 73),      S(37, 86),      S(46, 85),      S(3, 38),       S(21, -55),     //
    S(-13, -18),    S(23, -29),     S(4, -20),      S(29, 49),      S(46, 47),      S(-40, 6),      S(-28, -9),     S(-76, -11),    //
    S(17, 74),      S(35, -19),     S(-15, -11),    S(-15, 11),     S(-22, 0),      S(-41, -29),    S(-29, -50),    S(-112, -108),  //
    S(-50, -7),     S(-2, -23),     S(48, -93),     S(37, -28),     S(64, -42),     S(1, -138),     S(-51, -39),    S(-167, -50),   //
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-107, 100),   S(-49, 23),     S(-565, 129),   S(-271, 113),   S(-322, 137),   S(-416, 136),   S(-14, 77),     S(-22, 55),     //
    S(12, -38),     S(29, 65),      S(37, 51),      S(78, -2),      S(42, 30),      S(19, 49),      S(28, 27),      S(-66, 48),     //
    S(9, 76),       S(61, 74),      S(280, 34),     S(141, 31),     S(97, 40),      S(35, 79),      S(135, 24),     S(-3, 84),      //
    S(17, 19),      S(50, 58),      S(130, 38),     S(133, 53),     S(144, 53),     S(60, 72),      S(57, 41),      S(-40, 62),     //
    S(36, -26),     S(32, 39),      S(47, 38),      S(89, 54),      S(88, 86),      S(17, 73),      S(31, 9),       S(22, -52),     //
    S(64, -27),     S(96, -2),      S(98, 0),       S(19, 56),      S(16, 64),      S(5, 74),       S(68, 4),       S(41, -49),     //
    S(21, -53),     S(99, -30),     S(41, -21),     S(18, 19),      S(9, -8),       S(47, -24),     S(-6, 10),      S(61, -107),    //
    S(40, -2),      S(15, 6),       S(5, 20),       S(13, -39),     S(-2, -35),     S(19, 2),       S(34, -67),     S(-48, 20),     //
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(106, 30),     S(200, 34),     S(90, 78),      S(76, 86),      S(98, 60),      S(57, 60),      S(80, 59),      S(86, 61),      //
    S(119, 69),     S(165, 65),     S(235, 44),     S(150, 96),     S(146, 93),     S(62, 111),     S(23, 110),     S(48, 100),     //
    S(26, 77),      S(286, 10),     S(232, 25),     S(250, 4),      S(155, 40),     S(67, 79),      S(119, 48),     S(-21, 92),     //
    S(1, 58),       S(40, 56),      S(70, 47),      S(118, -6),     S(81, 23),      S(24, 84),      S(4, 72),       S(-79, 73),     //
    S(-118, 10),    S(5, 0),        S(-23, 30),     S(-22, 27),     S(-28, 23),     S(-61, 79),     S(-106, 78),    S(-121, 57),    //
    S(-110, -3),    S(0, -79),      S(-29, -29),    S(-64, -9),     S(-29, -33),    S(-118, 32),    S(-118, 15),    S(-121, 1),     //
    S(-162, 19),    S(-88, -49),    S(-43, -54),    S(-37, -41),    S(-53, -24),    S(-63, -21),    S(-120, -30),   S(-125, -32),   //
    S(-124, -1),    S(-94, 10),     S(-54, -26),    S(-21, -40),    S(-35, -20),    S(-43, -26),    S(-60, -39),    S(-86, -21),    //
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(48, 76),      S(61, 49),      S(83, 71),      S(-94, 227),    S(-2, 118),     S(-58, 156),    S(51, 33),      S(-26, 35),     //
    S(88, 66),      S(-96, 254),    S(-58, 311),    S(-155, 333),   S(-109, 255),   S(-150, 271),   S(-71, 134),    S(-9, 34),      //
    S(-43, 185),    S(77, 169),     S(47, 205),     S(-22, 265),    S(-42, 210),    S(-84, 222),    S(7, 96),       S(-14, 18),     //
    S(44, 72),      S(20, 158),     S(11, 171),     S(-18, 242),    S(-23, 219),    S(-4, 116),     S(0, 52),       S(-23, 49),     //
    S(27, 87),      S(51, 67),      S(21, 132),     S(-13, 174),    S(-32, 184),    S(-26, 136),    S(-11, 24),     S(-14, -29),    //
    S(64, -145),    S(54, -22),     S(38, 54),      S(-40, 119),    S(6, 41),       S(-3, 48),      S(26, -56),     S(-5, -44),     //
    S(57, -254),    S(44, -308),    S(20, -127),    S(43, -47),     S(-2, -6),      S(48, -135),    S(30, -63),     S(-13, -36),    //
    S(-75, -62),    S(-71, -348),   S(-16, -292),   S(17, -215),    S(44, -123),    S(63, -212),    S(37, -160),    S(-20, -56),    //
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(486, -700),   S(270, -133),   S(-41, -18),    S(-163, 49),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(359, -165),   S(7, 133),      S(-47, 161),    S(275, 75),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-28, 36),     S(103, 147),    S(168, 113),    S(217, 55),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-233, 59),    S(-16, 124),    S(129, 112),    S(99, 76),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-204, 0),     S(-38, 72),     S(29, 75),      S(-42, 123),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-147, -38),   S(61, -9),      S(-41, 59),     S(-91, 106),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(80, -122),    S(119, -50),    S(2, 20),       S(-113, 83),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-26, -188),   S(75, -144),    S(-56, -98),    S(-24, -128),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
