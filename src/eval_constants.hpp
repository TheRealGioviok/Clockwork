#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(306, 408);
inline const PParam KNIGHT_MAT = S(1081, 967);
inline const PParam BISHOP_MAT = S(1052, 1018);
inline const PParam ROOK_MAT   = S(1590, 1704);
inline const PParam QUEEN_MAT  = S(3595, 3053);
inline const PParam TEMPO_VAL  = S(58, 16);

inline const PParam BISHOP_PAIR_VAL  = S(81, 173);
inline const PParam DOUBLED_PAWN_VAL = S(-45, -81);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(14, 21), S(56, 32), S(80, 68), S(201, 136), S(502, 282), S(1225, 1019),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(59, 47), S(58, 29), S(63, 54), S(143, 119), S(658, -85),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-57, 4), S(-42, 18), S(-14, 90), S(55, 166), S(91, 296), S(210, 80),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(47, -43), S(27, -1), S(12, 27), S(18, 71), S(85, 150), S(170, 271),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(14, -44), S(-9, 3), S(-32, -20), S(-38, -45), S(-51, -88), S(-225, -141),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(5, 36), S(-34, 39), S(-25, -12), S(-13, -41), S(-8, -35), S(20, -42), S(2, -55),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-164, -92), S(33, -49), S(-5, -7), S(13, 23), S(18, 49), S(41, 47), S(-8, 68),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-205, -270), S(-98, -104), S(-41, -54), S(3, -20), S(51, -6), S(79, 34), S(116, 28), S(152, 22), S(204, -50),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-145, -376), S(-73, -185), S(8, -119), S(39, -74), S(67, -40), S(87, -20), S(103, -10), S(117, -6), S(129, 1), S(135, -9), S(156, -27), S(207, -77), S(234, -94), S(288, -132),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-199, -385), S(-112, -134), S(-58, -60), S(-21, -43), S(7, -17), S(29, 0), S(50, 8), S(80, 9), S(105, 17), S(133, 27), S(160, 26), S(177, 30), S(214, 23), S(233, 7), S(371, -116),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-296, 69), S(-287, -790), S(-192, -661), S(-145, -454), S(-120, -270), S(-88, -174), S(-88, -41), S(-61, -44), S(-52, -3), S(-41, 18), S(-33, 40), S(-28, 59), S(-12, 58), S(-2, 60), S(3, 62), S(20, 50), S(13, 61), S(25, 44), S(49, 7), S(76, -34), S(102, -67), S(133, -132), S(187, -170), S(345, -337), S(320, -349), S(755, -591), S(551, -537), S(1254, -900),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(432, 583), S(141, 382), S(42, 465), S(29, 500), S(6, 494), S(-31, 494), S(-7, 489), S(-15, 470), S(-11, 400),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(83, -31), S(153, -75),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(36, -3), S(142, -41),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(65, -44), S(67, -68), S(111, -71), S(143, -132),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-41, 33), S(-60, 43), S(-2, -8), S(146, -88), S(344, -233),
};

inline const PParam PAWN_THREAT_KNIGHT = S(228, 71);
inline const PParam PAWN_THREAT_BISHOP = S(201, 105);
inline const PParam PAWN_THREAT_ROOK   = S(186, 57);
inline const PParam PAWN_THREAT_QUEEN  = S(161, -52);

inline const PParam KNIGHT_THREAT_BISHOP = S(99, 72);
inline const PParam KNIGHT_THREAT_ROOK   = S(238, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(152, -78);

inline const PParam BISHOP_THREAT_KNIGHT = S(105, 25);
inline const PParam BISHOP_THREAT_ROOK   = S(234, 52);
inline const PParam BISHOP_THREAT_QUEEN  = S(186, 51);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(37, 6), S(20, 30), S(16, 14), S(3, -5), S(-12, -14), S(-24, -25), S(-26, -48), S(-46, -61), S(-68, -140),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(201, 396),    S(222, 438),    S(248, 415),    S(311, 289),    S(237, 297),    S(235, 362),    S(158, 379),    S(196, 352),    //
    S(37, -34),     S(166, -7),     S(135, -68),    S(136, -123),   S(91, -137),    S(41, -96),     S(7, -45),      S(-55, -45),    //
    S(-24, -73),    S(3, -69),      S(13, -112),    S(-3, -127),    S(-15, -133),   S(-55, -129),   S(-92, -79),    S(-124, -58),   //
    S(-34, -129),   S(-12, -98),    S(-17, -135),   S(-29, -134),   S(-49, -144),   S(-79, -128),   S(-131, -77),   S(-152, -92),   //
    S(-50, -158),   S(18, -155),    S(-33, -114),   S(-63, -107),   S(-78, -119),   S(-121, -120),  S(-135, -105),  S(-167, -109),  //
    S(-41, -154),   S(92, -150),    S(47, -118),    S(-11, -99),    S(-48, -112),   S(-82, -114),   S(-106, -87),   S(-143, -102),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-399, -109),  S(-337, 41),    S(-421, 221),   S(-150, 89),    S(-297, 108),   S(-372, 129),   S(-576, 71),    S(-528, 14),    //
    S(-1, -6),      S(72, 14),      S(164, -52),    S(105, 22),     S(112, 20),     S(43, -3),      S(-2, 8),       S(-32, -34),    //
    S(57, -18),     S(100, 36),     S(192, 34),     S(144, 48),     S(152, 36),     S(63, 47),      S(58, 17),      S(-36, 18),     //
    S(95, 20),      S(81, 51),      S(113, 62),     S(107, 84),     S(111, 70),     S(70, 74),      S(32, 22),      S(27, 14),      //
    S(95, 2),       S(110, 5),      S(102, 38),     S(88, 44),      S(79, 56),      S(67, 55),      S(39, 19),      S(33, -47),     //
    S(7, -22),      S(22, -31),     S(15, -15),     S(27, 35),      S(37, 32),      S(-22, 7),      S(-9, -35),     S(-46, -40),    //
    S(4, -4),       S(34, -28),     S(13, -25),     S(13, -8),      S(0, -16),      S(-28, -33),    S(-7, -46),     S(-75, -120),   //
    S(-38, -58),    S(5, -31),      S(20, -41),     S(30, -33),     S(25, -24),     S(-20, -58),    S(-39, -40),    S(-91, -80),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-145, 86),    S(-159, 54),    S(-385, 80),    S(-300, 109),   S(-230, 107),   S(-419, 135),   S(-122, 104),   S(-88, 87),     //
    S(37, -22),     S(30, 49),      S(29, 40),      S(29, 27),      S(10, 40),      S(25, 43),      S(1, 40),       S(-31, 30),     //
    S(52, 42),      S(118, 42),     S(230, 36),     S(138, 36),     S(124, 36),     S(96, 51),      S(140, 29),     S(17, 44),      //
    S(66, -9),      S(73, 52),      S(135, 42),     S(147, 67),     S(150, 67),     S(81, 67),      S(51, 49),      S(0, 32),       //
    S(66, -30),     S(90, 10),      S(97, 37),      S(107, 57),     S(99, 77),      S(49, 67),      S(35, 20),      S(19, -35),     //
    S(82, -40),     S(129, -9),     S(126, 0),      S(70, 43),      S(54, 51),      S(46, 50),      S(84, 2),       S(51, -41),     //
    S(72, -78),     S(117, -46),    S(97, -37),     S(67, -4),      S(59, -24),     S(57, -29),     S(32, -18),     S(57, -84),     //
    S(70, -54),     S(64, -9),      S(69, -11),     S(87, -42),     S(93, -46),     S(84, -14),     S(75, -34),     S(49, -33),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(151, 42),     S(214, 41),     S(125, 76),     S(137, 71),     S(156, 49),     S(103, 64),     S(116, 71),     S(128, 72),     //
    S(80, 90),      S(163, 67),     S(225, 49),     S(171, 85),     S(178, 76),     S(128, 84),     S(83, 98),      S(59, 110),     //
    S(59, 70),      S(200, 38),     S(242, 21),     S(264, 11),     S(218, 22),     S(136, 64),     S(147, 54),     S(29, 105),     //
    S(14, 63),      S(85, 54),      S(121, 49),     S(167, 3),      S(132, 29),     S(63, 81),      S(40, 79),      S(-33, 89),     //
    S(-57, 21),     S(23, 29),      S(18, 38),      S(21, 35),      S(18, 29),      S(-14, 77),     S(-44, 72),     S(-65, 60),     //
    S(-87, 2),      S(-12, -25),    S(-13, -1),     S(-30, 5),      S(-7, -16),     S(-60, 34),     S(-65, 20),     S(-86, 15),     //
    S(-132, 8),     S(-41, -42),    S(-16, -31),    S(-4, -33),     S(-11, -28),    S(-30, -14),    S(-49, -34),    S(-89, -19),    //
    S(-109, 10),    S(-70, 15),     S(-24, -17),    S(7, -34),      S(0, -21),      S(-13, -14),    S(-34, -19),    S(-65, -2),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(56, 81),      S(76, 55),      S(78, 64),      S(-46, 201),    S(43, 100),     S(-38, 150),    S(45, 47),      S(0, 66),       //
    S(41, 119),     S(-35, 213),    S(-38, 268),    S(-110, 293),   S(-92, 243),    S(-114, 253),   S(-49, 141),    S(-18, 82),     //
    S(-2, 150),     S(78, 158),     S(35, 222),     S(16, 227),     S(-21, 210),    S(-64, 218),    S(11, 113),     S(-25, 78),     //
    S(48, 75),      S(37, 163),     S(11, 186),     S(15, 235),     S(-12, 221),    S(-14, 151),    S(3, 83),       S(1, 36),       //
    S(18, 106),     S(56, 60),      S(31, 128),     S(3, 176),      S(-14, 166),    S(-12, 124),    S(-7, 57),      S(-3, 5),       //
    S(34, -77),     S(51, -15),     S(41, 61),      S(-6, 88),      S(14, 33),      S(12, 41),      S(22, -26),     S(0, -12),      //
    S(18, -176),    S(51, -281),    S(36, -134),    S(53, -59),     S(24, -40),     S(44, -116),    S(22, -54),     S(10, -60),     //
    S(-31, -92),    S(38, -356),    S(33, -347),    S(67, -258),    S(62, -172),    S(70, -217),    S(49, -167),    S(-7, -83),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-113, -424),  S(142, -61),    S(-72, 14),     S(-147, 46),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(219, -137),   S(-1, 135),     S(11, 133),     S(147, 77),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-53, 44),     S(67, 131),     S(87, 109),     S(91, 66),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-274, 73),    S(27, 94),      S(18, 97),      S(-33, 77),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-236, 25),    S(-49, 66),     S(-24, 68),     S(-106, 107),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-155, -2),    S(44, 10),      S(-45, 61),     S(-90, 90),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(72, -93),     S(122, -29),    S(35, 15),      S(-40, 59),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-52, -130),   S(84, -114),    S(-4, -80),     S(-25, -74),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on
}
