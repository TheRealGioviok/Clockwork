#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(301, 294);
inline const PScore KNIGHT_MAT = S(1208, 879);
inline const PScore BISHOP_MAT = S(1319, 933);
inline const PScore ROOK_MAT   = S(1816, 1620);
inline const PScore QUEEN_MAT  = S(3853, 2791);
inline const PScore TEMPO_VAL  = S(66, 9);

inline const PScore BISHOP_PAIR_VAL  = S(120, 160);
inline const PScore DOUBLED_PAWN_VAL = S(-49, -62);

inline const PScore POTENTIAL_CHECKER_VAL = S(-71, -10);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(25, 27), S(54, 47), S(65, 95), S(172, 204), S(789, 316), S(668, 1331)
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(67, 46), S(53, 40), S(58, 76), S(174, 113), S(556, 83)
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(-9, 38), S(-15, 55), S(-11, 116), S(21, 185), S(97, 316), S(201, 341)
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-219, -168), S(-130, -86), S(-78, -4), S(-31, 29), S(17, 45), S(46, 77), S(88, 72), S(124, 55),
    S(187, -16)
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-249, -144), S(-168, -69), S(-106, -51), S(-73, -5), S(-35, 21), S(-7, 43), S(8, 55), S(20, 68),
    S(24, 83), S(50, 60), S(54, 34), S(106, -8), S(155, -20), S(220, -66)
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-333, -333), S(-223, -47), S(-154, -31), S(-117, -9), S(-73, 13), S(-48, 29), S(-19, 49), S(0, 52),
    S(35, 57), S(58, 69), S(95, 68), S(117, 73), S(158, 60), S(167, 44), S(336, -91)
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-1125, -928), S(-454, -981), S(-136, -357), S(-91, -276), S(-115, -25), S(-79, 33), S(-84, 132), S(-59, 137),
    S(-57, 216), S(-43, 232), S(-21, 237), S(-17, 258), S(-4, 247), S(-4, 264), S(11, 260), S(22, 255),
    S(30, 240), S(42, 226), S(62, 216), S(95, 168), S(93, 150), S(137, 91), S(257, -37), S(325, -115),
    S(530, -297), S(357, -191), S(248, -129), S(93, -15)
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(-229, 67), S(182, -73), S(78, 7), S(27, 47), S(3, 38), S(-19, 13), S(0, 10), S(-20, -16),
    S(-23, -91)
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(66, -24), S(131, -66)
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(26, -7), S(120, -47)
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(81, -52), S(82, -91), S(116, -82), S(221, -160)
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-42, 49), S(-72, 55), S(-34, 20), S(110, -61), S(274, -198)
};

inline const PScore PAWN_THREAT_KNIGHT = S(227, 87);
inline const PScore PAWN_THREAT_BISHOP = S(249, 124);
inline const PScore PAWN_THREAT_ROOK = S(238, 76);
inline const PScore PAWN_THREAT_QUEEN = S(201, -26);

inline const PScore KNIGHT_THREAT_BISHOP = S(130, 65);
inline const PScore KNIGHT_THREAT_ROOK = S(231, 25);
inline const PScore KNIGHT_THREAT_QUEEN = S(172, -94);

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(74, 231), S(-22, 311), S(34, 194), S(64, 131), S(87, 44), S(80, 48), S(122, 163), S(92, 172),
    S(50, 43), S(93, 67), S(117, 3), S(137, -93), S(72, -111), S(39, -52), S(34, 17), S(-24, 32),
    S(-35, 17), S(12, 6), S(35, -38), S(30, -58), S(26, -78), S(-21, -62), S(-38, -6), S(-85, 19),
    S(-45, -45), S(-8, -24), S(23, -60), S(2, -50), S(-8, -74), S(-40, -48), S(-97, -3), S(-121, -18),
    S(-57, -80), S(20, -91), S(-21, -50), S(-36, -34), S(-55, -33), S(-87, -37), S(-109, -20), S(-123, -35),
    S(-57, -78), S(77, -78), S(44, -52), S(-7, -19), S(-37, -38), S(-57, -23), S(-58, -11), S(-122, -20)
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-324, -165), S(-377, 167), S(-718, 351), S(105, -29), S(-58, 11), S(-567, 163), S(-51, -67), S(-466, 38),
    S(-24, -19), S(14, -10), S(90, -55), S(186, -102), S(169, -43), S(21, -12), S(-16, -8), S(-65, -14),
    S(28, 13), S(89, 6), S(167, 68), S(156, 25), S(119, 36), S(100, 26), S(58, -1), S(-17, -23),
    S(128, -40), S(95, 9), S(112, 73), S(103, 93), S(117, 95), S(84, 45), S(29, 42), S(81, -24),
    S(109, -13), S(106, -10), S(112, 35), S(75, 70), S(87, 51), S(69, 51), S(51, -22), S(25, 22),
    S(7, -36), S(51, -28), S(18, -8), S(48, 44), S(36, 45), S(-16, 13), S(16, -39), S(-62, 5),
    S(28, -90), S(7, -22), S(27, -44), S(32, -6), S(-1, -4), S(-11, -39), S(-44, -15), S(-27, -136),
    S(-39, -113), S(8, -9), S(21, -30), S(49, -44), S(43, -77), S(-64, -67), S(-32, 6), S(-97, -169)
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(-27, -119), S(-254, 83), S(-603, 149), S(53, -19), S(-267, 82), S(-329, 117), S(-246, 81), S(-120, 57),
    S(-38, 39), S(10, -17), S(64, -48), S(-21, 21), S(-54, 30), S(-57, 41), S(-14, 41), S(-126, 107),
    S(67, -19), S(131, -7), S(181, 25), S(202, -35), S(129, -13), S(111, 2), S(47, 16), S(27, -51),
    S(-2, -16), S(62, 14), S(130, 18), S(123, 49), S(153, 13), S(63, 31), S(45, 8), S(-21, -17),
    S(71, -80), S(70, -2), S(57, 9), S(107, 37), S(84, 49), S(31, 46), S(2, 8), S(35, -51),
    S(21, -38), S(55, -23), S(73, -7), S(22, 29), S(26, 33), S(20, 25), S(39, -21), S(-23, -9),
    S(9, -104), S(68, -61), S(0, -24), S(0, -20), S(-27, -15), S(16, -54), S(20, -54), S(5, -53),
    S(-7, -45), S(-81, 16), S(-24, 11), S(-50, -48), S(-14, -98), S(6, -11), S(3, -70), S(-11, -51)
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(99, 33), S(111, 30), S(225, 2), S(79, 50), S(79, 19), S(101, 19), S(136, 16), S(83, 61),
    S(43, 71), S(80, 49), S(183, 31), S(114, 43), S(146, 11), S(97, 50), S(43, 52), S(1, 83),
    S(-7, 69), S(118, 13), S(188, -6), S(216, -19), S(175, -9), S(87, 16), S(96, 29), S(7, 51),
    S(-38, 29), S(1, 63), S(84, 18), S(114, -26), S(95, -26), S(83, -5), S(-10, 49), S(-30, 32),
    S(-113, 11), S(-99, 47), S(-7, -4), S(3, -36), S(-56, 11), S(-25, 25), S(-83, 29), S(-107, 29),
    S(-164, -28), S(-83, -43), S(-84, -27), S(-66, -19), S(-47, -54), S(-110, 3), S(-87, -37), S(-153, 4),
    S(-234, -4), S(-114, -58), S(-63, -64), S(-50, -69), S(-74, -48), S(-73, -46), S(-97, -65), S(-136, -45),
    S(-163, -36), S(-173, 10), S(-74, -53), S(-12, -98), S(-47, -60), S(-50, -58), S(-73, -54), S(-117, -33)
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(34, 31), S(36, 45), S(136, -29), S(93, 0), S(111, -8), S(0, 69), S(-17, 99), S(-64, 61),
    S(45, 79), S(-70, 197), S(-3, 169), S(-126, 252), S(-131, 227), S(-75, 211), S(-105, 174), S(-3, 17),
    S(-52, 148), S(29, 162), S(-31, 260), S(21, 190), S(5, 130), S(-48, 153), S(12, 72), S(-52, 38),
    S(53, -6), S(-33, 194), S(15, 134), S(-15, 171), S(-71, 225), S(-34, 93), S(-20, 29), S(23, -77),
    S(6, 27), S(-7, 87), S(-2, 88), S(-4, 98), S(-24, 128), S(-15, 51), S(-44, 63), S(15, -96),
    S(11, -93), S(25, -49), S(38, -41), S(4, -17), S(16, -30), S(6, -28), S(12, -38), S(-28, -29),
    S(-13, -250), S(70, -402), S(46, -253), S(54, -173), S(40, -137), S(57, -175), S(33, -124), S(63, -221),
    S(-92, -95), S(-59, -305), S(-101, -265), S(11, -255), S(54, -214), S(60, -299), S(55, -279), S(30, -213)
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(-686, -172), S(205, -33), S(120, -106), S(-147, -16), S(36, -24), S(36, -24), S(36, -24), S(36, -24),
    S(101, -99), S(-105, 274), S(-29, 192), S(-72, 152), S(36, -24), S(36, -24), S(36, -24), S(36, -24),
    S(235, -64), S(85, 176), S(-1, 179), S(-1, 135), S(36, -24), S(36, -24), S(36, -24), S(36, -24),
    S(-245, 34), S(82, 84), S(15, 127), S(-47, 136), S(36, -24), S(36, -24), S(36, -24), S(36, -24),
    S(-342, 34), S(-61, 83), S(-120, 119), S(-219, 176), S(36, -24), S(36, -24), S(36, -24), S(36, -24),
    S(-123, -57), S(48, 6), S(-86, 89), S(-123, 132), S(36, -24), S(36, -24), S(36, -24), S(36, -24),
    S(115, -157), S(139, -53), S(63, 12), S(-55, 70), S(36, -24), S(36, -24), S(36, -24), S(36, -24),
    S(9, -244), S(125, -179), S(-13, -112), S(-15, -124), S(36, -24), S(36, -24), S(36, -24), S(36, -24)
};
// clang-format on

}
