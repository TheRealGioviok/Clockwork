#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PScore PAWN_MAT   = S(168, 226);
inline const PScore KNIGHT_MAT = S(660, 471);
inline const PScore BISHOP_MAT = S(680, 541);
inline const PScore ROOK_MAT   = S(956, 879);
inline const PScore QUEEN_MAT  = S(1166, 1210);
inline const PScore TEMPO_VAL  = S(47, 0);

inline const PScore BISHOP_PAIR_VAL  = S(125, 46);
inline const PScore DOUBLED_PAWN_VAL = S(-12, -66);

inline const PScore POTENTIAL_CHECKER_VAL = S(-23, -93);
inline const std::array<PScore, 6> PAWN_PHALANX = {
    S(38, 0), S(40, 33), S(36, 68), S(113, 141), S(307, 254), S(180, 264)
};
inline const std::array<PScore, 5> DEFENDED_PAWN = {
    S(55, 15), S(33, 17), S(30, 41), S(86, 80), S(182, 154)
};
inline const std::array<PScore, 6> PASSED_PAWN = {
    S(-6, 43), S(-5, 48), S(0, 87), S(24, 126), S(116, 175), S(166, 222)
};

inline const std::array<PScore, 9> KNIGHT_MOBILITY = {
    S(-144, -94), S(-90, -57), S(-55, -12), S(-23, 9), S(14, 23), S(33, 49), S(62, 47), S(81, 45),
    S(122, -10)
};
inline const std::array<PScore, 14> BISHOP_MOBILITY = {
    S(-157, -104), S(-105, -49), S(-65, -48), S(-39, -15), S(-12, 5), S(10, 19), S(18, 32), S(26, 40),
    S(31, 50), S(50, 34), S(52, 19), S(64, 2), S(75, 14), S(53, -5)
};
inline const std::array<PScore, 15> ROOK_MOBILITY = {
    S(-255, -281), S(-142, -53), S(-95, -39), S(-70, -14), S(-39, 9), S(-23, 26), S(-2, 41), S(8, 45),
    S(32, 51), S(49, 57), S(78, 50), S(91, 49), S(116, 39), S(122, 26), S(123, -10)
};
inline const std::array<PScore, 28> QUEEN_MOBILITY = {
    S(-342, -355), S(-386, -379), S(-59, -250), S(2, -241), S(-18, -26), S(20, 42), S(26, 79), S(44, 95),
    S(45, 149), S(54, 189), S(56, 241), S(61, 247), S(70, 227), S(78, 211), S(98, 179), S(107, 151),
    S(115, 117), S(119, 88), S(128, 67), S(114, 39), S(95, 11), S(40, -57), S(63, -42), S(-25, -108),
    S(-34, -121), S(-114, -159), S(-174, -190), S(-179, -190)
};
inline const std::array<PScore, 9> KING_MOBILITY = {
    S(-94, -31), S(149, -66), S(71, -21), S(25, 24), S(-1, 32), S(-30, 29), S(-24, 36), S(-49, 25),
    S(-49, -31)
};

inline const std::array<PScore, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(58, -19), S(103, -19)
};
inline const std::array<PScore, 3> BISHOP_KING_RING = {
    CS(0, 0), S(33, -25), S(77, 4)
};
inline const std::array<PScore, 5> ROOK_KING_RING = {
    CS(0, 0), S(59, 3), S(54, -58), S(22, -16), S(-23, -47)
};
inline const std::array<PScore, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-88, 319), S(-68, 248), S(-28, 185), S(32, 137), S(39, 93)
};

inline const PScore PAWN_THREAT_KNIGHT = S(135, 80);
inline const PScore PAWN_THREAT_BISHOP = S(158, 74);
inline const PScore PAWN_THREAT_ROOK = S(98, 110);
inline const PScore PAWN_THREAT_QUEEN = S(143, -72);

inline const PScore KNIGHT_THREAT_BISHOP = S(105, 19);
inline const PScore KNIGHT_THREAT_ROOK = S(157, 0);
inline const PScore KNIGHT_THREAT_QUEEN = S(159, -263);

inline const std::array<PScore, 48> PAWN_PSQT = {
    S(109, 124), S(75, 149), S(78, 114), S(103, 91), S(92, 64), S(44, 53), S(114, 107), S(90, 102),
    S(17, 62), S(24, 81), S(86, 40), S(68, 5), S(35, -9), S(35, 1), S(25, 34), S(-22, 54),
    S(-40, 21), S(1, 0), S(33, -26), S(36, -41), S(32, -47), S(9, -39), S(-8, -8), S(-57, 28),
    S(-44, -36), S(-22, -36), S(12, -68), S(4, -58), S(-1, -61), S(-19, -40), S(-59, -6), S(-80, -8),
    S(-59, -53), S(-21, -90), S(-44, -64), S(-30, -65), S(-47, -42), S(-66, -41), S(-80, -19), S(-77, -16),
    S(-68, -30), S(-8, -50), S(-23, -53), S(-28, -38), S(-43, -42), S(-53, -29), S(-54, 1), S(-90, 4)
};
inline const std::array<PScore, 64> KNIGHT_PSQT = {
    S(-62, -46), S(-14, 54), S(-121, 13), S(43, 4), S(40, 10), S(-150, 12), S(26, -21), S(-111, 17),
    S(-53, 14), S(-3, 15), S(30, -20), S(89, -58), S(64, -14), S(-9, 24), S(-11, 20), S(-66, 40),
    S(0, 40), S(48, -20), S(79, 41), S(83, 3), S(62, 26), S(59, 18), S(20, 27), S(-9, 20),
    S(55, 0), S(38, -2), S(66, 31), S(55, 41), S(67, 50), S(45, 30), S(7, 24), S(35, 22),
    S(49, 16), S(43, -15), S(61, 1), S(46, 11), S(47, 25), S(32, 40), S(12, 0), S(1, 45),
    S(-18, -1), S(6, -31), S(-4, -24), S(7, 6), S(-6, 26), S(-29, 18), S(-19, -7), S(-61, 30),
    S(-21, -46), S(-36, -37), S(-7, -52), S(1, -7), S(-27, 9), S(-35, -7), S(-80, 12), S(-17, -96),
    S(-60, -111), S(-7, 32), S(-33, -47), S(-32, -30), S(-22, -48), S(-86, -60), S(-33, 50), S(-47, -122)
};
inline const std::array<PScore, 64> BISHOP_PSQT = {
    S(36, -64), S(-129, 42), S(-208, 40), S(19, 4), S(-99, 29), S(-142, 60), S(-94, 47), S(-17, 35),
    S(-37, 50), S(3, 1), S(39, -15), S(46, -5), S(3, 21), S(-26, 33), S(1, 44), S(-82, 90),
    S(41, -2), S(79, -3), S(104, 29), S(118, -2), S(89, 7), S(78, 23), S(22, 22), S(19, -29),
    S(-9, -9), S(38, 4), S(75, 13), S(96, 15), S(100, 14), S(37, 29), S(23, 15), S(-26, 15),
    S(33, -53), S(33, -25), S(30, -7), S(64, 9), S(49, 30), S(12, 37), S(-8, 13), S(24, -24),
    S(-7, -19), S(20, -45), S(32, -30), S(5, 2), S(6, 24), S(-5, 25), S(12, -7), S(-41, 27),
    S(-14, -84), S(29, -39), S(-22, -49), S(-13, -27), S(-35, -12), S(-9, -37), S(0, -18), S(-7, -34),
    S(-55, -2), S(-110, 0), S(-28, 15), S(-82, -57), S(-51, -87), S(-8, 10), S(-28, -65), S(-19, -26)
};
inline const std::array<PScore, 64> ROOK_PSQT = {
    S(31, 44), S(16, 41), S(47, 45), S(31, 41), S(29, 17), S(52, 17), S(75, 25), S(68, 44),
    S(30, 54), S(26, 46), S(92, 46), S(69, 39), S(69, 32), S(74, 34), S(51, 29), S(47, 44),
    S(6, 49), S(50, 31), S(85, 25), S(113, 20), S(101, 15), S(75, 18), S(80, 34), S(42, 34),
    S(-18, 34), S(-3, 38), S(63, 2), S(83, -23), S(77, -26), S(76, 0), S(15, 36), S(18, 29),
    S(-65, 14), S(-73, 10), S(-1, -40), S(11, -60), S(-37, -7), S(1, 7), S(-38, 19), S(-41, 32),
    S(-107, -20), S(-61, -65), S(-49, -79), S(-37, -79), S(-42, -56), S(-71, -16), S(-54, -30), S(-89, 13),
    S(-151, 6), S(-73, -97), S(-31, -101), S(-31, -86), S(-53, -57), S(-45, -33), S(-49, -52), S(-64, -25),
    S(-109, 22), S(-123, 20), S(-36, -34), S(10, -72), S(-26, -32), S(-27, -24), S(-36, -16), S(-63, 19)
};
inline const std::array<PScore, 64> QUEEN_PSQT = {
    S(68, -73), S(35, -96), S(28, -100), S(27, -90), S(36, -71), S(20, -76), S(49, -79), S(25, -63),
    S(43, 57), S(16, 37), S(45, -6), S(9, -16), S(3, -14), S(27, 35), S(-12, 64), S(13, 43),
    S(-25, 68), S(42, 49), S(30, 22), S(36, 6), S(38, -4), S(30, 20), S(48, 30), S(-13, 46),
    S(10, 49), S(7, 46), S(22, 18), S(31, 9), S(-4, 42), S(6, 23), S(-4, 48), S(0, 49),
    S(-25, 93), S(-8, 41), S(-6, 35), S(9, 44), S(1, 73), S(-10, 69), S(-18, 47), S(-10, 66),
    S(-26, 0), S(-12, 20), S(-5, 65), S(-30, 80), S(-21, 100), S(-26, 107), S(-25, 117), S(-47, 80),
    S(-65, -91), S(-12, -178), S(12, -150), S(3, 1), S(0, 12), S(-1, 41), S(-20, 48), S(-3, -6),
    S(-78, -39), S(-89, -212), S(-110, -209), S(-22, -123), S(-2, 25), S(-10, -89), S(-8, -105), S(-24, -40)
};
inline const std::array<PScore, 64> KING_PSQT = {
    S(-109, -124), S(-19, -28), S(-48, -13), S(-163, 8), S(11, -16), S(11, -16), S(11, -16), S(11, -16),
    S(-42, -34), S(6, 120), S(-11, 119), S(55, 83), S(11, -16), S(11, -16), S(11, -16), S(11, -16),
    S(-56, 7), S(94, 119), S(119, 119), S(84, 106), S(11, -16), S(11, -16), S(11, -16), S(11, -16),
    S(-226, 34), S(42, 76), S(110, 93), S(104, 93), S(11, -16), S(11, -16), S(11, -16), S(11, -16),
    S(-244, 6), S(-34, 56), S(1, 77), S(-11, 107), S(11, -16), S(11, -16), S(11, -16), S(11, -16),
    S(-136, -63), S(26, -3), S(-41, 63), S(-46, 96), S(11, -16), S(11, -16), S(11, -16), S(11, -16),
    S(51, -138), S(94, -52), S(52, 5), S(-17, 38), S(11, -16), S(11, -16), S(11, -16), S(11, -16),
    S(-48, -183), S(72, -132), S(-20, -84), S(-19, -87), S(11, -16), S(11, -16), S(11, -16), S(11, -16)
};
// clang-format on

}
