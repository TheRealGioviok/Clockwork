#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(288, 410);
inline const PParam KNIGHT_MAT = S(1055, 961);
inline const PParam BISHOP_MAT = S(1017, 1014);
inline const PParam ROOK_MAT   = S(1567, 1708);
inline const PParam QUEEN_MAT  = S(3553, 3063);
inline const PParam TEMPO_VAL  = S(56, 16);

inline const PParam BISHOP_PAIR_VAL  = S(76, 176);
inline const PParam DOUBLED_PAWN_VAL = S(-12, -84);

inline const PParam POTENTIAL_CHECKER_VAL = S(-77, -1);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(11, 19), S(47, 34), S(79, 66), S(208, 130), S(512, 270), S(1171, 1043),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(62, 44), S(57, 29), S(59, 55), S(139, 116), S(657, -85),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-64, -3), S(-50, 13), S(-21, 85), S(46, 158), S(112, 281), S(199, 81),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(50, -45), S(30, -3), S(11, 28), S(18, 74), S(87, 159), S(166, 276),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(29, -53), S(18, -7), S(-4, -25), S(-1, -47), S(-24, -86), S(-215, -146),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(8, 57), S(-33, 40), S(-21, -9), S(-9, -36), S(-3, -28), S(23, -33), S(4, -44),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-184, -93), S(14, -48), S(-8, -4), S(10, 26), S(16, 49), S(40, 46), S(-9, 70),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-302, -374), S(-139, -153), S(-56, -75), S(5, -26), S(58, -8), S(84, 33), S(122, 39), S(168, 40), S(217, -1),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-298, -517), S(-119, -280), S(-13, -102), S(49, -51), S(87, -16), S(113, 10), S(133, 23), S(147, 33), S(163, 38), S(175, 31), S(185, 27), S(238, -19), S(264, -48), S(325, -92),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-254, -306), S(-148, -265), S(-77, -100), S(-30, -55), S(7, -24), S(36, -6), S(54, 13), S(81, 17), S(106, 20), S(134, 30), S(164, 34), S(188, 34), S(217, 31), S(232, 20), S(371, -101),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-330, 68), S(-425, -864), S(-292, -799), S(-228, -527), S(-167, -338), S(-112, -275), S(-83, -134), S(-63, -53), S(-37, -48), S(-39, 20), S(-19, 25), S(-14, 57), S(-2, 61), S(8, 63), S(15, 75), S(30, 58), S(39, 57), S(46, 54), S(60, 32), S(72, 1), S(96, -24), S(128, -80), S(112, -69), S(311, -255), S(337, -316), S(622, -485), S(586, -500), S(1244, -842),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(455, 515), S(-66, 373), S(-45, 474), S(-38, 480), S(-10, 482), S(-15, 472), S(7, 472), S(19, 459), S(39, 418),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(83, -30), S(153, -73),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(33, -3), S(140, -41),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(73, -46), S(77, -74), S(115, -68), S(150, -126),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-39, 27), S(-57, 37), S(-5, -11), S(155, -101), S(340, -230),
};

inline const PParam PAWN_THREAT_KNIGHT = S(227, 71);
inline const PParam PAWN_THREAT_BISHOP = S(192, 99);
inline const PParam PAWN_THREAT_ROOK   = S(184, 55);
inline const PParam PAWN_THREAT_QUEEN  = S(151, -39);

inline const PParam KNIGHT_THREAT_BISHOP = S(94, 70);
inline const PParam KNIGHT_THREAT_ROOK   = S(238, 1);
inline const PParam KNIGHT_THREAT_QUEEN  = S(147, -70);

inline const PParam BISHOP_THREAT_KNIGHT = S(111, 26);
inline const PParam BISHOP_THREAT_ROOK   = S(234, 54);
inline const PParam BISHOP_THREAT_QUEEN  = S(187, 48);

inline const std::array<PParam, 9> BISHOP_PAWNS = {
    S(9, -11), S(8, -3), S(8, -14), S(3, -25), S(-4, -31), S(-11, -37), S(-14, -45), S(-23, -42), S(-30, -55),
};

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(200, 398),    S(200, 444),    S(235, 420),    S(306, 291),    S(240, 296),    S(235, 361),    S(149, 375),    S(203, 345),    //
    S(-4, -16),     S(105, 9),      S(79, -47),     S(91, -105),    S(48, -121),    S(-3, -83),     S(-37, -36),    S(-87, -37),    //
    S(-30, -67),    S(-12, -62),    S(0, -102),     S(-17, -118),   S(-28, -125),   S(-64, -124),   S(-103, -77),   S(-126, -59),   //
    S(-35, -124),   S(-15, -95),    S(-23, -129),   S(-39, -128),   S(-57, -140),   S(-79, -129),   S(-130, -80),   S(-151, -93),   //
    S(-49, -151),   S(20, -145),    S(-35, -99),    S(-69, -94),    S(-81, -111),   S(-120, -118),  S(-134, -107),  S(-170, -110),  //
    S(-28, -150),   S(114, -148),   S(66, -112),    S(-3, -92),     S(-48, -105),   S(-83, -111),   S(-106, -87),   S(-147, -100),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-345, -67),   S(-296, 40),    S(-403, 235),   S(-128, 97),    S(-272, 114),   S(-347, 138),   S(-543, 76),    S(-468, 57),    //
    S(23, 17),      S(88, 25),      S(176, -44),    S(127, 23),     S(127, 27),     S(58, 0),       S(10, 20),      S(8, -24),      //
    S(65, -10),     S(89, 43),      S(177, 25),     S(139, 38),     S(150, 27),     S(53, 34),      S(50, 24),      S(-32, 33),     //
    S(102, 28),     S(78, 53),      S(96, 55),      S(101, 76),     S(103, 65),     S(58, 67),      S(28, 27),      S(32, 23),      //
    S(104, 5),      S(101, 4),      S(87, 32),      S(67, 41),      S(64, 53),      S(55, 50),      S(34, 21),      S(46, -44),     //
    S(25, -18),     S(39, -36),     S(18, -22),     S(27, 26),      S(37, 23),      S(-23, 5),      S(13, -39),     S(-20, -32),    //
    S(22, 15),      S(40, -19),     S(13, -27),     S(8, -10),      S(3, -22),      S(-23, -36),    S(12, -43),     S(-53, -99),    //
    S(-34, -48),    S(2, -25),      S(-2, -37),     S(7, -23),      S(4, -17),      S(-49, -49),    S(-42, -36),    S(-76, -66),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-112, 94),    S(-135, 54),    S(-372, 86),    S(-303, 121),   S(-225, 117),   S(-406, 140),   S(-103, 107),   S(-69, 94),     //
    S(62, -16),     S(32, 53),      S(37, 41),      S(24, 35),      S(10, 46),      S(30, 48),      S(0, 46),       S(-10, 40),     //
    S(50, 53),      S(101, 49),     S(216, 39),     S(127, 41),     S(112, 44),     S(82, 58),      S(125, 35),     S(19, 53),      //
    S(77, -2),      S(68, 60),      S(123, 46),     S(132, 74),     S(136, 74),     S(70, 71),      S(47, 55),      S(6, 39),       //
    S(78, -22),     S(88, 12),      S(89, 40),      S(97, 59),      S(86, 84),      S(46, 69),      S(34, 26),      S(33, -30),     //
    S(108, -31),    S(132, -14),    S(136, -2),     S(72, 42),      S(60, 52),      S(54, 51),      S(94, 0),       S(82, -33),     //
    S(108, -51),    S(117, -36),    S(96, -32),     S(69, 0),       S(60, -19),     S(59, -22),     S(37, -9),      S(90, -63),     //
    S(102, -20),    S(61, -1),      S(49, -1),      S(74, -37),     S(83, -42),     S(74, -15),     S(69, -28),     S(83, -4),      //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(142, 42),     S(207, 39),     S(122, 75),     S(133, 68),     S(156, 45),     S(99, 62),      S(114, 65),     S(121, 69),     //
    S(84, 84),      S(166, 63),     S(223, 48),     S(172, 81),     S(183, 70),     S(133, 79),     S(88, 92),      S(65, 103),     //
    S(55, 69),      S(188, 36),     S(231, 22),     S(262, 12),     S(220, 22),     S(131, 65),     S(139, 55),     S(26, 104),     //
    S(13, 62),      S(81, 51),      S(121, 44),     S(165, 1),      S(132, 28),     S(63, 78),      S(40, 76),      S(-32, 86),     //
    S(-59, 20),     S(19, 24),      S(14, 34),      S(13, 34),      S(11, 26),      S(-15, 72),     S(-43, 68),     S(-66, 60),     //
    S(-93, 2),      S(-13, -32),    S(-16, -9),     S(-36, -1),     S(-12, -22),    S(-59, 27),     S(-63, 16),     S(-85, 12),     //
    S(-153, 11),    S(-59, -41),    S(-34, -32),    S(-17, -36),    S(-21, -33),    S(-38, -17),    S(-53, -38),    S(-98, -19),    //
    S(-115, 9),     S(-66, 13),     S(-19, -21),    S(16, -37),     S(6, -23),      S(-7, -16),     S(-28, -23),    S(-68, -6),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(68, 73),      S(82, 48),      S(79, 62),      S(-44, 196),    S(41, 96),      S(-29, 140),    S(53, 38),      S(6, 62),       //
    S(53, 114),     S(-32, 209),    S(-37, 270),    S(-106, 286),   S(-91, 237),    S(-112, 250),   S(-47, 146),    S(-7, 76),      //
    S(-12, 165),    S(67, 166),     S(16, 233),     S(6, 231),      S(-34, 218),    S(-75, 226),    S(0, 123),      S(-31, 90),     //
    S(46, 80),      S(30, 166),     S(-3, 199),     S(2, 245),      S(-21, 229),    S(-23, 159),    S(-2, 87),      S(2, 38),       //
    S(18, 105),     S(52, 65),      S(22, 133),     S(-7, 182),     S(-27, 178),    S(-18, 133),    S(-8, 59),      S(-2, 12),      //
    S(44, -90),     S(51, -27),     S(49, 45),      S(-5, 84),      S(15, 33),      S(16, 41),      S(33, -39),     S(16, -26),     //
    S(21, -185),    S(42, -278),    S(27, -130),    S(49, -61),     S(22, -43),     S(39, -112),    S(24, -58),     S(12, -56),     //
    S(-17, -105),   S(41, -354),    S(34, -348),    S(67, -258),    S(68, -178),    S(72, -215),    S(51, -171),    S(4, -102),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-64, -413),   S(146, -48),    S(-65, 28),     S(-150, 63),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(244, -133),   S(-34, 126),    S(-19, 120),    S(117, 62),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-36, 50),     S(35, 128),     S(46, 107),     S(56, 62),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-242, 76),    S(12, 94),      S(5, 95),       S(-57, 77),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-196, 24),    S(-63, 69),     S(-36, 70),     S(-127, 111),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-105, -10),   S(32, 15),      S(-56, 66),     S(-104, 92),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(100, -97),    S(82, -14),     S(-2, 25),      S(-81, 66),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(34, -157),    S(98, -112),    S(4, -77),      S(-23, -68),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on
}
