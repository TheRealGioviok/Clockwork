#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(282, 442);
inline const PParam KNIGHT_MAT = S(966, 1005);
inline const PParam BISHOP_MAT = S(969, 1060);
inline const PParam ROOK_MAT   = S(1475, 1795);
inline const PParam QUEEN_MAT  = S(3216, 3257);
inline const PParam TEMPO_VAL  = S(47, 15);

inline const PParam BISHOP_PAIR_VAL  = S(63, 189);
inline const PParam DOUBLED_PAWN_VAL = S(-48, -78);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -2);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(1, 18), S(54, 24), S(84, 64), S(193, 132), S(470, 526), S(1790, 1431),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(48, 46), S(51, 21), S(55, 38), S(103, 114), S(656, -133),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-12, -17), S(-31, 22), S(-31, 73), S(44, 127), S(75, 236), S(26, 39),
};
inline const PParam DEFENDED_PASSED_PUSH = S(13, 51);

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-216, -194), S(-109, -134), S(-54, -39), S(-3, -12), S(43, 8), S(64, 52), S(97, 49), S(121, 47), S(172, -36),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-123, -271), S(-73, -179), S(-14, -116), S(0, -60), S(36, -29), S(47, -5), S(70, 2), S(80, 13), S(87, 24), S(90, 19), S(114, 7), S(173, -47), S(217, -67), S(288, -100),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-206, -342), S(-86, -117), S(-43, -42), S(-23, -46), S(-8, -11), S(6, 4), S(25, 12), S(53, 8), S(79, 17), S(106, 25), S(131, 25), S(142, 31), S(188, 18), S(172, 21), S(272, -71),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(70, 102), S(-641, 577), S(-211, -398), S(-149, -216), S(-108, -261), S(-75, -212), S(-110, -11), S(-86, -43), S(-72, -11), S(-69, 16), S(-61, 35), S(-60, 70), S(-37, 54), S(-25, 51), S(-16, 53), S(-3, 48), S(-18, 72), S(5, 31), S(20, 18), S(53, -36), S(94, -81), S(127, -146), S(219, -218), S(417, -416), S(372, -420), S(948, -708), S(735, -633), S(1354, -999),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(392, 795), S(91, 433), S(19, 484), S(21, 512), S(0, 504), S(-23, 486), S(-7, 491), S(1, 462), S(50, 344),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(87, -40), S(152, -90),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(28, -2), S(137, -43),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -64), S(89, -81), S(140, -80), S(150, -131),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-53, 37), S(-71, 49), S(8, -26), S(177, -123), S(418, -271),
};

inline const PParam PAWN_THREAT_KNIGHT = S(209, 67);
inline const PParam PAWN_THREAT_BISHOP = S(178, 79);
inline const PParam PAWN_THREAT_ROOK   = S(174, 51);
inline const PParam PAWN_THREAT_QUEEN  = S(145, -76);

inline const PParam KNIGHT_THREAT_BISHOP = S(83, 69);
inline const PParam KNIGHT_THREAT_ROOK   = S(224, -12);
inline const PParam KNIGHT_THREAT_QUEEN  = S(134, -76);

inline const PParam BISHOP_THREAT_KNIGHT = S(82, 21);
inline const PParam BISHOP_THREAT_ROOK   = S(209, 41);
inline const PParam BISHOP_THREAT_QUEEN  = S(174, 30);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(-115, 489),   S(18, 494),     S(164, 439),    S(315, 219),    S(266, 235),    S(281, 331),    S(158, 370),    S(221, 356),    //
    S(15, -4),      S(179, 15),     S(116, -63),    S(149, -168),   S(73, -170),    S(15, -85),     S(-29, -8),     S(-50, -15),    //
    S(-42, -64),    S(-29, -58),    S(-28, -105),   S(-37, -136),   S(-50, -136),   S(-95, -132),   S(-110, -61),   S(-132, -39),   //
    S(-37, -139),   S(-17, -101),   S(-51, -145),   S(-52, -146),   S(-71, -157),   S(-103, -136),  S(-142, -66),   S(-153, -85),   //
    S(-32, -172),   S(30, -169),    S(-30, -130),   S(-91, -113),   S(-84, -134),   S(-133, -131),  S(-140, -103),  S(-171, -105),  //
    S(-27, -173),   S(126, -173),   S(43, -132),    S(-55, -92),    S(-74, -145),   S(-99, -125),   S(-114, -82),   S(-149, -99),   //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-405, -161),  S(-86, -80),    S(-557, 310),   S(-59, 61),     S(-336, 153),   S(-360, 173),   S(-415, -18),   S(-534, 44),    //
    S(49, -20),     S(80, 61),      S(198, -58),    S(30, 71),      S(86, 46),      S(41, 0),       S(-38, 17),     S(14, -44),     //
    S(36, 21),      S(-3, 119),     S(214, 58),     S(89, 97),      S(135, 60),     S(30, 65),      S(31, 30),      S(-63, 8),      //
    S(112, 37),     S(38, 93),      S(86, 94),      S(70, 111),     S(81, 76),      S(71, 72),      S(3, 24),       S(14, 40),      //
    S(79, 24),      S(106, 27),     S(81, 63),      S(46, 60),      S(51, 69),      S(51, 71),      S(9, 27),       S(21, -63),     //
    S(0, -30),      S(28, -37),     S(11, -28),     S(35, 38),      S(50, 35),      S(-32, -2),     S(-26, -19),    S(-63, -23),    //
    S(17, 64),      S(44, -27),     S(-8, -23),     S(-14, 4),      S(-20, -10),    S(-43, -37),    S(-23, -62),    S(-115, -119),  //
    S(-46, -16),    S(-3, -30),     S(55, -104),    S(35, -37),     S(68, -52),     S(0, -147),     S(-51, -46),    S(-169, -51),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-110, 110),   S(-43, 29),     S(-546, 130),   S(-278, 123),   S(-308, 140),   S(-418, 144),   S(-1, 82),      S(-11, 60),     //
    S(16, -33),     S(2, 81),       S(28, 61),      S(29, 21),      S(17, 44),      S(10, 59),      S(0, 46),       S(-56, 52),     //
    S(19, 81),      S(70, 80),      S(270, 44),     S(130, 44),     S(81, 55),      S(23, 92),      S(140, 31),     S(10, 89),      //
    S(31, 23),      S(33, 77),      S(130, 47),     S(126, 67),     S(134, 68),     S(56, 84),      S(43, 58),      S(-35, 69),     //
    S(31, -12),     S(45, 44),      S(65, 42),      S(84, 66),      S(84, 97),      S(31, 76),      S(33, 19),      S(23, -42),     //
    S(67, -19),     S(116, 1),      S(114, 3),      S(40, 60),      S(32, 70),      S(20, 77),      S(85, 7),       S(42, -42),     //
    S(35, -51),     S(115, -28),    S(60, -17),     S(39, 20),      S(30, -7),      S(59, -20),     S(6, 12),       S(69, -106),    //
    S(54, 1),       S(26, 13),      S(21, 22),      S(29, -38),     S(12, -32),     S(36, 4),       S(43, -62),     S(-32, 21),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(119, 27),     S(216, 33),     S(115, 75),     S(86, 89),      S(112, 61),     S(69, 61),      S(91, 59),      S(100, 59),     //
    S(126, 68),     S(176, 65),     S(249, 42),     S(161, 98),     S(158, 95),     S(72, 113),     S(35, 110),     S(55, 99),      //
    S(43, 71),      S(301, 6),      S(256, 18),     S(263, 4),      S(169, 40),     S(81, 76),      S(130, 47),     S(-14, 91),     //
    S(11, 56),      S(53, 55),      S(90, 43),      S(138, -8),     S(103, 20),     S(39, 81),      S(19, 70),      S(-73, 74),     //
    S(-110, 10),    S(27, -2),      S(-4, 28),      S(-2, 27),      S(-8, 21),      S(-44, 79),     S(-91, 78),     S(-112, 58),    //
    S(-98, -3),     S(18, -81),     S(-13, -29),    S(-46, -10),    S(-12, -33),    S(-103, 33),    S(-106, 16),    S(-113, 3),     //
    S(-155, 21),    S(-75, -46),    S(-33, -51),    S(-28, -37),    S(-44, -20),    S(-55, -17),    S(-108, -31),   S(-117, -31),   //
    S(-125, 4),     S(-91, 14),     S(-51, -22),    S(-17, -37),    S(-29, -18),    S(-38, -22),    S(-56, -36),    S(-87, -16),    //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(42, 92),      S(68, 54),      S(97, 70),      S(-75, 222),    S(5, 121),      S(-58, 166),    S(47, 46),      S(-24, 40),     //
    S(89, 69),      S(-90, 258),    S(-49, 311),    S(-149, 337),   S(-98, 253),    S(-144, 273),   S(-67, 139),    S(-8, 36),      //
    S(-33, 178),    S(95, 154),     S(51, 207),     S(-13, 260),    S(-32, 206),    S(-75, 217),    S(13, 92),      S(-10, 15),     //
    S(53, 66),      S(33, 150),     S(24, 162),     S(0, 236),      S(-7, 211),     S(5, 111),      S(8, 45),       S(-20, 49),     //
    S(29, 92),      S(60, 66),      S(29, 134),     S(0, 171),      S(-22, 184),    S(-18, 136),    S(-7, 23),      S(-13, -25),    //
    S(64, -132),    S(60, -18),     S(46, 57),      S(-33, 122),    S(11, 44),      S(3, 48),       S(29, -56),     S(-2, -42),     //
    S(51, -237),    S(44, -296),    S(21, -120),    S(43, -40),     S(-2, 1),       S(45, -123),    S(29, -53),     S(-17, -25),    //
    S(-81, -43),    S(-79, -323),   S(-14, -287),   S(14, -201),    S(39, -110),    S(62, -202),    S(36, -149),    S(-21, -51),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(482, -697),   S(285, -132),   S(-34, -11),    S(-150, 56),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(369, -161),   S(27, 129),     S(-34, 161),    S(292, 76),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-10, 37),     S(119, 144),    S(181, 116),    S(235, 57),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-223, 66),    S(1, 124),      S(139, 116),    S(104, 81),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-199, 8),     S(-28, 76),     S(42, 81),      S(-32, 129),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-144, -26),   S(71, -1),      S(-28, 66),     S(-78, 113),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(84, -111),    S(125, -41),    S(10, 30),      S(-103, 91),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-27, -172),   S(75, -131),    S(-54, -85),    S(-23, -114),   S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
